D.1. You will write a one-dimensional integer valued array
     sort function in C and Python. Start with Python

A. PYTHON

def bubblesort(array):
    try:
        n = len(array)
        swapped = True
        while swapped:
            swapped = False
            for i in range(1,n):
                if array[i-1] > array[i]:
                    temp = array[i-1]
                    array[i-1] = array[i]
                    array[i] = temp
                    swapped = True
        return [True, array]
    except:
        return [False, array]


arr = [-1,2,5,3,7,3,2,9,-9,]

print(bubblesort(arr))



B. C

#include <stdio.h>
#include <stdlib.h>

int* bubblesort(int* array, int size);

int main(void) {
    int size = 0;
    int i = 0;
    printf("Enter the size of the array: ");
    scanf("%i", &size);
    int* array = (int*)malloc(size*sizeof(int));

    for(i=0;i<size;i++) {
        printf("Enter number %d of array: ", i+1);
        scanf("%d", &array[i]);
    }

    if(array == NULL) {
        return -1;
    }
    else {
        int i = 0;
        for(i=0;i<size;i++) {
            printf("%3d\n", (bubblesort(array, size))[i]);
        }
        return 0;
    }
}

int* bubblesort(int* array, int size) {
    int swapped = 1;
    while(swapped) {
        int i = 0;
        swapped = 0;

        for(i=1;i<size;i++) {
            if(array[i-1] > array[i]) {
                int temp = array[i-1];
                array[i-1] = array[i];
                array[i] = temp;
                swapped = 1;
            }
        }
    }
    return array;

}







D.2. You will implement the Gaussian Elimination algorithm
     forward and backward steps in C and Python. Start with Python

A. PYTHON




B. C







D.3. TEST the above in various ways.
     Provide the same input to both the python and C versions and make
     sure your functions provide the same answer.

A. PYTHON

def ge_fw(matrix):
    try:
        count = 0
        for x in range(len(matrix)):
            print("x: ", x)
            for y in range(count, len(matrix[0])):
                print("y: ", y)
                print("matrix: ", matrix[x][y])
                if matrix[x][count] == 0:
                    for i in range(x+1, len(matrix)):
                        if matrix[i][y] != 0:
                            temp = matrix[x]
                            matrix[x] = matrix[i]
                            matrix[i] = temp
                        break
                    continue
                else:
                    print("hi")
                    self_div = matrix[x][count]
                    print(self_div)
                    for i in range(len(matrix[0])):
                        matrix[x][i] /= float(self_div)
                    print("he")
                    for i in range(1, len(matrix) - y):
                        # print("range: ", len(matrix)-y)
                        factor = (matrix[x + i][y]) / float(matrix[x][y])
                        for elements in range(len(matrix[0])):
                            matrix[x + i][elements] -= factor * (matrix[x][elements])
                            print(matrix[x + i][elements])
                            # print(matrix[x+i][elements])
                            # print("factor: ", factor)
                break

            count += 1

        for x in range(len(matrix)):
            for y in range(len(matrix[0])):
                matrix[x][y] = round(matrix[x][y], 5)

        return matrix

    except:
        return False



def ge_bw(matrix):
    try:
        count = 0
        xy = 0 if len(matrix[0]) - len(matrix) <= 0 else len(matrix[0]) - len(matrix)
        for x in range(len(matrix)-1,-1,-1):
            print("x: ", x)
            for y in range(len(matrix[0])-1-xy,count-1,-1):
                print("y: ", y)
                print("matrix: ", matrix[x][y])
                if matrix[x][y] == 0:
                    for i in range(x-1, -1, -1):
                        if matrix[i][y] != 0:
                            temp = matrix[x]
                            matrix[x] = matrix[i]
                            matrix[i] = temp
                            break
                    continue

                else:
                    self_div = matrix[x][y]
                    for i in range(len(matrix[0])):
                        matrix[x][i]/=self_div
                        print(matrix)
                    for i in range(len(matrix)-count-1,0,-1):
                        print("i: ", i)
                        #print(len(matrix)-count-1)
                        #print("range: ", len(matrix)-y)
                        factor = (matrix[x-i][y])/(matrix[x][y])
                        for elements in range(len(matrix[0])):
                            matrix[x-i][elements] -= factor*(matrix[x][elements])
                            print(matrix[x-i][elements])
                        print("factor: ", factor)
                    break

            count += 1
            print("count: ", count)

        for x in range(len(matrix)):
            if matrix[x] == [0 for i in range(len(matrix[0]))]:
                temp = matrix[x]
                for i in range(x, len(matrix)-1):
                    matrix[i] = matrix[i+1]
                matrix[len(matrix)-1] = temp

        for x in range(len(matrix)):
            for y in range(len(matrix[0])):
                matrix[x][y] = round(matrix[x][y], 5)

        return matrix

    except:
        return False

matrix = [[0, 8, 0], [6, 0, 0]]
#matrix = [[1, 1, 2],[0, 0, 2]]
#matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]
#print(ge_fw(matrix))
print(ge_bw(ge_fw(matrix)))
#print(ge_bw(matrix))


B. C
