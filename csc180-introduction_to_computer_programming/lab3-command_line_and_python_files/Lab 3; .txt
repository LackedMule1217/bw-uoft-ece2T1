1. Create a file, with a simple program that prints the first 10 fibonacci numbers. (blah.py)

def fibonacci(u):
    if u == 0:
        return 1
    if u == 1:
        return 1
    else:
        return (fibonacci(u - 2) + fibonacci(u - 1))

for i in range(0,10):
    print(fibonacci(i))






2. B.1. I/O (hwn.py)

n = int(raw_input())
msg = raw_input()

for i in range(n):
    print(msg)







3. B.2. Command line arguments (hwnarg.py)

import sys

FIN=""
FOUT=""
nargs=len(sys.argv)
skip=False
for i in range(1,nargs):
   if not skip:
      arg=sys.argv[i]
      print "INFO: processing",arg
      if arg == "--n":
         if i != nargs-1:
            FIN=sys.argv[i+1]
            skip=True
      elif arg == "--word":
         if i != nargs-1:
            FOUT=sys.argv[i+1]
            skip=True
      else:
         print "ERR: unknown arg:",arg
   else:
      skip=False

print "INFO: FIN",FIN
print "INFO: FOUT",FOUT







4. Exercise: (sortCSV.py)

import sys

FIN=""
FOUT=""
COL=""
DIR=""
nargs=len(sys.argv)
skip=False

for i in range(1,nargs):
   if not skip:
      arg=sys.argv[i]
      print("INFO: processing",arg)
      if arg == "--fin":
         if i != nargs-1:
            FIN=sys.argv[i+1]
            skip=True
      elif arg == "--fout":
         if i != nargs-1:
            FOUT=sys.argv[i+1]
            skip=True
      elif arg == "--col":
          if i != nargs - 1:
              COL = int(sys.argv[i + 1])
              skip = True
      elif arg == "--dir":
         if i != nargs-1:
            DIR=sys.argv[i+1]
            skip=True
      else:
         print("ERR: unknown arg:",arg)
   else:
      skip=False

try:
    f=open(FIN,"r")
    lines=f.readlines()
    f.close()
    accum=[]

    for line in lines:
        a=line.split("\n")[0]
        b=line.split(",")
        r=[]
        for i in b:
            r += [float(i)]
        accum += [r]

    def genSortKey(col, up):
        def key(x):
            return x[col] if up == "+" else -x[col]

        return key


    sortKey=genSortKey(COL,DIR)

    print(sorted(accum,key=sortKey))
    data = str(sorted(accum,key=sortKey))

    w=open(FOUT,"w")
    w.write(data)

except:
    print("Error!")






5. D.1. Map and Reduce (redfibo.py)

from functools import reduce

def fibo(n):
    if n == 0 or n ==1:
        return 1
    else:
        return fibo(n-1)+fibo(n-2)

def fiboL(n):
    accum=[]
    for i in range(n+1):
        accum += [fibo(i)]
    return accum

def redfibo(n):
    return reduce(lambda a,b: a*b, fiboL(n))

print(fibo(4))
print(fiboL(4))
print(redfibo(4))