1. Section I: (tttlib.py)

class ttt:

    def __init__(self):
        self.T = [0 for i in range(9)]

    def printBoard(self):
        list = [i for i in range(9)]
        try:
            assert len(self.T) == 9
            for i in self.T:
                assert i >= 0 and i <=2
                assert type(i) == int

            for i in range(9):
                if self.T[i] == 0:
                    list[i] = i
                elif self.T[i] == 1:
                    list[i] = "X"
                elif self.T[i] == 2:
                    list[i] = "O"
                else:
                    assert 1 == 2

            print(" {} | {} | {} ".format(list[0], list[1], list[2]))
            print("---|---|---")
            print(" {} | {} | {} ".format(list[3], list[4], list[5]))
            print("---|---|---")
            print(" {} | {} | {} ".format(list[6], list[7], list[8]))

            return True

        except:
            return False

    def analyzeBoard(self):
        try:
            assert len(self.T) == 9
            for i in self.T:
                assert i >= 0 and i <=2
                assert type(i) == int

            # Horizontal
            for i in range(0,9,3):
                if self.T[i] == self.T[i + 1] == self.T[i + 2] != 0:
                    return self.T[i]
            # Vertical
            for i in range(0,3):
                if self.T[i] == self.T[i + 3] == self.T[i + 6] != 0:
                    return self.T[i]
            # Diagonal
            if (self.T[0] == self.T[4] == self.T[8] or self.T[2] == self.T[4] == self.T[6]) and self.T[4] != 0:
                return self.T[4]

            if all(self.T[i] != 0 for i in range(9)):
                return 3

            return 0

        except:
            return -1

    def genRandomMove(self, player):
        from random import randint

        try:
            assert len(self.T) == 9
            assert player == 1 or player == 2
            for i in self.T:
                assert i >= 0 and i <=2
                assert type(i) == int
            if all(self.T[i] != 0 for i in range(len(self.T))):
                assert 1 == 2

            while True:
                num = randint(0,8)

                if self.T[num] == 0:
                    return num
                else:
                    continue

        except:
            return -1

    def genWinningMove(self, player):
        try:
            assert len(self.T) == 9
            assert player == 1 or player == 2
            for i in self.T:
                assert i >= 0 and i <=2
                assert type(i) == int
            if all(self.T[i] != 0 for i in range(len(self.T))):
                assert 1 == 2

            # Horizontal
            for i in range(0,9,3):
                if (self.T[i] == self.T[i + 1] == player) and self.T[i + 2] == 0:
                    return i + 2
                if (self.T[i] == self.T[i + 2] == player) and self.T[i + 1] == 0:
                    return i + 1
                if (self.T[i + 1] == self.T[i + 2] == player) and self.T[i] == 0:
                    return i
            # Vertical
            for i in range(0,3):
                if (self.T[i] == self.T[i + 3] == player) and self.T[i + 6] == 0:
                    return 1 + 6
                if (self.T[i] == self.T[i + 6] == player) and self.T[i + 3] == 0:
                    return 1 + 3
                if (self.T[i + 3] == self.T[i + 6] == player) and self.T[i] == 0:
                    return 1

            # Diagonal
            if (self.T[0] == self.T[4] == player) and self.T[8] == 0:
                return 8
            if (self.T[0] == self.T[8] == player) and self.T[4] == 0:
                return 4
            if (self.T[4] == self.T[8] == player) and self.T[0] == 0:
                return 0
            if (self.T[2] == self.T[4] == player) and self.T[6] == 0:
                return 6
            if (self.T[2] == self.T[6] == player) and self.T[4] == 0:
                return 4
            if (self.T[4] == self.T[6] == player) and self.T[2] == 0:
                return 2
            else:
                return -1

        except:
            return -1

    def genNonLoser(self, player):
        try:
            assert len(self.T) == 9
            assert player == 1 or player == 2
            for i in self.T:
                assert i >= 0 and i <=2
                assert type(i) == int
            if all(self.T[i] != 0 for i in range(len(self.T))):
                assert 1 == 2

            # Horizontal
            for i in range(0,9,3):
                if (self.T[i] == self.T[i + 1] != player and self.T[i] != 0) and self.T[i + 2] == 0:
                    return i + 2
                if (self.T[i] == self.T[i + 2] != player and self.T[i] != 0) and self.T[i + 1] == 0:
                    return i + 1
                if (self.T[i + 1] == self.T[i + 2] != player and self.T[i+1] != 0) and self.T[i] == 0:
                    return i
            # Vertical
            for i in range(0,3):
                if (self.T[i] == self.T[i + 3] != player and self.T[i] != 0) and self.T[i + 6] == 0:
                    return 1 + 6
                if (self.T[i] == self.T[i + 6] != player and self.T[i] != 0) and self.T[i + 3] == 0:
                    return 1 + 3
                if (self.T[i + 3] == self.T[i + 6] != player and self.T[i+3] != 0) and self.T[i] == 0:
                    return 1

            # Diagonal
            if (self.T[0] == self.T[4] != player and self.T[0] != 0) and self.T[8] == 0:
                return 8
            if (self.T[0] == self.T[8] != player and self.T[0] != 0) and self.T[4] == 0:
                return 4
            if (self.T[4] == self.T[8] != player and self.T[4] != 0) and self.T[0] == 0:
                return 0
            if (self.T[2] == self.T[4] != player and self.T[2] != 0) and self.T[6] == 0:
                return 6
            if (self.T[2] == self.T[6] != player and self.T[2] != 0) and self.T[4] == 0:
                return 4
            if (self.T[4] == self.T[6] != player and self.T[4] != 0) and self.T[2] == 0:
                return 2
            else:
                return -1

        except:
            return -1

    def Move(self, x, player):
        try:
            assert x >= 0 and x <= 8
            assert player == 1 or player == 2

            if self.T[x] == 0:
                self.T[x] = player
                return True
            else:
                return False

        except:
            return False

    def copy(self, source):
        if len(self.T) != len(source.T):
            return False
        else:
            for i in range(len(self.T)):
                self.T[i] = source.T[i]
            return True


#self.T = [0,0,0,0,2,2,0,0,0]

player = 1

#print(self.T)

print(ttt().printBoard())
print()
print(ttt().analyzeBoard())
print()
print(ttt().genRandomMove(player))
print()
print(ttt().genWinningMove(player))
print()
print(ttt().genNonLoser(player))
print()
print(ttt().Move(8, 1))







2. Section II: (stack.py)

class stack:

    def __init__(self):
        self.store = []

    def push(self, x):
        self.store = self.store + [x]

    def pop(self):
        try:
            rval = self.store[len(self.store)-1]
            self.store = self.store[0:len(self.store)-1]
            return rval

        except:
            return False

    def disp(self):
        for i in range(0, len(self.store)):
            print(self.store[i])


x = stack()

x.push(1)
x.push(100)
x.push(10000)

x.disp()

x.pop()
x.pop()
x.pop()
x.pop()

x.disp()