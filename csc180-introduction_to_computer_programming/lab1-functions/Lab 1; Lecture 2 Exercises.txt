* Write a function Palindromize(word) that returns a palindrome
   generated from the input word as you can infer from the example below:
      Palindromize("abc") -> "abcba"
   Hint 1: range(a,b,c) generates a list from "a" to "b" in steps of "c" NOT including "b"
   Hint 2: c can be negative, if you want to go downwards
   Hint 3: the length of a word is "len(word)"
           the first char is word[0]
   Hint 4: you can concatenate a string from its letters via "+"
   Hint 5: if I wanted to re-construct a string by concatenation of its letters:
           accumulator = ''
           for i in range(0,len(word),1):
              accumulator = accumulator + word[i]

def Palindromize():
    #below is the datapath
    word=str(raw_input("Enter a string to be palindromized: "))

    #below is the control
    word+=(word[len(word)-2::-1])

    print(word)

Palindromize()






 * Write a function to compute x**n (x to the power of n)
   (not using existing Python functions for exponentiation)

#Datapath
while True:
	try:
		base = float(raw_input("Enter a base value: "))
		exponent = float(raw_input("Enter an exponent value: "))
		break
	except:
		print("ERR")

#Control
def power(x, n):
	print(x**n)

power(base, exponent)






 * Write a function "babylonSqrt(x,accuracy)" that takes in
   "x" (whose square root we want to determine), and "accuracy" (the desired
   accuracy of the answer), and returns the square root of "x" calculated
   via the Babylonian method of square roots

#Datapath
import math

while True:
	try:
		number = float(input("Enter a number to be square rooted: "))
		accuracy = float(input("Enter the desired accuracy of the answer (such as 0.001): "))
		assert number/abs(number)==1
		assert accuracy < 1
		break
	except:
		print("ERR")

#Control
def babylonSqrt(x, accuracy):
    guess = x/2
    while True:
        check=x/guess
        guess=0.5*(guess+check)

        if abs(guess**2-x) < accuracy:
            print(round(guess, int(abs(round((math.log(accuracy, 10)),0)))))
            break
        else:
            print(guess)
            print(check)
            continue

babylonSqrt(number, accuracy)






 * Write a function "LeibnizPi(n)" that computes Pi according to the
   Leibniz formula, using "n" terms of the right-hand side series as per
   the definition below:
     pi/4 - 1 = - 1/3 + 1/5 - 1/7 + 1/9 - ... 1/(2*n+1)

#Datapath
while True:
    try:
        number = int(input("Enter the number of terms to calculate pi: "))
        assert number / abs(number) == 1
        break
    except:
        print("ERR")

#Control
def LeibnizPi(n):
	result = 0
	for a in range(1, n+1, 2):
		result += -(1/(2*a+1))
	for b in range(2, n+1, 2):
		result += (1/(2*b+1))
	result = (result+1)*4
	print(result)

LeibnizPi(number)






 * Using a while loop, determine how large n must be in order to get
   an accuracy of 0.01 with Leibniz (recall, pi = 3.14159265)

#Control
def LeibnizPi():
    n=1
    pi=3.14159265
    neg=True

    while True:
        result = 0
        for x in range(1, n+1):
            if neg:
                result -= (1/(2*x+1))
                neg=False
            else:
                result += (1/(2*x+1))
                neg=True

        result = (result+1)*4

        if abs(result-pi) < 0.01:
            print(n, "iterations are required to get an accuracy of 0.01 for pi with the Leibniz formula")
            break
        else:
            neg=True
            n+=1
            continue

LeibnizPi()






 * Write a function that implements Euclid's GCD algorithm and test it

#Datapath
while True:
    try:
        first_number=int(input("Enter the first number: "))
        second_number=int(input("Enter the second number: "))
        assert first_number/first_number == 1
        assert second_number/second_number == 1
        break
    except:
        print("ERR")

#Control
def Euclid_GCD(a,b):
    while True:
        if b==0:
            print("The greatest common divisor between", first_number, "and", second_number, "is", a)
            break

        elif b>a:
            a,b=b,a
            continue

        else:
            a=a%b
            a,b=b,a
            continue

Euclid_GCD(first_number,second_number)






 * Comment on what portions of these programs are the datapath and control






* We are going to do a lab in the future that implements a simple chess player.
   To start, answer the following questions: (write the answer as comments in the
   jupyter notebook)
	1. How are you going to represent the state of the chess board?
	   What "data structure" would you use? Why?
		1) Chessboard Layout: 2-D List
		2) Chess Pieces: Dictionary with 6 keys which takes the 6 different chess pieces (king, queen, rooks, bishops, knights, pawns) as the keys. The values range from the numbers 1 to 6 corresponding to the chess piece type. These values will be linked to the corresponding functions that will define how these pieces will move on the chess board.



	2. How can you print the state of the chessboard in a manner that
	   would be useful for a user of the program?
		Border: use "|" and "-" to draw out the gridlines of the chessboard.
		Chess Pieces: use the capitalized first letter in the name of each chess piece to identify them on the chessboard.
		Blank Spaces: use " " (space) to signify a blank space on the chess board.



	3. What would the structure of the program look like?
	   This means: what are the *high-level* logical steps that the program
	   will be executing.
		While True:
			1) Print Stats of Board
				- show where each chess piece lie on the chess board grid
			2) Ask player_1 for Input
				- checks for valid input
				- performs the move for the desired piece
			3) Analyze Board
				- checks if checkmate
				- prints("won" /or/ "loss" /or/ "draw") if checkmate or draw
				- if checkmate or draw then break from while loop
			4) Ask player_2 for Input
				- checks for valid input
				- performs the move for the desired piece
			5) Analyze Board
				- checks if checkmate
				- prints("won" /or/ "loss" /or/ "draw") if checkmate or draw
				- if checkmate or draw then break from while loop