#include <stdio.h>
#include <stdlib.h>
#include "ll.h"

int ll_add_to_head(llnode **head, int val) {
    llnode *old_head = NULL;
    if (head == NULL) {
        return -1;
    }
    old_head = *head;

    *head = (llnode *) malloc(sizeof(llnode));
    (*head) -> val = val;
    (*head) -> prev = NULL;
    (*head) -> next = old_head;
    if (old_head != NULL) {
        old_head -> prev = *head;
    }
    return 0;
}

int ll_add_to_tail(llnode **head, int val) {
    llnode* prev = NULL;
    if (head == NULL) {
        return -1;
    }
    if (*head == NULL)  {
        return ll_add_to_head(head, val);
    }
    if ((*head) -> next == NULL) {
        prev = *head;
        (*head) -> next = (llnode *) malloc(sizeof(llnode));
        (*head) -> next -> val = val;
        (*head) -> next -> prev = prev;
        (*head) -> next -> next = NULL;
        return 0;
    } else { /* recursively call ll_add_to_tail until we get to the tail
					which is the point where the pointer is NULL */
        return ll_add_to_tail(&((*head)->next), val);
    }
}

int ll_print(llnode *p) {
    if (p==NULL) {
        return 0;
    } else {
        printf("val = %d\n",p->val);
        return ll_print(p->next);
    }
}

int ll_free(llnode *p) {
    if (p==NULL) {
        return -1;
    } else {
        llnode *f=p->next;
        free(p);
        return ll_free(f);
    }
}

int ll_find_by_value(llnode *pList,int val) {
    if((pList == NULL) || (&pList == NULL)) {
        return -1;
    }

    while(pList != NULL) {
        if(pList -> val == val) {
            /*printf("\nll_find_by_value: %i\n", pList -> val);*/
            return 0;
        }
        else {
            pList = pList -> next;
        }
    }
    /*printf("\nll_find_by_value: No Find!\n");*/
    return -1;
}

int ll_del_from_tail(llnode **ppList) {
    llnode* prev = NULL;
    llnode* curr = NULL;

    if ((ppList == NULL) || (*ppList == NULL)) {
        return -1;
    }

    prev = *ppList;
    curr = *ppList;

    if(curr -> next == NULL) {
        return ll_del_from_head(ppList);
    }
    while(curr -> next != NULL) {
        prev = curr;
        curr = curr -> next;
    }
    prev -> next = NULL;
    free(prev -> next);
    return 0;
}

int ll_del_from_head(llnode **ppList) {
    llnode* curr = NULL;

    if ((ppList == NULL) || (*ppList == NULL)) {
        return -1;
    }

    curr = *ppList;
    *ppList = NULL;
    free(*ppList);
    *ppList = curr -> next;
    (*ppList) -> prev = NULL;
    return 0;
}

int ll_del_by_value(llnode **ppList,int val) {
    llnode* prev = NULL;
    llnode* curr = NULL;

    if ((ppList == NULL) || (*ppList == NULL)) {
        return -1;
    }

    prev = *ppList;
    curr = *ppList;

    if(curr -> val == val) {
        return ll_del_from_head(ppList);
    }
    while(curr -> next != NULL) {
        if(curr -> val == val) {
            break;
        }
        prev = curr;
        curr = curr -> next;
    }
    if((curr -> next == NULL) && (curr -> val != val)) {
        /*printf("\nll_del_by_value: NO VALUE!\n");*/
        return -1;
    }
    else if((curr -> next == NULL) && (curr -> val == val)) {
        return ll_del_from_tail(ppList);
    }

    prev -> next = curr -> next;
    curr -> next -> prev = prev;
    free(curr);
    return 0;
}

int ll_concat(llnode **pSrcA,llnode **pSrcB) {
    llnode* currA = NULL;
    llnode* currB = NULL;

    if((pSrcA == NULL) || (*pSrcA == NULL) || (pSrcB == NULL) || (*pSrcB == NULL)) {
        return -1;
    }
    if(pSrcA == pSrcB) {
        return -1;
    }

    currA = *pSrcA;
    currB = *pSrcB;

    while(currB != NULL) {
        ll_add_to_tail(&currA, currB -> val);
        currB = currB -> next;
    }
    return 0;
}

int ll_sort(llnode **ppList) {
    llnode* prev = NULL;
    llnode* curr = NULL;
    int swapped = 1;
    int temp = 0;

    if ((ppList == NULL) || (*ppList == NULL)) {
        return -1;
    }
    if ((*ppList) -> next == NULL) {
        return 0;
    }

    while(swapped) {
        swapped = 0;
        prev = *ppList;
        curr = *ppList;
        while(curr -> next != NULL) {
            curr = curr -> next;
            if(prev -> val > curr -> val) {
                temp = prev -> val;
                prev -> val = curr -> val;
                curr -> val = temp;
                swapped = 1;
            }
            prev = curr;
        }
    }
    return 0;
}

int ll_insert_in_order(llnode **ppList,int val) {
    llnode *prev = NULL;
    llnode *curr = NULL;

    if (ppList == NULL) {
        return -1;
    }
    if (*ppList == NULL) {
        return ll_add_to_head(ppList,val);
    }
    if ((*ppList) -> val > val) {
        return ll_add_to_head(ppList,val);
    }
    else {
        prev = *ppList;
        curr = (*ppList)->next;
        while(curr != NULL) {
            if (curr->val > val) {
                break;
            } else {
                prev = curr;
                curr = prev->next;
            }
        }
        prev->next = (llnode *) malloc(sizeof(llnode));
        prev->next->val = val;
        prev->next->prev = prev;
        prev->next->next = curr;
        if (curr != NULL) {
            curr -> prev = prev -> next;
        }
        return 0;
    }
}