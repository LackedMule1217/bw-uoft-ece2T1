
D:/Barney/OneDrive - University of Toronto/2. Homework/10. Computer Organization (ECE243)/Labs/Lab 8; Connect Four (Project)/project_connect_4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 b4 43 00 00 b8 43 00 00 bc 43 00 00     @....C...C...C..
      30:	c0 43 00 00 b0 43 00 00 c4 43 00 00 c8 43 00 00     .C...C...C...C..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00109c 	bl	434c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00004868 	.word	0x00004868

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00004cb0 	.word	0x00004cb0

00000124 <__cs3_heap_start_ptr>:
     124:	0009c018 	.word	0x0009c018

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00004cb8 	.word	0x00004cb8
     170:	00004cbb 	.word	0x00004cbb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00004cb8 	.word	0x00004cb8
     1bc:	00004cb8 	.word	0x00004cb8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00004cb8 	.word	0x00004cb8
     200:	00000000 	.word	0x00000000
     204:	00004454 	.word	0x00004454

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004454 	.word	0x00004454
     250:	00004cbc 	.word	0x00004cbc
     254:	00004868 	.word	0x00004868
     258:	00000000 	.word	0x00000000

0000025c <main>:
char byte1 = 0, byte2 = 0, byte3 = 0;



int main(void)
{
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000;                                 // first store the address in the back buffer
     264:	e3043870 	movw	r3, #18544	; 0x4870
     268:	e3403000 	movt	r3, #0
     26c:	e5933000 	ldr	r3, [r3]
     270:	e2833004 	add	r3, r3, #4
     274:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     278:	e5832000 	str	r2, [r3]
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     27c:	eb00017b 	bl	870 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     280:	e3043870 	movw	r3, #18544	; 0x4870
     284:	e3403000 	movt	r3, #0
     288:	e5933000 	ldr	r3, [r3]
     28c:	e5932000 	ldr	r2, [r3]
     290:	e3043cd4 	movw	r3, #19668	; 0x4cd4
     294:	e3403000 	movt	r3, #0
     298:	e5832000 	str	r2, [r3]
    fill_canvas(BACKGROUND_COLOUR);                                     // clear buffer
     29c:	e3a00000 	mov	r0, #0
     2a0:	eb000189 	bl	8cc <fill_canvas>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     2a4:	e3043870 	movw	r3, #18544	; 0x4870
     2a8:	e3403000 	movt	r3, #0
     2ac:	e5933000 	ldr	r3, [r3]
     2b0:	e2833004 	add	r3, r3, #4
     2b4:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     2b8:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1);                         // we draw on the back buffer
     2bc:	e3043870 	movw	r3, #18544	; 0x4870
     2c0:	e3403000 	movt	r3, #0
     2c4:	e5933000 	ldr	r3, [r3]
     2c8:	e5932004 	ldr	r2, [r3, #4]
     2cc:	e3043cd4 	movw	r3, #19668	; 0x4cd4
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5832000 	str	r2, [r3]
    fill_canvas(BACKGROUND_COLOUR);                                     // clear back buffer
     2d8:	e3a00000 	mov	r0, #0
     2dc:	eb00017a 	bl	8cc <fill_canvas>
    /* clear txt buffer */
    clear_txt_canvas();
     2e0:	eb0000a6 	bl	580 <clear_txt_canvas>
    draw_txt_canvas();
     2e4:	eb000101 	bl	6f0 <draw_txt_canvas>
    // PS/2 mouse needs to be reset (must be already plugged in)
    *(PS2_ptr) = 0xFF; // reset
     2e8:	e3043878 	movw	r3, #18552	; 0x4878
     2ec:	e3403000 	movt	r3, #0
     2f0:	e5933000 	ldr	r3, [r3]
     2f4:	e3a020ff 	mov	r2, #255	; 0xff
     2f8:	e5832000 	str	r2, [r3]
    while (true) {
        // 1) Draw initial game board and then wait for any key
        is_player1_turn = true;
     2fc:	e30c300d 	movw	r3, #49165	; 0xc00d
     300:	e3403009 	movt	r3, #9
     304:	e3a02001 	mov	r2, #1
     308:	e5c32000 	strb	r2, [r3]
        draw_background(true);
     30c:	e3a00001 	mov	r0, #1
     310:	eb000209 	bl	b3c <draw_background>
        draw_canvas();
     314:	eb0000c1 	bl	620 <draw_canvas>
        wait_for_correct_one_key(PS2_KEY_CODES[0]);                      // wait for enter
     318:	e30437f0 	movw	r3, #18416	; 0x47f0
     31c:	e3403000 	movt	r3, #0
     320:	e5933000 	ldr	r3, [r3]
     324:	e1a00003 	mov	r0, r3
     328:	eb000ce8 	bl	36d0 <wait_for_correct_one_key>
        draw_background(false);
     32c:	e3a00000 	mov	r0, #0
     330:	eb000201 	bl	b3c <draw_background>
        draw_canvas();
     334:	eb0000b9 	bl	620 <draw_canvas>
        // 2) Run game loop
        while (true) {
            wait_player_move();
     338:	eb00062c 	bl	1bf0 <wait_player_move>
            if (is_reset_game)  break;
     33c:	e30c300e 	movw	r3, #49166	; 0xc00e
     340:	e3403009 	movt	r3, #9
     344:	e5d33000 	ldrb	r3, [r3]
     348:	e3530000 	cmp	r3, #0
     34c:	1a000016 	bne	3ac <main+0x150>
            draw_background(false);
     350:	e3a00000 	mov	r0, #0
     354:	eb0001f8 	bl	b3c <draw_background>
            draw_canvas();
     358:	eb0000b0 	bl	620 <draw_canvas>
            check_game_over();
     35c:	eb0007ae 	bl	221c <check_game_over>
            handle_game_over();
     360:	eb000a5c 	bl	2cd8 <handle_game_over>
            is_player1_turn = !is_player1_turn;
     364:	e30c300d 	movw	r3, #49165	; 0xc00d
     368:	e3403009 	movt	r3, #9
     36c:	e5d33000 	ldrb	r3, [r3]
     370:	e3530000 	cmp	r3, #0
     374:	03a03000 	moveq	r3, #0
     378:	13a03001 	movne	r3, #1
     37c:	e6ef3073 	uxtb	r3, r3
     380:	e2233001 	eor	r3, r3, #1
     384:	e6ef3073 	uxtb	r3, r3
     388:	e2033001 	and	r3, r3, #1
     38c:	e6ef2073 	uxtb	r2, r3
     390:	e30c300d 	movw	r3, #49165	; 0xc00d
     394:	e3403009 	movt	r3, #9
     398:	e5c32000 	strb	r2, [r3]
            draw_background(false);
     39c:	e3a00000 	mov	r0, #0
     3a0:	eb0001e5 	bl	b3c <draw_background>
            draw_canvas();
     3a4:	eb00009d 	bl	620 <draw_canvas>
        }
     3a8:	eaffffe2 	b	338 <main+0xdc>
        draw_background(false);
        draw_canvas();
        // 2) Run game loop
        while (true) {
            wait_player_move();
            if (is_reset_game)  break;
     3ac:	e1a00000 	nop			; (mov r0, r0)
            is_player1_turn = !is_player1_turn;
            draw_background(false);
            draw_canvas();
        }
        // 3) Handle game reset
        reset_game();
     3b0:	eb000c53 	bl	3504 <reset_game>
        erase_preview_place_chip();
     3b4:	eb00069e 	bl	1e34 <erase_preview_place_chip>
        draw_background(false);
     3b8:	e3a00000 	mov	r0, #0
     3bc:	eb0001de 	bl	b3c <draw_background>
        draw_canvas();
     3c0:	eb000096 	bl	620 <draw_canvas>
        clear_txt_canvas();
     3c4:	eb00006d 	bl	580 <clear_txt_canvas>
        draw_txt_canvas();
     3c8:	eb0000c8 	bl	6f0 <draw_txt_canvas>
    }
     3cc:	eaffffca 	b	2fc <main+0xa0>

000003d0 <update_canvas>:
}



// A. VGA Display
void update_canvas(int x, int y, short int colour) {
     3d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     3d4:	e28db000 	add	r11, sp, #0
     3d8:	e24dd014 	sub	sp, sp, #20
     3dc:	e50b0008 	str	r0, [r11, #-8]
     3e0:	e50b100c 	str	r1, [r11, #-12]
     3e4:	e1a03002 	mov	r3, r2
     3e8:	e14b30be 	strh	r3, [r11, #-14]
    canvas[y][x] = colour;
     3ec:	e15b00fe 	ldrsh	r0, [r11, #-14]
     3f0:	e3042cd8 	movw	r2, #19672	; 0x4cd8
     3f4:	e3402000 	movt	r2, #0
     3f8:	e51b100c 	ldr	r1, [r11, #-12]
     3fc:	e1a03001 	mov	r3, r1
     400:	e1a03103 	lsl	r3, r3, #2
     404:	e0833001 	add	r3, r3, r1
     408:	e1a03303 	lsl	r3, r3, #6
     40c:	e51b1008 	ldr	r1, [r11, #-8]
     410:	e0833001 	add	r3, r3, r1
     414:	e7820103 	str	r0, [r2, r3, lsl #2]
}
     418:	e28bd000 	add	sp, r11, #0
     41c:	e8bd0800 	ldmfd	sp!, {r11}
     420:	e12fff1e 	bx	lr

00000424 <update_canvas_camf>:

void update_canvas_camf(int x, int y, short int colour, int camf_colour) {
     424:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     428:	e28db000 	add	r11, sp, #0
     42c:	e24dd014 	sub	sp, sp, #20
     430:	e50b0008 	str	r0, [r11, #-8]
     434:	e50b100c 	str	r1, [r11, #-12]
     438:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     43c:	e14b20be 	strh	r2, [r11, #-14]
    if (camf_colour == -1)                   canvas[y][x] = colour;
     440:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     444:	e3730001 	cmn	r3, #1
     448:	1a00000b 	bne	47c <update_canvas_camf+0x58>
     44c:	e15b00fe 	ldrsh	r0, [r11, #-14]
     450:	e3042cd8 	movw	r2, #19672	; 0x4cd8
     454:	e3402000 	movt	r2, #0
     458:	e51b100c 	ldr	r1, [r11, #-12]
     45c:	e1a03001 	mov	r3, r1
     460:	e1a03103 	lsl	r3, r3, #2
     464:	e0833001 	add	r3, r3, r1
     468:	e1a03303 	lsl	r3, r3, #6
     46c:	e51b1008 	ldr	r1, [r11, #-8]
     470:	e0833001 	add	r3, r3, r1
     474:	e7820103 	str	r0, [r2, r3, lsl #2]
     478:	ea000017 	b	4dc <update_canvas_camf+0xb8>
    else if (canvas[y][x] != camf_colour)    canvas[y][x] = colour;
     47c:	e3042cd8 	movw	r2, #19672	; 0x4cd8
     480:	e3402000 	movt	r2, #0
     484:	e51b100c 	ldr	r1, [r11, #-12]
     488:	e1a03001 	mov	r3, r1
     48c:	e1a03103 	lsl	r3, r3, #2
     490:	e0833001 	add	r3, r3, r1
     494:	e1a03303 	lsl	r3, r3, #6
     498:	e51b1008 	ldr	r1, [r11, #-8]
     49c:	e0833001 	add	r3, r3, r1
     4a0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
     4a4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4a8:	e1520003 	cmp	r2, r3
     4ac:	0a00000a 	beq	4dc <update_canvas_camf+0xb8>
     4b0:	e15b00fe 	ldrsh	r0, [r11, #-14]
     4b4:	e3042cd8 	movw	r2, #19672	; 0x4cd8
     4b8:	e3402000 	movt	r2, #0
     4bc:	e51b100c 	ldr	r1, [r11, #-12]
     4c0:	e1a03001 	mov	r3, r1
     4c4:	e1a03103 	lsl	r3, r3, #2
     4c8:	e0833001 	add	r3, r3, r1
     4cc:	e1a03303 	lsl	r3, r3, #6
     4d0:	e51b1008 	ldr	r1, [r11, #-8]
     4d4:	e0833001 	add	r3, r3, r1
     4d8:	e7820103 	str	r0, [r2, r3, lsl #2]
}
     4dc:	e28bd000 	add	sp, r11, #0
     4e0:	e8bd0800 	ldmfd	sp!, {r11}
     4e4:	e12fff1e 	bx	lr

000004e8 <update_txt_canvas>:

void update_txt_canvas(int x, int y, const char* str_ptr) {
     4e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     4ec:	e28db000 	add	r11, sp, #0
     4f0:	e24dd01c 	sub	sp, sp, #28
     4f4:	e50b0010 	str	r0, [r11, #-16]
     4f8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
     4fc:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    int i = 0;
     500:	e3a03000 	mov	r3, #0
     504:	e50b3008 	str	r3, [r11, #-8]
    while (*str_ptr != '\0') {
     508:	ea000015 	b	564 <update_txt_canvas+0x7c>
        txt_canvas[y][x + i] = *str_ptr;
     50c:	e51b2010 	ldr	r2, [r11, #-16]
     510:	e51b3008 	ldr	r3, [r11, #-8]
     514:	e082c003 	add	r12, r2, r3
     518:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     51c:	e5d30000 	ldrb	r0, [r3]
     520:	e30a2cd8 	movw	r2, #44248	; 0xacd8
     524:	e3402009 	movt	r2, #9
     528:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     52c:	e1a03001 	mov	r3, r1
     530:	e1a03103 	lsl	r3, r3, #2
     534:	e0833001 	add	r3, r3, r1
     538:	e1a03203 	lsl	r3, r3, #4
     53c:	e083300c 	add	r3, r3, r12
     540:	e0823003 	add	r3, r2, r3
     544:	e1a02000 	mov	r2, r0
     548:	e5c32000 	strb	r2, [r3]
        i++;
     54c:	e51b3008 	ldr	r3, [r11, #-8]
     550:	e2833001 	add	r3, r3, #1
     554:	e50b3008 	str	r3, [r11, #-8]
        str_ptr++;
     558:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     55c:	e2833001 	add	r3, r3, #1
     560:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    else if (canvas[y][x] != camf_colour)    canvas[y][x] = colour;
}

void update_txt_canvas(int x, int y, const char* str_ptr) {
    int i = 0;
    while (*str_ptr != '\0') {
     564:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     568:	e5d33000 	ldrb	r3, [r3]
     56c:	e3530000 	cmp	r3, #0
     570:	1affffe5 	bne	50c <update_txt_canvas+0x24>
        txt_canvas[y][x + i] = *str_ptr;
        i++;
        str_ptr++;
    }
}
     574:	e28bd000 	add	sp, r11, #0
     578:	e8bd0800 	ldmfd	sp!, {r11}
     57c:	e12fff1e 	bx	lr

00000580 <clear_txt_canvas>:

void clear_txt_canvas() {
     580:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     584:	e28db000 	add	r11, sp, #0
     588:	e24dd00c 	sub	sp, sp, #12
    int x = 0;
     58c:	e3a03000 	mov	r3, #0
     590:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     594:	e3a03000 	mov	r3, #0
     598:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
     59c:	e3a03000 	mov	r3, #0
     5a0:	e50b3008 	str	r3, [r11, #-8]
     5a4:	ea000017 	b	608 <clear_txt_canvas+0x88>
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
     5a8:	e3a03000 	mov	r3, #0
     5ac:	e50b300c 	str	r3, [r11, #-12]
     5b0:	ea00000e 	b	5f0 <clear_txt_canvas+0x70>
            txt_canvas[y][x] = 0;
     5b4:	e30a2cd8 	movw	r2, #44248	; 0xacd8
     5b8:	e3402009 	movt	r2, #9
     5bc:	e51b100c 	ldr	r1, [r11, #-12]
     5c0:	e1a03001 	mov	r3, r1
     5c4:	e1a03103 	lsl	r3, r3, #2
     5c8:	e0833001 	add	r3, r3, r1
     5cc:	e1a03203 	lsl	r3, r3, #4
     5d0:	e51b1008 	ldr	r1, [r11, #-8]
     5d4:	e0833001 	add	r3, r3, r1
     5d8:	e0823003 	add	r3, r2, r3
     5dc:	e3a02000 	mov	r2, #0
     5e0:	e5c32000 	strb	r2, [r3]

void clear_txt_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
     5e4:	e51b300c 	ldr	r3, [r11, #-12]
     5e8:	e2833001 	add	r3, r3, #1
     5ec:	e50b300c 	str	r3, [r11, #-12]
     5f0:	e51b300c 	ldr	r3, [r11, #-12]
     5f4:	e353003b 	cmp	r3, #59	; 0x3b
     5f8:	daffffed 	ble	5b4 <clear_txt_canvas+0x34>
}

void clear_txt_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
     5fc:	e51b3008 	ldr	r3, [r11, #-8]
     600:	e2833001 	add	r3, r3, #1
     604:	e50b3008 	str	r3, [r11, #-8]
     608:	e51b3008 	ldr	r3, [r11, #-8]
     60c:	e353004f 	cmp	r3, #79	; 0x4f
     610:	daffffe4 	ble	5a8 <clear_txt_canvas+0x28>
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
            txt_canvas[y][x] = 0;
}
     614:	e28bd000 	add	sp, r11, #0
     618:	e8bd0800 	ldmfd	sp!, {r11}
     61c:	e12fff1e 	bx	lr

00000620 <draw_canvas>:

void draw_canvas() {
     620:	e92d4800 	push	{r11, lr}
     624:	e28db004 	add	r11, sp, #4
     628:	e24dd008 	sub	sp, sp, #8
    int x = 0;
     62c:	e3a03000 	mov	r3, #0
     630:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     634:	e3a03000 	mov	r3, #0
     638:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < CANVAS_XDIM; x++)
     63c:	e3a03000 	mov	r3, #0
     640:	e50b3008 	str	r3, [r11, #-8]
     644:	ea00001b 	b	6b8 <draw_canvas+0x98>
        for (y = 0; y < CANVAS_YDIM; y++)
     648:	e3a03000 	mov	r3, #0
     64c:	e50b300c 	str	r3, [r11, #-12]
     650:	ea000012 	b	6a0 <draw_canvas+0x80>
            plot_pixel(x, y, canvas[y][x]);
     654:	e3042cd8 	movw	r2, #19672	; 0x4cd8
     658:	e3402000 	movt	r2, #0
     65c:	e51b100c 	ldr	r1, [r11, #-12]
     660:	e1a03001 	mov	r3, r1
     664:	e1a03103 	lsl	r3, r3, #2
     668:	e0833001 	add	r3, r3, r1
     66c:	e1a03303 	lsl	r3, r3, #6
     670:	e51b1008 	ldr	r1, [r11, #-8]
     674:	e0833001 	add	r3, r3, r1
     678:	e7923103 	ldr	r3, [r2, r3, lsl #2]
     67c:	e6ff3073 	uxth	r3, r3
     680:	e6bf3073 	sxth	r3, r3
     684:	e51b0008 	ldr	r0, [r11, #-8]
     688:	e51b100c 	ldr	r1, [r11, #-12]
     68c:	e1a02003 	mov	r2, r3
     690:	eb00003f 	bl	794 <plot_pixel>

void draw_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < CANVAS_XDIM; x++)
        for (y = 0; y < CANVAS_YDIM; y++)
     694:	e51b300c 	ldr	r3, [r11, #-12]
     698:	e2833001 	add	r3, r3, #1
     69c:	e50b300c 	str	r3, [r11, #-12]
     6a0:	e51b300c 	ldr	r3, [r11, #-12]
     6a4:	e35300ef 	cmp	r3, #239	; 0xef
     6a8:	daffffe9 	ble	654 <draw_canvas+0x34>
}

void draw_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < CANVAS_XDIM; x++)
     6ac:	e51b3008 	ldr	r3, [r11, #-8]
     6b0:	e2833001 	add	r3, r3, #1
     6b4:	e50b3008 	str	r3, [r11, #-8]
     6b8:	e51b2008 	ldr	r2, [r11, #-8]
     6bc:	e300313f 	movw	r3, #319	; 0x13f
     6c0:	e1520003 	cmp	r2, r3
     6c4:	daffffdf 	ble	648 <draw_canvas+0x28>
        for (y = 0; y < CANVAS_YDIM; y++)
            plot_pixel(x, y, canvas[y][x]);
    wait_for_vsync();
     6c8:	eb000068 	bl	870 <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1);         // new back buffer
     6cc:	e3043870 	movw	r3, #18544	; 0x4870
     6d0:	e3403000 	movt	r3, #0
     6d4:	e5933000 	ldr	r3, [r3]
     6d8:	e5932004 	ldr	r2, [r3, #4]
     6dc:	e3043cd4 	movw	r3, #19668	; 0x4cd4
     6e0:	e3403000 	movt	r3, #0
     6e4:	e5832000 	str	r2, [r3]
}
     6e8:	e24bd004 	sub	sp, r11, #4
     6ec:	e8bd8800 	pop	{r11, pc}

000006f0 <draw_txt_canvas>:

void draw_txt_canvas() {
     6f0:	e92d4800 	push	{r11, lr}
     6f4:	e28db004 	add	r11, sp, #4
     6f8:	e24dd008 	sub	sp, sp, #8
    int x = 0;
     6fc:	e3a03000 	mov	r3, #0
     700:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     704:	e3a03000 	mov	r3, #0
     708:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
     70c:	e3a03000 	mov	r3, #0
     710:	e50b3008 	str	r3, [r11, #-8]
     714:	ea000019 	b	780 <draw_txt_canvas+0x90>
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
     718:	e3a03000 	mov	r3, #0
     71c:	e50b300c 	str	r3, [r11, #-12]
     720:	ea000010 	b	768 <draw_txt_canvas+0x78>
            plot_char(x, y, &txt_canvas[y][x]);
     724:	e51b200c 	ldr	r2, [r11, #-12]
     728:	e1a03002 	mov	r3, r2
     72c:	e1a03103 	lsl	r3, r3, #2
     730:	e0833002 	add	r3, r3, r2
     734:	e1a03203 	lsl	r3, r3, #4
     738:	e51b2008 	ldr	r2, [r11, #-8]
     73c:	e0832002 	add	r2, r3, r2
     740:	e30a3cd8 	movw	r3, #44248	; 0xacd8
     744:	e3403009 	movt	r3, #9
     748:	e0823003 	add	r3, r2, r3
     74c:	e51b0008 	ldr	r0, [r11, #-8]
     750:	e51b100c 	ldr	r1, [r11, #-12]
     754:	e1a02003 	mov	r2, r3
     758:	eb000022 	bl	7e8 <plot_char>

void draw_txt_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
     75c:	e51b300c 	ldr	r3, [r11, #-12]
     760:	e2833001 	add	r3, r3, #1
     764:	e50b300c 	str	r3, [r11, #-12]
     768:	e51b300c 	ldr	r3, [r11, #-12]
     76c:	e353003b 	cmp	r3, #59	; 0x3b
     770:	daffffeb 	ble	724 <draw_txt_canvas+0x34>
}

void draw_txt_canvas() {
    int x = 0;
    int y = 0;
    for (x = 0; x < TXT_CANVAS_XDIM; x++)
     774:	e51b3008 	ldr	r3, [r11, #-8]
     778:	e2833001 	add	r3, r3, #1
     77c:	e50b3008 	str	r3, [r11, #-8]
     780:	e51b3008 	ldr	r3, [r11, #-8]
     784:	e353004f 	cmp	r3, #79	; 0x4f
     788:	daffffe2 	ble	718 <draw_txt_canvas+0x28>
        for (y = 0; y < TXT_CANVAS_YDIM; y++)
            plot_char(x, y, &txt_canvas[y][x]);
}
     78c:	e24bd004 	sub	sp, r11, #4
     790:	e8bd8800 	pop	{r11, pc}

00000794 <plot_pixel>:

void plot_pixel(int x, int y, short int colour) {
     794:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     798:	e28db000 	add	r11, sp, #0
     79c:	e24dd014 	sub	sp, sp, #20
     7a0:	e50b0008 	str	r0, [r11, #-8]
     7a4:	e50b100c 	str	r1, [r11, #-12]
     7a8:	e1a03002 	mov	r3, r2
     7ac:	e14b30be 	strh	r3, [r11, #-14]
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = colour;
     7b0:	e51b300c 	ldr	r3, [r11, #-12]
     7b4:	e1a02503 	lsl	r2, r3, #10
     7b8:	e3043cd4 	movw	r3, #19668	; 0x4cd4
     7bc:	e3403000 	movt	r3, #0
     7c0:	e5933000 	ldr	r3, [r3]
     7c4:	e0822003 	add	r2, r2, r3
     7c8:	e51b3008 	ldr	r3, [r11, #-8]
     7cc:	e1a03083 	lsl	r3, r3, #1
     7d0:	e0823003 	add	r3, r2, r3
     7d4:	e15b20be 	ldrh	r2, [r11, #-14]
     7d8:	e1c320b0 	strh	r2, [r3]
}
     7dc:	e28bd000 	add	sp, r11, #0
     7e0:	e8bd0800 	ldmfd	sp!, {r11}
     7e4:	e12fff1e 	bx	lr

000007e8 <plot_char>:

void plot_char(int x, int y, char* text_ptr) {
     7e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     7ec:	e28db000 	add	r11, sp, #0
     7f0:	e24dd01c 	sub	sp, sp, #28
     7f4:	e50b0010 	str	r0, [r11, #-16]
     7f8:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
     7fc:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    // Assume that the text string fits on one line
    int offset = (y << 7) + x;
     800:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     804:	e1a02383 	lsl	r2, r3, #7
     808:	e51b3010 	ldr	r3, [r11, #-16]
     80c:	e0823003 	add	r3, r2, r3
     810:	e50b3008 	str	r3, [r11, #-8]
    while (*text_ptr != '\0') {
     814:	ea00000e 	b	854 <plot_char+0x6c>
        *(char_buffer_ptr + offset) = *(text_ptr);      // write to character buffer
     818:	e3043874 	movw	r3, #18548	; 0x4874
     81c:	e3403000 	movt	r3, #0
     820:	e5932000 	ldr	r2, [r3]
     824:	e51b3008 	ldr	r3, [r11, #-8]
     828:	e1a03103 	lsl	r3, r3, #2
     82c:	e0823003 	add	r3, r2, r3
     830:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     834:	e5d22000 	ldrb	r2, [r2]
     838:	e5832000 	str	r2, [r3]
        text_ptr++;
     83c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     840:	e2833001 	add	r3, r3, #1
     844:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        offset++;
     848:	e51b3008 	ldr	r3, [r11, #-8]
     84c:	e2833001 	add	r3, r3, #1
     850:	e50b3008 	str	r3, [r11, #-8]
}

void plot_char(int x, int y, char* text_ptr) {
    // Assume that the text string fits on one line
    int offset = (y << 7) + x;
    while (*text_ptr != '\0') {
     854:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     858:	e5d33000 	ldrb	r3, [r3]
     85c:	e3530000 	cmp	r3, #0
     860:	1affffec 	bne	818 <plot_char+0x30>
        *(char_buffer_ptr + offset) = *(text_ptr);      // write to character buffer
        text_ptr++;
        offset++;
    }
}
     864:	e28bd000 	add	sp, r11, #0
     868:	e8bd0800 	ldmfd	sp!, {r11}
     86c:	e12fff1e 	bx	lr

00000870 <wait_for_vsync>:

void wait_for_vsync() {
     870:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     874:	e28db000 	add	r11, sp, #0
     878:	e24dd00c 	sub	sp, sp, #12
    volatile int* pixel_status_reg_ptr = (int*)0xFF203020;
     87c:	e3033020 	movw	r3, #12320	; 0x3020
     880:	e34f3f20 	movt	r3, #65312	; 0xff20
     884:	e50b300c 	str	r3, [r11, #-12]
    int status;
    *pixel_status_reg_ptr = 1;              // start the synchronization process
     888:	e51b300c 	ldr	r3, [r11, #-12]
     88c:	e3a02001 	mov	r2, #1
     890:	e5832000 	str	r2, [r3]
    status = *(pixel_status_reg_ptr + 3);   // get status register
     894:	e51b300c 	ldr	r3, [r11, #-12]
     898:	e593300c 	ldr	r3, [r3, #12]
     89c:	e50b3008 	str	r3, [r11, #-8]
    while ((status & 0x01) != 0)            status = *(pixel_status_reg_ptr + 3);
     8a0:	ea000002 	b	8b0 <wait_for_vsync+0x40>
     8a4:	e51b300c 	ldr	r3, [r11, #-12]
     8a8:	e593300c 	ldr	r3, [r3, #12]
     8ac:	e50b3008 	str	r3, [r11, #-8]
     8b0:	e51b3008 	ldr	r3, [r11, #-8]
     8b4:	e2033001 	and	r3, r3, #1
     8b8:	e3530000 	cmp	r3, #0
     8bc:	1afffff8 	bne	8a4 <wait_for_vsync+0x34>
}
     8c0:	e28bd000 	add	sp, r11, #0
     8c4:	e8bd0800 	ldmfd	sp!, {r11}
     8c8:	e12fff1e 	bx	lr

000008cc <fill_canvas>:



// B. Fill Objects
void fill_canvas(int colour) {
     8cc:	e92d4800 	push	{r11, lr}
     8d0:	e28db004 	add	r11, sp, #4
     8d4:	e24dd010 	sub	sp, sp, #16
     8d8:	e50b0010 	str	r0, [r11, #-16]
    int x = 0;
     8dc:	e3a03000 	mov	r3, #0
     8e0:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     8e4:	e3a03000 	mov	r3, #0
     8e8:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < 320; x++)
     8ec:	e3a03000 	mov	r3, #0
     8f0:	e50b3008 	str	r3, [r11, #-8]
     8f4:	ea000012 	b	944 <fill_canvas+0x78>
        for (y = 0; y < 240; y++)
     8f8:	e3a03000 	mov	r3, #0
     8fc:	e50b300c 	str	r3, [r11, #-12]
     900:	ea000009 	b	92c <fill_canvas+0x60>
            update_canvas(x, y, colour);
     904:	e51b3010 	ldr	r3, [r11, #-16]
     908:	e6ff3073 	uxth	r3, r3
     90c:	e6bf3073 	sxth	r3, r3
     910:	e51b0008 	ldr	r0, [r11, #-8]
     914:	e51b100c 	ldr	r1, [r11, #-12]
     918:	e1a02003 	mov	r2, r3
     91c:	ebfffeab 	bl	3d0 <update_canvas>
// B. Fill Objects
void fill_canvas(int colour) {
    int x = 0;
    int y = 0;
    for (x = 0; x < 320; x++)
        for (y = 0; y < 240; y++)
     920:	e51b300c 	ldr	r3, [r11, #-12]
     924:	e2833001 	add	r3, r3, #1
     928:	e50b300c 	str	r3, [r11, #-12]
     92c:	e51b300c 	ldr	r3, [r11, #-12]
     930:	e35300ef 	cmp	r3, #239	; 0xef
     934:	dafffff2 	ble	904 <fill_canvas+0x38>

// B. Fill Objects
void fill_canvas(int colour) {
    int x = 0;
    int y = 0;
    for (x = 0; x < 320; x++)
     938:	e51b3008 	ldr	r3, [r11, #-8]
     93c:	e2833001 	add	r3, r3, #1
     940:	e50b3008 	str	r3, [r11, #-8]
     944:	e51b2008 	ldr	r2, [r11, #-8]
     948:	e300313f 	movw	r3, #319	; 0x13f
     94c:	e1520003 	cmp	r2, r3
     950:	daffffe8 	ble	8f8 <fill_canvas+0x2c>
        for (y = 0; y < 240; y++)
            update_canvas(x, y, colour);
}
     954:	e24bd004 	sub	sp, r11, #4
     958:	e8bd8800 	pop	{r11, pc}

0000095c <fill_midpoint_circle>:

void fill_midpoint_circle(int x_center,
                          int y_center,
                          int radius,
                          int fill_colour,
                          int camf_colour) {
     95c:	e92d4800 	push	{r11, lr}
     960:	e28db004 	add	r11, sp, #4
     964:	e24dd030 	sub	sp, sp, #48	; 0x30
     968:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     96c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
     970:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
     974:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int x = radius;
     978:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     97c:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     980:	e3a03000 	mov	r3, #0
     984:	e50b300c 	str	r3, [r11, #-12]
    int err = 0;
     988:	e3a03000 	mov	r3, #0
     98c:	e50b3010 	str	r3, [r11, #-16]
    // Fill circle
    while (x >= y) {
     990:	ea000063 	b	b24 <fill_midpoint_circle+0x1c8>
        draw_line(x_center + x, y_center + y, x_center + x, y_center - y, 1, fill_colour, camf_colour);
     994:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     998:	e51b3008 	ldr	r3, [r11, #-8]
     99c:	e0820003 	add	r0, r2, r3
     9a0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     9a4:	e51b300c 	ldr	r3, [r11, #-12]
     9a8:	e0821003 	add	r1, r2, r3
     9ac:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9b0:	e51b3008 	ldr	r3, [r11, #-8]
     9b4:	e0822003 	add	r2, r2, r3
     9b8:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
     9bc:	e51b300c 	ldr	r3, [r11, #-12]
     9c0:	e063300c 	rsb	r3, r3, r12
     9c4:	e3a0c001 	mov	r12, #1
     9c8:	e58dc000 	str	r12, [sp]
     9cc:	e51bc024 	ldr	r12, [r11, #-36]	; 0xffffffdc
     9d0:	e58dc004 	str	r12, [sp, #4]
     9d4:	e59bc004 	ldr	r12, [r11, #4]
     9d8:	e58dc008 	str	r12, [sp, #8]
     9dc:	eb000182 	bl	fec <draw_line>
        draw_line(x_center - x, y_center + y, x_center - x, y_center - y, 1, fill_colour, camf_colour);
     9e0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9e4:	e51b3008 	ldr	r3, [r11, #-8]
     9e8:	e0630002 	rsb	r0, r3, r2
     9ec:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     9f0:	e51b300c 	ldr	r3, [r11, #-12]
     9f4:	e0821003 	add	r1, r2, r3
     9f8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9fc:	e51b3008 	ldr	r3, [r11, #-8]
     a00:	e0632002 	rsb	r2, r3, r2
     a04:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
     a08:	e51b300c 	ldr	r3, [r11, #-12]
     a0c:	e063300c 	rsb	r3, r3, r12
     a10:	e3a0c001 	mov	r12, #1
     a14:	e58dc000 	str	r12, [sp]
     a18:	e51bc024 	ldr	r12, [r11, #-36]	; 0xffffffdc
     a1c:	e58dc004 	str	r12, [sp, #4]
     a20:	e59bc004 	ldr	r12, [r11, #4]
     a24:	e58dc008 	str	r12, [sp, #8]
     a28:	eb00016f 	bl	fec <draw_line>
        draw_line(x_center + y, y_center + x, x_center + y, y_center - x, 1, fill_colour, camf_colour);
     a2c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     a30:	e51b300c 	ldr	r3, [r11, #-12]
     a34:	e0820003 	add	r0, r2, r3
     a38:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     a3c:	e51b3008 	ldr	r3, [r11, #-8]
     a40:	e0821003 	add	r1, r2, r3
     a44:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     a48:	e51b300c 	ldr	r3, [r11, #-12]
     a4c:	e0822003 	add	r2, r2, r3
     a50:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
     a54:	e51b3008 	ldr	r3, [r11, #-8]
     a58:	e063300c 	rsb	r3, r3, r12
     a5c:	e3a0c001 	mov	r12, #1
     a60:	e58dc000 	str	r12, [sp]
     a64:	e51bc024 	ldr	r12, [r11, #-36]	; 0xffffffdc
     a68:	e58dc004 	str	r12, [sp, #4]
     a6c:	e59bc004 	ldr	r12, [r11, #4]
     a70:	e58dc008 	str	r12, [sp, #8]
     a74:	eb00015c 	bl	fec <draw_line>
        draw_line(x_center - y, y_center + x, x_center - y, y_center - x, 1, fill_colour, camf_colour);
     a78:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     a7c:	e51b300c 	ldr	r3, [r11, #-12]
     a80:	e0630002 	rsb	r0, r3, r2
     a84:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     a88:	e51b3008 	ldr	r3, [r11, #-8]
     a8c:	e0821003 	add	r1, r2, r3
     a90:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     a94:	e51b300c 	ldr	r3, [r11, #-12]
     a98:	e0632002 	rsb	r2, r3, r2
     a9c:	e51bc01c 	ldr	r12, [r11, #-28]	; 0xffffffe4
     aa0:	e51b3008 	ldr	r3, [r11, #-8]
     aa4:	e063300c 	rsb	r3, r3, r12
     aa8:	e3a0c001 	mov	r12, #1
     aac:	e58dc000 	str	r12, [sp]
     ab0:	e51bc024 	ldr	r12, [r11, #-36]	; 0xffffffdc
     ab4:	e58dc004 	str	r12, [sp, #4]
     ab8:	e59bc004 	ldr	r12, [r11, #4]
     abc:	e58dc008 	str	r12, [sp, #8]
     ac0:	eb000149 	bl	fec <draw_line>
        if (err <= 0) {
     ac4:	e51b3010 	ldr	r3, [r11, #-16]
     ac8:	e3530000 	cmp	r3, #0
     acc:	ca000008 	bgt	af4 <fill_midpoint_circle+0x198>
            y += 1;
     ad0:	e51b300c 	ldr	r3, [r11, #-12]
     ad4:	e2833001 	add	r3, r3, #1
     ad8:	e50b300c 	str	r3, [r11, #-12]
            err += 2 * y + 1;
     adc:	e51b300c 	ldr	r3, [r11, #-12]
     ae0:	e1a03083 	lsl	r3, r3, #1
     ae4:	e2833001 	add	r3, r3, #1
     ae8:	e51b2010 	ldr	r2, [r11, #-16]
     aec:	e0823003 	add	r3, r2, r3
     af0:	e50b3010 	str	r3, [r11, #-16]
        }
        if (err > 0) {
     af4:	e51b3010 	ldr	r3, [r11, #-16]
     af8:	e3530000 	cmp	r3, #0
     afc:	da000008 	ble	b24 <fill_midpoint_circle+0x1c8>
            x -= 1;
     b00:	e51b3008 	ldr	r3, [r11, #-8]
     b04:	e2433001 	sub	r3, r3, #1
     b08:	e50b3008 	str	r3, [r11, #-8]
            err -= 2 * x + 1;
     b0c:	e51b3008 	ldr	r3, [r11, #-8]
     b10:	e1a03083 	lsl	r3, r3, #1
     b14:	e1e03003 	mvn	r3, r3
     b18:	e51b2010 	ldr	r2, [r11, #-16]
     b1c:	e0823003 	add	r3, r2, r3
     b20:	e50b3010 	str	r3, [r11, #-16]
                          int camf_colour) {
    int x = radius;
    int y = 0;
    int err = 0;
    // Fill circle
    while (x >= y) {
     b24:	e51b2008 	ldr	r2, [r11, #-8]
     b28:	e51b300c 	ldr	r3, [r11, #-12]
     b2c:	e1520003 	cmp	r2, r3
     b30:	aaffff97 	bge	994 <fill_midpoint_circle+0x38>
        if (err > 0) {
            x -= 1;
            err -= 2 * x + 1;
        }
    }
}
     b34:	e24bd004 	sub	sp, r11, #4
     b38:	e8bd8800 	pop	{r11, pc}

00000b3c <draw_background>:



// C. Draw Objects
void draw_background(bool is_on_boot) {
     b3c:	e92d4800 	push	{r11, lr}
     b40:	e28db004 	add	r11, sp, #4
     b44:	e24dd050 	sub	sp, sp, #80	; 0x50
     b48:	e1a03000 	mov	r3, r0
     b4c:	e54b303d 	strb	r3, [r11, #-61]	; 0xffffffc3
    // 1) Draw text
    clear_txt_canvas();
     b50:	ebfffe8a 	bl	580 <clear_txt_canvas>
    //    1.1) Draw title
    char title_txt[21];
    strncpy(title_txt, TITLE_TXT, 21);
     b54:	e24b3024 	sub	r3, r11, #36	; 0x24
     b58:	e1a00003 	mov	r0, r3
     b5c:	e3041760 	movw	r1, #18272	; 0x4760
     b60:	e3401000 	movt	r1, #0
     b64:	e3a02015 	mov	r2, #21
     b68:	eb000d0f 	bl	3fac <strncpy>
    update_txt_canvas(0, 0, title_txt);
     b6c:	e24b3024 	sub	r3, r11, #36	; 0x24
     b70:	e3a00000 	mov	r0, #0
     b74:	e3a01000 	mov	r1, #0
     b78:	e1a02003 	mov	r2, r3
     b7c:	ebfffe59 	bl	4e8 <update_txt_canvas>
    //    1.2) Draw info and score
    char info_txt[21];
    if (is_on_boot) strncpy(info_txt, INFO_TXT[4], 21);
     b80:	e55b303d 	ldrb	r3, [r11, #-61]	; 0xffffffc3
     b84:	e3530000 	cmp	r3, #0
     b88:	0a000005 	beq	ba4 <draw_background+0x68>
     b8c:	e24b303c 	sub	r3, r11, #60	; 0x3c
     b90:	e1a00003 	mov	r0, r3
     b94:	e59f144c 	ldr	r1, [pc, #1100]	; fe8 <draw_background+0x4ac>
     b98:	e3a02015 	mov	r2, #21
     b9c:	eb000d02 	bl	3fac <strncpy>
     ba0:	ea00004d 	b	cdc <draw_background+0x1a0>
    else {
        strncpy(info_txt, INFO_TXT[0], 21);
     ba4:	e24b303c 	sub	r3, r11, #60	; 0x3c
     ba8:	e1a00003 	mov	r0, r3
     bac:	e3041778 	movw	r1, #18296	; 0x4778
     bb0:	e3401000 	movt	r1, #0
     bb4:	e3a02015 	mov	r2, #21
     bb8:	eb000cfb 	bl	3fac <strncpy>
        //         1.2.1) turn
        if (is_player1_turn)
     bbc:	e30c300d 	movw	r3, #49165	; 0xc00d
     bc0:	e3403009 	movt	r3, #9
     bc4:	e5d33000 	ldrb	r3, [r3]
     bc8:	e3530000 	cmp	r3, #0
     bcc:	0a000002 	beq	bdc <draw_background+0xa0>
            info_txt[3] = '1';
     bd0:	e3a03031 	mov	r3, #49	; 0x31
     bd4:	e54b3039 	strb	r3, [r11, #-57]	; 0xffffffc7
     bd8:	ea000001 	b	be4 <draw_background+0xa8>
        else
            info_txt[3] = '2';
     bdc:	e3a03032 	mov	r3, #50	; 0x32
     be0:	e54b3039 	strb	r3, [r11, #-57]	; 0xffffffc7
        //         1.2.2) score
        info_txt[11] = SCORE[player1_score / 10];
     be4:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
     be8:	e3403009 	movt	r3, #9
     bec:	e5932000 	ldr	r2, [r3]
     bf0:	e3063667 	movw	r3, #26215	; 0x6667
     bf4:	e3463666 	movt	r3, #26214	; 0x6666
     bf8:	e0c31293 	smull	r1, r3, r3, r2
     bfc:	e1a01143 	asr	r1, r3, #2
     c00:	e1a03fc2 	asr	r3, r2, #31
     c04:	e0632001 	rsb	r2, r3, r1
     c08:	e30437e4 	movw	r3, #18404	; 0x47e4
     c0c:	e3403000 	movt	r3, #0
     c10:	e7d33002 	ldrb	r3, [r3, r2]
     c14:	e54b3031 	strb	r3, [r11, #-49]	; 0xffffffcf
        info_txt[12] = SCORE[player1_score % 10];
     c18:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
     c1c:	e3403009 	movt	r3, #9
     c20:	e5931000 	ldr	r1, [r3]
     c24:	e3063667 	movw	r3, #26215	; 0x6667
     c28:	e3463666 	movt	r3, #26214	; 0x6666
     c2c:	e0c32193 	smull	r2, r3, r3, r1
     c30:	e1a02143 	asr	r2, r3, #2
     c34:	e1a03fc1 	asr	r3, r1, #31
     c38:	e0632002 	rsb	r2, r3, r2
     c3c:	e1a03002 	mov	r3, r2
     c40:	e1a03103 	lsl	r3, r3, #2
     c44:	e0833002 	add	r3, r3, r2
     c48:	e1a03083 	lsl	r3, r3, #1
     c4c:	e0632001 	rsb	r2, r3, r1
     c50:	e30437e4 	movw	r3, #18404	; 0x47e4
     c54:	e3403000 	movt	r3, #0
     c58:	e7d33002 	ldrb	r3, [r3, r2]
     c5c:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
        info_txt[17] = SCORE[player2_score / 10];
     c60:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
     c64:	e3403009 	movt	r3, #9
     c68:	e5932000 	ldr	r2, [r3]
     c6c:	e3063667 	movw	r3, #26215	; 0x6667
     c70:	e3463666 	movt	r3, #26214	; 0x6666
     c74:	e0c31293 	smull	r1, r3, r3, r2
     c78:	e1a01143 	asr	r1, r3, #2
     c7c:	e1a03fc2 	asr	r3, r2, #31
     c80:	e0632001 	rsb	r2, r3, r1
     c84:	e30437e4 	movw	r3, #18404	; 0x47e4
     c88:	e3403000 	movt	r3, #0
     c8c:	e7d33002 	ldrb	r3, [r3, r2]
     c90:	e54b302b 	strb	r3, [r11, #-43]	; 0xffffffd5
        info_txt[18] = SCORE[player2_score % 10];
     c94:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
     c98:	e3403009 	movt	r3, #9
     c9c:	e5931000 	ldr	r1, [r3]
     ca0:	e3063667 	movw	r3, #26215	; 0x6667
     ca4:	e3463666 	movt	r3, #26214	; 0x6666
     ca8:	e0c32193 	smull	r2, r3, r3, r1
     cac:	e1a02143 	asr	r2, r3, #2
     cb0:	e1a03fc1 	asr	r3, r1, #31
     cb4:	e0632002 	rsb	r2, r3, r2
     cb8:	e1a03002 	mov	r3, r2
     cbc:	e1a03103 	lsl	r3, r3, #2
     cc0:	e0833002 	add	r3, r3, r2
     cc4:	e1a03083 	lsl	r3, r3, #1
     cc8:	e0632001 	rsb	r2, r3, r1
     ccc:	e30437e4 	movw	r3, #18404	; 0x47e4
     cd0:	e3403000 	movt	r3, #0
     cd4:	e7d33002 	ldrb	r3, [r3, r2]
     cd8:	e54b302a 	strb	r3, [r11, #-42]	; 0xffffffd6
    }
    update_txt_canvas(0, 1, info_txt);
     cdc:	e24b303c 	sub	r3, r11, #60	; 0x3c
     ce0:	e3a00000 	mov	r0, #0
     ce4:	e3a01001 	mov	r1, #1
     ce8:	e1a02003 	mov	r2, r3
     cec:	ebfffdfd 	bl	4e8 <update_txt_canvas>
    draw_txt_canvas();
     cf0:	ebfffe7e 	bl	6f0 <draw_txt_canvas>
    // 2) Draw title line
    draw_line(TITLE_LINE_LOC[0][0],
     cf4:	e3043738 	movw	r3, #18232	; 0x4738
     cf8:	e3403000 	movt	r3, #0
     cfc:	e5930000 	ldr	r0, [r3]
     d00:	e3043738 	movw	r3, #18232	; 0x4738
     d04:	e3403000 	movt	r3, #0
     d08:	e5931004 	ldr	r1, [r3, #4]
     d0c:	e3043738 	movw	r3, #18232	; 0x4738
     d10:	e3403000 	movt	r3, #0
     d14:	e5932008 	ldr	r2, [r3, #8]
     d18:	e3043738 	movw	r3, #18232	; 0x4738
     d1c:	e3403000 	movt	r3, #0
     d20:	e593c00c 	ldr	r12, [r3, #12]
     d24:	e3043748 	movw	r3, #18248	; 0x4748
     d28:	e3403000 	movt	r3, #0
     d2c:	e5933000 	ldr	r3, [r3]
     d30:	e3a0e001 	mov	lr, #1
     d34:	e58de000 	str	lr, [sp]
     d38:	e58d3004 	str	r3, [sp, #4]
     d3c:	e3e03000 	mvn	r3, #0
     d40:	e58d3008 	str	r3, [sp, #8]
     d44:	e1a0300c 	mov	r3, r12
     d48:	eb0000a7 	bl	fec <draw_line>
              TITLE_LINE_LOC[1][1],
              1,
              TITLE_LINE_COLOUR,
              -1);
    // 3) Draw board rectangle
    draw_rec(BOARD_REC_LOC[0][0],
     d4c:	e3043458 	movw	r3, #17496	; 0x4458
     d50:	e3403000 	movt	r3, #0
     d54:	e5930000 	ldr	r0, [r3]
     d58:	e3043458 	movw	r3, #17496	; 0x4458
     d5c:	e3403000 	movt	r3, #0
     d60:	e5931004 	ldr	r1, [r3, #4]
     d64:	e3043458 	movw	r3, #17496	; 0x4458
     d68:	e3403000 	movt	r3, #0
     d6c:	e5932008 	ldr	r2, [r3, #8]
     d70:	e3043458 	movw	r3, #17496	; 0x4458
     d74:	e3403000 	movt	r3, #0
     d78:	e593300c 	ldr	r3, [r3, #12]
     d7c:	e300c2df 	movw	r12, #735	; 0x2df
     d80:	e58dc000 	str	r12, [sp]
     d84:	e3a0c001 	mov	r12, #1
     d88:	e58dc004 	str	r12, [sp, #4]
     d8c:	e300c2df 	movw	r12, #735	; 0x2df
     d90:	e58dc008 	str	r12, [sp, #8]
     d94:	eb000196 	bl	13f4 <draw_rec>
             BOARD_REC_LOC[1][1],
             BOARD_COLOUR,
             1,
             BOARD_COLOUR);
    // 4) Draw chips / holes
    int x = 0;
     d98:	e3a03000 	mov	r3, #0
     d9c:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
     da0:	e3a03000 	mov	r3, #0
     da4:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < CHIP_COL_NUM; x++) {
     da8:	e3a03000 	mov	r3, #0
     dac:	e50b3008 	str	r3, [r11, #-8]
     db0:	ea000087 	b	fd4 <draw_background+0x498>
        for (y = 0; y < CHIP_ROW_NUM; y++) {
     db4:	e3a03000 	mov	r3, #0
     db8:	e50b300c 	str	r3, [r11, #-12]
     dbc:	ea00007e 	b	fbc <draw_background+0x480>
            fill_midpoint_circle(BOARD_HOLE_LOC[y][x][0],
     dc0:	e3042468 	movw	r2, #17512	; 0x4468
     dc4:	e3402000 	movt	r2, #0
     dc8:	e51b100c 	ldr	r1, [r11, #-12]
     dcc:	e1a03001 	mov	r3, r1
     dd0:	e1a03103 	lsl	r3, r3, #2
     dd4:	e0833001 	add	r3, r3, r1
     dd8:	e1a03083 	lsl	r3, r3, #1
     ddc:	e0833001 	add	r3, r3, r1
     de0:	e51b1008 	ldr	r1, [r11, #-8]
     de4:	e0833001 	add	r3, r3, r1
     de8:	e7920183 	ldr	r0, [r2, r3, lsl #3]
     dec:	e3042468 	movw	r2, #17512	; 0x4468
     df0:	e3402000 	movt	r2, #0
     df4:	e51b100c 	ldr	r1, [r11, #-12]
     df8:	e1a03001 	mov	r3, r1
     dfc:	e1a03103 	lsl	r3, r3, #2
     e00:	e0833001 	add	r3, r3, r1
     e04:	e1a03083 	lsl	r3, r3, #1
     e08:	e0833001 	add	r3, r3, r1
     e0c:	e51b1008 	ldr	r1, [r11, #-8]
     e10:	e0831001 	add	r1, r3, r1
     e14:	e3a03004 	mov	r3, #4
     e18:	e1a01181 	lsl	r1, r1, #3
     e1c:	e0822001 	add	r2, r2, r1
     e20:	e0823003 	add	r3, r2, r3
     e24:	e5932000 	ldr	r2, [r3]
     e28:	e30436d0 	movw	r3, #18128	; 0x46d0
     e2c:	e3403000 	movt	r3, #0
     e30:	e5933000 	ldr	r3, [r3]
     e34:	e3e01000 	mvn	r1, #0
     e38:	e58d1000 	str	r1, [sp]
     e3c:	e1a01002 	mov	r1, r2
     e40:	e1a02003 	mov	r2, r3
     e44:	e3a03000 	mov	r3, #0
     e48:	ebfffec3 	bl	95c <fill_midpoint_circle>
                                 BOARD_HOLE_LOC[y][x][1],
                                 BOARD_HOLE_RADIUS,
                                 BOARD_HOLE_COLOUR,
                                 -1);
            switch (game_chip_matrix[y][x]) {
     e4c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
     e50:	e3402009 	movt	r2, #9
     e54:	e51b100c 	ldr	r1, [r11, #-12]
     e58:	e1a03001 	mov	r3, r1
     e5c:	e1a03103 	lsl	r3, r3, #2
     e60:	e0833001 	add	r3, r3, r1
     e64:	e1a03083 	lsl	r3, r3, #1
     e68:	e0833001 	add	r3, r3, r1
     e6c:	e51b1008 	ldr	r1, [r11, #-8]
     e70:	e0833001 	add	r3, r3, r1
     e74:	e0823003 	add	r3, r2, r3
     e78:	e5d33000 	ldrb	r3, [r3]
     e7c:	e3530001 	cmp	r3, #1
     e80:	0a000002 	beq	e90 <draw_background+0x354>
     e84:	e3530002 	cmp	r3, #2
     e88:	0a000024 	beq	f20 <draw_background+0x3e4>
     e8c:	ea000047 	b	fb0 <draw_background+0x474>
                case 1 :                        // player 1 chip
                    fill_midpoint_circle(BOARD_HOLE_LOC[y][x][0],
     e90:	e3042468 	movw	r2, #17512	; 0x4468
     e94:	e3402000 	movt	r2, #0
     e98:	e51b100c 	ldr	r1, [r11, #-12]
     e9c:	e1a03001 	mov	r3, r1
     ea0:	e1a03103 	lsl	r3, r3, #2
     ea4:	e0833001 	add	r3, r3, r1
     ea8:	e1a03083 	lsl	r3, r3, #1
     eac:	e0833001 	add	r3, r3, r1
     eb0:	e51b1008 	ldr	r1, [r11, #-8]
     eb4:	e0833001 	add	r3, r3, r1
     eb8:	e7920183 	ldr	r0, [r2, r3, lsl #3]
     ebc:	e3042468 	movw	r2, #17512	; 0x4468
     ec0:	e3402000 	movt	r2, #0
     ec4:	e51b100c 	ldr	r1, [r11, #-12]
     ec8:	e1a03001 	mov	r3, r1
     ecc:	e1a03103 	lsl	r3, r3, #2
     ed0:	e0833001 	add	r3, r3, r1
     ed4:	e1a03083 	lsl	r3, r3, #1
     ed8:	e0833001 	add	r3, r3, r1
     edc:	e51b1008 	ldr	r1, [r11, #-8]
     ee0:	e0831001 	add	r1, r3, r1
     ee4:	e3a03004 	mov	r3, #4
     ee8:	e1a01181 	lsl	r1, r1, #3
     eec:	e0822001 	add	r2, r2, r1
     ef0:	e0823003 	add	r3, r2, r3
     ef4:	e5932000 	ldr	r2, [r3]
     ef8:	e304372c 	movw	r3, #18220	; 0x472c
     efc:	e3403000 	movt	r3, #0
     f00:	e5933000 	ldr	r3, [r3]
     f04:	e30012df 	movw	r1, #735	; 0x2df
     f08:	e58d1000 	str	r1, [sp]
     f0c:	e1a01002 	mov	r1, r2
     f10:	e1a02003 	mov	r2, r3
     f14:	e3a03b3e 	mov	r3, #63488	; 0xf800
     f18:	ebfffe8f 	bl	95c <fill_midpoint_circle>
                                         BOARD_HOLE_LOC[y][x][1],
                                         CHIP_RADIUS,
                                         CHIP1_COLOUR,
                                         BOARD_COLOUR);
                    break;
     f1c:	ea000023 	b	fb0 <draw_background+0x474>
                case 2 :                        // player 2 chip

                    fill_midpoint_circle(BOARD_HOLE_LOC[y][x][0],
     f20:	e3042468 	movw	r2, #17512	; 0x4468
     f24:	e3402000 	movt	r2, #0
     f28:	e51b100c 	ldr	r1, [r11, #-12]
     f2c:	e1a03001 	mov	r3, r1
     f30:	e1a03103 	lsl	r3, r3, #2
     f34:	e0833001 	add	r3, r3, r1
     f38:	e1a03083 	lsl	r3, r3, #1
     f3c:	e0833001 	add	r3, r3, r1
     f40:	e51b1008 	ldr	r1, [r11, #-8]
     f44:	e0833001 	add	r3, r3, r1
     f48:	e7920183 	ldr	r0, [r2, r3, lsl #3]
     f4c:	e3042468 	movw	r2, #17512	; 0x4468
     f50:	e3402000 	movt	r2, #0
     f54:	e51b100c 	ldr	r1, [r11, #-12]
     f58:	e1a03001 	mov	r3, r1
     f5c:	e1a03103 	lsl	r3, r3, #2
     f60:	e0833001 	add	r3, r3, r1
     f64:	e1a03083 	lsl	r3, r3, #1
     f68:	e0833001 	add	r3, r3, r1
     f6c:	e51b1008 	ldr	r1, [r11, #-8]
     f70:	e0831001 	add	r1, r3, r1
     f74:	e3a03004 	mov	r3, #4
     f78:	e1a01181 	lsl	r1, r1, #3
     f7c:	e0822001 	add	r2, r2, r1
     f80:	e0823003 	add	r3, r2, r3
     f84:	e5932000 	ldr	r2, [r3]
     f88:	e304372c 	movw	r3, #18220	; 0x472c
     f8c:	e3403000 	movt	r3, #0
     f90:	e5933000 	ldr	r3, [r3]
     f94:	e30012df 	movw	r1, #735	; 0x2df
     f98:	e58d1000 	str	r1, [sp]
     f9c:	e1a01002 	mov	r1, r2
     fa0:	e1a02003 	mov	r2, r3
     fa4:	e30f3780 	movw	r3, #63360	; 0xf780
     fa8:	ebfffe6b 	bl	95c <fill_midpoint_circle>
                                         BOARD_HOLE_LOC[y][x][1],
                                         CHIP_RADIUS,
                                         CHIP2_COLOUR,
                                         BOARD_COLOUR);
                    break;
     fac:	e1a00000 	nop			; (mov r0, r0)
             BOARD_COLOUR);
    // 4) Draw chips / holes
    int x = 0;
    int y = 0;
    for (x = 0; x < CHIP_COL_NUM; x++) {
        for (y = 0; y < CHIP_ROW_NUM; y++) {
     fb0:	e51b300c 	ldr	r3, [r11, #-12]
     fb4:	e2833001 	add	r3, r3, #1
     fb8:	e50b300c 	str	r3, [r11, #-12]
     fbc:	e51b300c 	ldr	r3, [r11, #-12]
     fc0:	e3530006 	cmp	r3, #6
     fc4:	daffff7d 	ble	dc0 <draw_background+0x284>
             1,
             BOARD_COLOUR);
    // 4) Draw chips / holes
    int x = 0;
    int y = 0;
    for (x = 0; x < CHIP_COL_NUM; x++) {
     fc8:	e51b3008 	ldr	r3, [r11, #-8]
     fcc:	e2833001 	add	r3, r3, #1
     fd0:	e50b3008 	str	r3, [r11, #-8]
     fd4:	e51b3008 	ldr	r3, [r11, #-8]
     fd8:	e353000a 	cmp	r3, #10
     fdc:	daffff74 	ble	db4 <draw_background+0x278>
                                         BOARD_COLOUR);
                    break;
            }
        }
    }
}
     fe0:	e24bd004 	sub	sp, r11, #4
     fe4:	e8bd8800 	pop	{r11, pc}
     fe8:	000047cc 	.word	0x000047cc

00000fec <draw_line>:

void draw_line(int x0, int y0, int x1, int y1, int line_width, int colour, int camf_colour) {
     fec:	e92d4800 	push	{r11, lr}
     ff0:	e28db004 	add	r11, sp, #4
     ff4:	e24dd040 	sub	sp, sp, #64	; 0x40
     ff8:	e50b0038 	str	r0, [r11, #-56]	; 0xffffffc8
     ffc:	e50b103c 	str	r1, [r11, #-60]	; 0xffffffc4
    1000:	e50b2040 	str	r2, [r11, #-64]	; 0xffffffc0
    1004:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
    1008:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    100c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1010:	e0633002 	rsb	r3, r3, r2
    1014:	e0232fc3 	eor	r2, r3, r3, asr #31
    1018:	e0422fc3 	sub	r2, r2, r3, asr #31
    101c:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
    1020:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1024:	e0633001 	rsb	r3, r3, r1
    1028:	e3530000 	cmp	r3, #0
    102c:	b2633000 	rsblt	r3, r3, #0
    1030:	e1520003 	cmp	r2, r3
    1034:	d3a03000 	movle	r3, #0
    1038:	c3a03001 	movgt	r3, #1
    103c:	e54b3019 	strb	r3, [r11, #-25]	; 0xffffffe7
    int temp = 0;
    1040:	e3a03000 	mov	r3, #0
    1044:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int i = 0;
    1048:	e3a03000 	mov	r3, #0
    104c:	e50b3008 	str	r3, [r11, #-8]
    // if slope is greater than 1, set pivot to y instead of x
    if (is_steep) {
    1050:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
    1054:	e3530000 	cmp	r3, #0
    1058:	0a00000b 	beq	108c <draw_line+0xa0>
        // swap x0, y0
        temp = x0;
    105c:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    1060:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        x0 = y0;
    1064:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1068:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
        y0 = temp;
    106c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1070:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
        // swap x1, y1
        temp = x1;
    1074:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1078:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        x1 = y1;
    107c:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    1080:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
        y1 = temp;
    1084:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1088:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    }
    // start at the lowest pivot position with x0
    if (x0 > x1) {
    108c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
    1090:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    1094:	e1520003 	cmp	r2, r3
    1098:	da00000b 	ble	10cc <draw_line+0xe0>
        // swap x0, x1
        temp = x0;
    109c:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    10a0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        x0 = x1;
    10a4:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    10a8:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
        x1 = temp;
    10ac:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    10b0:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
        // swap y0, y1
        temp = y0;
    10b4:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    10b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        y0 = y1;
    10bc:	e51b3044 	ldr	r3, [r11, #-68]	; 0xffffffbc
    10c0:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
        y1 = temp;
    10c4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    10c8:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    }
    // declare variables
    int dx = x1 - x0;
    10cc:	e51b2040 	ldr	r2, [r11, #-64]	; 0xffffffc0
    10d0:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    10d4:	e0633002 	rsb	r3, r3, r2
    10d8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int dy = abs(y1 - y0);
    10dc:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    10e0:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    10e4:	e0633002 	rsb	r3, r3, r2
    10e8:	e3530000 	cmp	r3, #0
    10ec:	b2633000 	rsblt	r3, r3, #0
    10f0:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int dx2 = 2 * dx;
    10f4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    10f8:	e1a03083 	lsl	r3, r3, #1
    10fc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    int dy2 = 2 * dy;
    1100:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1104:	e1a03083 	lsl	r3, r3, #1
    1108:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    int error = dy2 - dx;
    110c:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    1110:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1114:	e0633002 	rsb	r3, r3, r2
    1118:	e50b300c 	str	r3, [r11, #-12]
    int y = y0;
    111c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1120:	e50b3010 	str	r3, [r11, #-16]
    // determine step value
    int step = 1;
    1124:	e3a03001 	mov	r3, #1
    1128:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    if (y1 - y0 < 0)    step = -1;
    112c:	e51b2044 	ldr	r2, [r11, #-68]	; 0xffffffbc
    1130:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
    1134:	e0633002 	rsb	r3, r3, r2
    1138:	e3530000 	cmp	r3, #0
    113c:	aa000001 	bge	1148 <draw_line+0x15c>
    1140:	e3e03000 	mvn	r3, #0
    1144:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    // plot initial point
    if (is_steep) {
    1148:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
    114c:	e3530000 	cmp	r3, #0
    1150:	0a000015 	beq	11ac <draw_line+0x1c0>
        for (i = 0; i < line_width; i++)
    1154:	e3a03000 	mov	r3, #0
    1158:	e50b3008 	str	r3, [r11, #-8]
    115c:	ea00000d 	b	1198 <draw_line+0x1ac>
            update_canvas_camf(y0+i, x0, colour, camf_colour);
    1160:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    1164:	e51b3008 	ldr	r3, [r11, #-8]
    1168:	e0822003 	add	r2, r2, r3
    116c:	e59b3008 	ldr	r3, [r11, #8]
    1170:	e6ff3073 	uxth	r3, r3
    1174:	e6bf3073 	sxth	r3, r3
    1178:	e1a00002 	mov	r0, r2
    117c:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
    1180:	e1a02003 	mov	r2, r3
    1184:	e59b300c 	ldr	r3, [r11, #12]
    1188:	ebfffca5 	bl	424 <update_canvas_camf>
    // determine step value
    int step = 1;
    if (y1 - y0 < 0)    step = -1;
    // plot initial point
    if (is_steep) {
        for (i = 0; i < line_width; i++)
    118c:	e51b3008 	ldr	r3, [r11, #-8]
    1190:	e2833001 	add	r3, r3, #1
    1194:	e50b3008 	str	r3, [r11, #-8]
    1198:	e51b2008 	ldr	r2, [r11, #-8]
    119c:	e59b3004 	ldr	r3, [r11, #4]
    11a0:	e1520003 	cmp	r2, r3
    11a4:	baffffed 	blt	1160 <draw_line+0x174>
    11a8:	ea000014 	b	1200 <draw_line+0x214>
            update_canvas_camf(y0+i, x0, colour, camf_colour);
    }
    else {
        for (i = 0; i < line_width; i++)
    11ac:	e3a03000 	mov	r3, #0
    11b0:	e50b3008 	str	r3, [r11, #-8]
    11b4:	ea00000d 	b	11f0 <draw_line+0x204>
            update_canvas_camf(x0, y0+i, colour, camf_colour);
    11b8:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
    11bc:	e51b3008 	ldr	r3, [r11, #-8]
    11c0:	e0822003 	add	r2, r2, r3
    11c4:	e59b3008 	ldr	r3, [r11, #8]
    11c8:	e6ff3073 	uxth	r3, r3
    11cc:	e6bf3073 	sxth	r3, r3
    11d0:	e51b0038 	ldr	r0, [r11, #-56]	; 0xffffffc8
    11d4:	e1a01002 	mov	r1, r2
    11d8:	e1a02003 	mov	r2, r3
    11dc:	e59b300c 	ldr	r3, [r11, #12]
    11e0:	ebfffc8f 	bl	424 <update_canvas_camf>
    if (is_steep) {
        for (i = 0; i < line_width; i++)
            update_canvas_camf(y0+i, x0, colour, camf_colour);
    }
    else {
        for (i = 0; i < line_width; i++)
    11e4:	e51b3008 	ldr	r3, [r11, #-8]
    11e8:	e2833001 	add	r3, r3, #1
    11ec:	e50b3008 	str	r3, [r11, #-8]
    11f0:	e51b2008 	ldr	r2, [r11, #-8]
    11f4:	e59b3004 	ldr	r3, [r11, #4]
    11f8:	e1520003 	cmp	r2, r3
    11fc:	baffffed 	blt	11b8 <draw_line+0x1cc>
            update_canvas_camf(x0, y0+i, colour, camf_colour);
    }
    // plot subsequent points
    int x = 0;
    1200:	e3a03000 	mov	r3, #0
    1204:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    for (x = x0 + 1; x <= x1; x++) {
    1208:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
    120c:	e2833001 	add	r3, r3, #1
    1210:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    1214:	ea000070 	b	13dc <draw_line+0x3f0>
        if (error < 0) {
    1218:	e51b300c 	ldr	r3, [r11, #-12]
    121c:	e3530000 	cmp	r3, #0
    1220:	aa000032 	bge	12f0 <draw_line+0x304>
            if (is_steep) {
    1224:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
    1228:	e3530000 	cmp	r3, #0
    122c:	0a000015 	beq	1288 <draw_line+0x29c>
                for (i = 0; i < line_width; i++)
    1230:	e3a03000 	mov	r3, #0
    1234:	e50b3008 	str	r3, [r11, #-8]
    1238:	ea00000d 	b	1274 <draw_line+0x288>
                    update_canvas_camf(y+i, x, colour, camf_colour);
    123c:	e51b2010 	ldr	r2, [r11, #-16]
    1240:	e51b3008 	ldr	r3, [r11, #-8]
    1244:	e0822003 	add	r2, r2, r3
    1248:	e59b3008 	ldr	r3, [r11, #8]
    124c:	e6ff3073 	uxth	r3, r3
    1250:	e6bf3073 	sxth	r3, r3
    1254:	e1a00002 	mov	r0, r2
    1258:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    125c:	e1a02003 	mov	r2, r3
    1260:	e59b300c 	ldr	r3, [r11, #12]
    1264:	ebfffc6e 	bl	424 <update_canvas_camf>
    // plot subsequent points
    int x = 0;
    for (x = x0 + 1; x <= x1; x++) {
        if (error < 0) {
            if (is_steep) {
                for (i = 0; i < line_width; i++)
    1268:	e51b3008 	ldr	r3, [r11, #-8]
    126c:	e2833001 	add	r3, r3, #1
    1270:	e50b3008 	str	r3, [r11, #-8]
    1274:	e51b2008 	ldr	r2, [r11, #-8]
    1278:	e59b3004 	ldr	r3, [r11, #4]
    127c:	e1520003 	cmp	r2, r3
    1280:	baffffed 	blt	123c <draw_line+0x250>
    1284:	ea000014 	b	12dc <draw_line+0x2f0>
                    update_canvas_camf(y+i, x, colour, camf_colour);
            }
            else {
                for (i = 0; i < line_width; i++)
    1288:	e3a03000 	mov	r3, #0
    128c:	e50b3008 	str	r3, [r11, #-8]
    1290:	ea00000d 	b	12cc <draw_line+0x2e0>
                    update_canvas_camf(x, y+i, colour, camf_colour);
    1294:	e51b2010 	ldr	r2, [r11, #-16]
    1298:	e51b3008 	ldr	r3, [r11, #-8]
    129c:	e0822003 	add	r2, r2, r3
    12a0:	e59b3008 	ldr	r3, [r11, #8]
    12a4:	e6ff3073 	uxth	r3, r3
    12a8:	e6bf3073 	sxth	r3, r3
    12ac:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    12b0:	e1a01002 	mov	r1, r2
    12b4:	e1a02003 	mov	r2, r3
    12b8:	e59b300c 	ldr	r3, [r11, #12]
    12bc:	ebfffc58 	bl	424 <update_canvas_camf>
            if (is_steep) {
                for (i = 0; i < line_width; i++)
                    update_canvas_camf(y+i, x, colour, camf_colour);
            }
            else {
                for (i = 0; i < line_width; i++)
    12c0:	e51b3008 	ldr	r3, [r11, #-8]
    12c4:	e2833001 	add	r3, r3, #1
    12c8:	e50b3008 	str	r3, [r11, #-8]
    12cc:	e51b2008 	ldr	r2, [r11, #-8]
    12d0:	e59b3004 	ldr	r3, [r11, #4]
    12d4:	e1520003 	cmp	r2, r3
    12d8:	baffffed 	blt	1294 <draw_line+0x2a8>
                    update_canvas_camf(x, y+i, colour, camf_colour);
            }
            error += dy2;
    12dc:	e51b200c 	ldr	r2, [r11, #-12]
    12e0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    12e4:	e0823003 	add	r3, r2, r3
    12e8:	e50b300c 	str	r3, [r11, #-12]
            continue;
    12ec:	ea000037 	b	13d0 <draw_line+0x3e4>
        }
        else {
            y += step;
    12f0:	e51b2010 	ldr	r2, [r11, #-16]
    12f4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    12f8:	e0823003 	add	r3, r2, r3
    12fc:	e50b3010 	str	r3, [r11, #-16]
            if (is_steep) {
    1300:	e55b3019 	ldrb	r3, [r11, #-25]	; 0xffffffe7
    1304:	e3530000 	cmp	r3, #0
    1308:	0a000015 	beq	1364 <draw_line+0x378>
                for (i = 0; i < line_width; i++)
    130c:	e3a03000 	mov	r3, #0
    1310:	e50b3008 	str	r3, [r11, #-8]
    1314:	ea00000d 	b	1350 <draw_line+0x364>
                    update_canvas_camf(y+i, x, colour, camf_colour);
    1318:	e51b2010 	ldr	r2, [r11, #-16]
    131c:	e51b3008 	ldr	r3, [r11, #-8]
    1320:	e0822003 	add	r2, r2, r3
    1324:	e59b3008 	ldr	r3, [r11, #8]
    1328:	e6ff3073 	uxth	r3, r3
    132c:	e6bf3073 	sxth	r3, r3
    1330:	e1a00002 	mov	r0, r2
    1334:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    1338:	e1a02003 	mov	r2, r3
    133c:	e59b300c 	ldr	r3, [r11, #12]
    1340:	ebfffc37 	bl	424 <update_canvas_camf>
            continue;
        }
        else {
            y += step;
            if (is_steep) {
                for (i = 0; i < line_width; i++)
    1344:	e51b3008 	ldr	r3, [r11, #-8]
    1348:	e2833001 	add	r3, r3, #1
    134c:	e50b3008 	str	r3, [r11, #-8]
    1350:	e51b2008 	ldr	r2, [r11, #-8]
    1354:	e59b3004 	ldr	r3, [r11, #4]
    1358:	e1520003 	cmp	r2, r3
    135c:	baffffed 	blt	1318 <draw_line+0x32c>
    1360:	ea000014 	b	13b8 <draw_line+0x3cc>
                    update_canvas_camf(y+i, x, colour, camf_colour);
            }
            else {
                for (i = 0; i < line_width; i++)
    1364:	e3a03000 	mov	r3, #0
    1368:	e50b3008 	str	r3, [r11, #-8]
    136c:	ea00000d 	b	13a8 <draw_line+0x3bc>
                    update_canvas_camf(x, y+i, colour, camf_colour);
    1370:	e51b2010 	ldr	r2, [r11, #-16]
    1374:	e51b3008 	ldr	r3, [r11, #-8]
    1378:	e0822003 	add	r2, r2, r3
    137c:	e59b3008 	ldr	r3, [r11, #8]
    1380:	e6ff3073 	uxth	r3, r3
    1384:	e6bf3073 	sxth	r3, r3
    1388:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
    138c:	e1a01002 	mov	r1, r2
    1390:	e1a02003 	mov	r2, r3
    1394:	e59b300c 	ldr	r3, [r11, #12]
    1398:	ebfffc21 	bl	424 <update_canvas_camf>
            if (is_steep) {
                for (i = 0; i < line_width; i++)
                    update_canvas_camf(y+i, x, colour, camf_colour);
            }
            else {
                for (i = 0; i < line_width; i++)
    139c:	e51b3008 	ldr	r3, [r11, #-8]
    13a0:	e2833001 	add	r3, r3, #1
    13a4:	e50b3008 	str	r3, [r11, #-8]
    13a8:	e51b2008 	ldr	r2, [r11, #-8]
    13ac:	e59b3004 	ldr	r3, [r11, #4]
    13b0:	e1520003 	cmp	r2, r3
    13b4:	baffffed 	blt	1370 <draw_line+0x384>
                    update_canvas_camf(x, y+i, colour, camf_colour);
            }
            error += dy2 - dx2;
    13b8:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    13bc:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    13c0:	e0633002 	rsb	r3, r3, r2
    13c4:	e51b200c 	ldr	r2, [r11, #-12]
    13c8:	e0823003 	add	r3, r2, r3
    13cc:	e50b300c 	str	r3, [r11, #-12]
        for (i = 0; i < line_width; i++)
            update_canvas_camf(x0, y0+i, colour, camf_colour);
    }
    // plot subsequent points
    int x = 0;
    for (x = x0 + 1; x <= x1; x++) {
    13d0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    13d4:	e2833001 	add	r3, r3, #1
    13d8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    13dc:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    13e0:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
    13e4:	e1520003 	cmp	r2, r3
    13e8:	daffff8a 	ble	1218 <draw_line+0x22c>
                    update_canvas_camf(x, y+i, colour, camf_colour);
            }
            error += dy2 - dx2;
        }
    }
}
    13ec:	e24bd004 	sub	sp, r11, #4
    13f0:	e8bd8800 	pop	{r11, pc}

000013f4 <draw_rec>:
              int y0,
              int x1,
              int y1,
              int border_colour,
              int border_width,
              int fill_colour) {
    13f4:	e92d4800 	push	{r11, lr}
    13f8:	e28db004 	add	r11, sp, #4
    13fc:	e24dd028 	sub	sp, sp, #40	; 0x28
    1400:	e50b0010 	str	r0, [r11, #-16]
    1404:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
    1408:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
    140c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    int temp = 0;
    1410:	e3a03000 	mov	r3, #0
    1414:	e50b300c 	str	r3, [r11, #-12]
    int i = 0;
    1418:	e3a03000 	mov	r3, #0
    141c:	e50b3008 	str	r3, [r11, #-8]
    // 1) Draw rectangle border
    //    1.1) Horizontal lines
    //         swap lowest y point to y0
    if (y1 < y0) {
    1420:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1424:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1428:	e1520003 	cmp	r2, r3
    142c:	aa00000b 	bge	1460 <draw_rec+0x6c>
        temp = x0;
    1430:	e51b3010 	ldr	r3, [r11, #-16]
    1434:	e50b300c 	str	r3, [r11, #-12]
        x0 = x1;
    1438:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    143c:	e50b3010 	str	r3, [r11, #-16]
        x1 = temp;
    1440:	e51b300c 	ldr	r3, [r11, #-12]
    1444:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        temp = y0;
    1448:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    144c:	e50b300c 	str	r3, [r11, #-12]
        y0 = y1;
    1450:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1454:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        y1 = temp;
    1458:	e51b300c 	ldr	r3, [r11, #-12]
    145c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    }
    //         draw horizontal lines with width
    for (i = 0; i < border_width; i++) {
    1460:	e3a03000 	mov	r3, #0
    1464:	e50b3008 	str	r3, [r11, #-8]
    1468:	ea000022 	b	14f8 <draw_rec+0x104>
        draw_line(x0, y0 + i, x1, y0 + i, 1, border_colour, -1);
    146c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1470:	e51b3008 	ldr	r3, [r11, #-8]
    1474:	e0822003 	add	r2, r2, r3
    1478:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    147c:	e51b3008 	ldr	r3, [r11, #-8]
    1480:	e0813003 	add	r3, r1, r3
    1484:	e3a01001 	mov	r1, #1
    1488:	e58d1000 	str	r1, [sp]
    148c:	e59b1004 	ldr	r1, [r11, #4]
    1490:	e58d1004 	str	r1, [sp, #4]
    1494:	e3e01000 	mvn	r1, #0
    1498:	e58d1008 	str	r1, [sp, #8]
    149c:	e51b0010 	ldr	r0, [r11, #-16]
    14a0:	e1a01002 	mov	r1, r2
    14a4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    14a8:	ebfffecf 	bl	fec <draw_line>
        draw_line(x0, y1 - i, x1, y1 - i, 1, border_colour, -1);
    14ac:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    14b0:	e51b3008 	ldr	r3, [r11, #-8]
    14b4:	e0632002 	rsb	r2, r3, r2
    14b8:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    14bc:	e51b3008 	ldr	r3, [r11, #-8]
    14c0:	e0633001 	rsb	r3, r3, r1
    14c4:	e3a01001 	mov	r1, #1
    14c8:	e58d1000 	str	r1, [sp]
    14cc:	e59b1004 	ldr	r1, [r11, #4]
    14d0:	e58d1004 	str	r1, [sp, #4]
    14d4:	e3e01000 	mvn	r1, #0
    14d8:	e58d1008 	str	r1, [sp, #8]
    14dc:	e51b0010 	ldr	r0, [r11, #-16]
    14e0:	e1a01002 	mov	r1, r2
    14e4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    14e8:	ebfffebf 	bl	fec <draw_line>
        temp = y0;
        y0 = y1;
        y1 = temp;
    }
    //         draw horizontal lines with width
    for (i = 0; i < border_width; i++) {
    14ec:	e51b3008 	ldr	r3, [r11, #-8]
    14f0:	e2833001 	add	r3, r3, #1
    14f4:	e50b3008 	str	r3, [r11, #-8]
    14f8:	e51b2008 	ldr	r2, [r11, #-8]
    14fc:	e59b3008 	ldr	r3, [r11, #8]
    1500:	e1520003 	cmp	r2, r3
    1504:	baffffd8 	blt	146c <draw_rec+0x78>
        draw_line(x0, y0 + i, x1, y0 + i, 1, border_colour, -1);
        draw_line(x0, y1 - i, x1, y1 - i, 1, border_colour, -1);
    }
    //    1.1) Vertical lines
    //         swap lowest x point to x0
    if (x1 < x0) {
    1508:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    150c:	e51b3010 	ldr	r3, [r11, #-16]
    1510:	e1520003 	cmp	r2, r3
    1514:	aa00000b 	bge	1548 <draw_rec+0x154>
        temp = x0;
    1518:	e51b3010 	ldr	r3, [r11, #-16]
    151c:	e50b300c 	str	r3, [r11, #-12]
        x0 = x1;
    1520:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1524:	e50b3010 	str	r3, [r11, #-16]
        x1 = temp;
    1528:	e51b300c 	ldr	r3, [r11, #-12]
    152c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        temp = y0;
    1530:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1534:	e50b300c 	str	r3, [r11, #-12]
        y0 = y1;
    1538:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    153c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        y1 = temp;
    1540:	e51b300c 	ldr	r3, [r11, #-12]
    1544:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    }
    //         draw lines with width
    for (i = 0; i < border_width; i++) {
    1548:	e3a03000 	mov	r3, #0
    154c:	e50b3008 	str	r3, [r11, #-8]
    1550:	ea000024 	b	15e8 <draw_rec+0x1f4>
        draw_line(x0 + i, y0, x0 + i, y1, 1, border_colour, -1);
    1554:	e51b2010 	ldr	r2, [r11, #-16]
    1558:	e51b3008 	ldr	r3, [r11, #-8]
    155c:	e0822003 	add	r2, r2, r3
    1560:	e51b1010 	ldr	r1, [r11, #-16]
    1564:	e51b3008 	ldr	r3, [r11, #-8]
    1568:	e0813003 	add	r3, r1, r3
    156c:	e3a01001 	mov	r1, #1
    1570:	e58d1000 	str	r1, [sp]
    1574:	e59b1004 	ldr	r1, [r11, #4]
    1578:	e58d1004 	str	r1, [sp, #4]
    157c:	e3e01000 	mvn	r1, #0
    1580:	e58d1008 	str	r1, [sp, #8]
    1584:	e1a00002 	mov	r0, r2
    1588:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    158c:	e1a02003 	mov	r2, r3
    1590:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1594:	ebfffe94 	bl	fec <draw_line>
        draw_line(x1 - i, y0, x1 - i, y1, 1, border_colour, -1);
    1598:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    159c:	e51b3008 	ldr	r3, [r11, #-8]
    15a0:	e0632002 	rsb	r2, r3, r2
    15a4:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
    15a8:	e51b3008 	ldr	r3, [r11, #-8]
    15ac:	e0633001 	rsb	r3, r3, r1
    15b0:	e3a01001 	mov	r1, #1
    15b4:	e58d1000 	str	r1, [sp]
    15b8:	e59b1004 	ldr	r1, [r11, #4]
    15bc:	e58d1004 	str	r1, [sp, #4]
    15c0:	e3e01000 	mvn	r1, #0
    15c4:	e58d1008 	str	r1, [sp, #8]
    15c8:	e1a00002 	mov	r0, r2
    15cc:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
    15d0:	e1a02003 	mov	r2, r3
    15d4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    15d8:	ebfffe83 	bl	fec <draw_line>
        temp = y0;
        y0 = y1;
        y1 = temp;
    }
    //         draw lines with width
    for (i = 0; i < border_width; i++) {
    15dc:	e51b3008 	ldr	r3, [r11, #-8]
    15e0:	e2833001 	add	r3, r3, #1
    15e4:	e50b3008 	str	r3, [r11, #-8]
    15e8:	e51b2008 	ldr	r2, [r11, #-8]
    15ec:	e59b3008 	ldr	r3, [r11, #8]
    15f0:	e1520003 	cmp	r2, r3
    15f4:	baffffd6 	blt	1554 <draw_rec+0x160>
        draw_line(x0 + i, y0, x0 + i, y1, 1, border_colour, -1);
        draw_line(x1 - i, y0, x1 - i, y1, 1, border_colour, -1);
    }
    // 2) Fill rectangle if requested
    if (fill_colour == -1)  return;
    15f8:	e59b300c 	ldr	r3, [r11, #12]
    15fc:	e3730001 	cmn	r3, #1
    1600:	0a000033 	beq	16d4 <draw_rec+0x2e0>
    for (i = x0 + border_width; i <= x1 - border_width; i++) {
    1604:	e51b2010 	ldr	r2, [r11, #-16]
    1608:	e59b3008 	ldr	r3, [r11, #8]
    160c:	e0823003 	add	r3, r2, r3
    1610:	e50b3008 	str	r3, [r11, #-8]
    1614:	ea000027 	b	16b8 <draw_rec+0x2c4>
        if (y0 < y1)    draw_line(i, y0 + border_width, i, y1 - border_width, 1, fill_colour, -1);
    1618:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    161c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
    1620:	e1520003 	cmp	r2, r3
    1624:	aa000010 	bge	166c <draw_rec+0x278>
    1628:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    162c:	e59b3008 	ldr	r3, [r11, #8]
    1630:	e0822003 	add	r2, r2, r3
    1634:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    1638:	e59b3008 	ldr	r3, [r11, #8]
    163c:	e0633001 	rsb	r3, r3, r1
    1640:	e3a01001 	mov	r1, #1
    1644:	e58d1000 	str	r1, [sp]
    1648:	e59b100c 	ldr	r1, [r11, #12]
    164c:	e58d1004 	str	r1, [sp, #4]
    1650:	e3e01000 	mvn	r1, #0
    1654:	e58d1008 	str	r1, [sp, #8]
    1658:	e51b0008 	ldr	r0, [r11, #-8]
    165c:	e1a01002 	mov	r1, r2
    1660:	e51b2008 	ldr	r2, [r11, #-8]
    1664:	ebfffe60 	bl	fec <draw_line>
    1668:	ea00000f 	b	16ac <draw_rec+0x2b8>
        else            draw_line(i, y0 - border_width, i, y1 + border_width, 1, fill_colour, -1);
    166c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1670:	e59b3008 	ldr	r3, [r11, #8]
    1674:	e0632002 	rsb	r2, r3, r2
    1678:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
    167c:	e59b3008 	ldr	r3, [r11, #8]
    1680:	e0813003 	add	r3, r1, r3
    1684:	e3a01001 	mov	r1, #1
    1688:	e58d1000 	str	r1, [sp]
    168c:	e59b100c 	ldr	r1, [r11, #12]
    1690:	e58d1004 	str	r1, [sp, #4]
    1694:	e3e01000 	mvn	r1, #0
    1698:	e58d1008 	str	r1, [sp, #8]
    169c:	e51b0008 	ldr	r0, [r11, #-8]
    16a0:	e1a01002 	mov	r1, r2
    16a4:	e51b2008 	ldr	r2, [r11, #-8]
    16a8:	ebfffe4f 	bl	fec <draw_line>
        draw_line(x0 + i, y0, x0 + i, y1, 1, border_colour, -1);
        draw_line(x1 - i, y0, x1 - i, y1, 1, border_colour, -1);
    }
    // 2) Fill rectangle if requested
    if (fill_colour == -1)  return;
    for (i = x0 + border_width; i <= x1 - border_width; i++) {
    16ac:	e51b3008 	ldr	r3, [r11, #-8]
    16b0:	e2833001 	add	r3, r3, #1
    16b4:	e50b3008 	str	r3, [r11, #-8]
    16b8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    16bc:	e59b3008 	ldr	r3, [r11, #8]
    16c0:	e0632002 	rsb	r2, r3, r2
    16c4:	e51b3008 	ldr	r3, [r11, #-8]
    16c8:	e1520003 	cmp	r2, r3
    16cc:	aaffffd1 	bge	1618 <draw_rec+0x224>
    16d0:	ea000000 	b	16d8 <draw_rec+0x2e4>
    for (i = 0; i < border_width; i++) {
        draw_line(x0 + i, y0, x0 + i, y1, 1, border_colour, -1);
        draw_line(x1 - i, y0, x1 - i, y1, 1, border_colour, -1);
    }
    // 2) Fill rectangle if requested
    if (fill_colour == -1)  return;
    16d4:	e1a00000 	nop			; (mov r0, r0)
    for (i = x0 + border_width; i <= x1 - border_width; i++) {
        if (y0 < y1)    draw_line(i, y0 + border_width, i, y1 - border_width, 1, fill_colour, -1);
        else            draw_line(i, y0 - border_width, i, y1 + border_width, 1, fill_colour, -1);
    }
}
    16d8:	e24bd004 	sub	sp, r11, #4
    16dc:	e8bd8800 	pop	{r11, pc}

000016e0 <draw_midpoint_circle>:
void draw_midpoint_circle(int x_center,
                                 int y_center,
                                 int radius,
                                 int border_colour,
                                 int border_width,
                                 int fill_colour) {    // -1=none
    16e0:	e92d4800 	push	{r11, lr}
    16e4:	e28db004 	add	r11, sp, #4
    16e8:	e24dd020 	sub	sp, sp, #32
    16ec:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    16f0:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
    16f4:	e50b2020 	str	r2, [r11, #-32]	; 0xffffffe0
    16f8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int x = 0;
    16fc:	e3a03000 	mov	r3, #0
    1700:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
    1704:	e3a03000 	mov	r3, #0
    1708:	e50b300c 	str	r3, [r11, #-12]
    int err = 0;
    170c:	e3a03000 	mov	r3, #0
    1710:	e50b3010 	str	r3, [r11, #-16]
    int border_width_cnt = 0;
    1714:	e3a03000 	mov	r3, #0
    1718:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    // Draw circle with border
    for (border_width_cnt = 0; border_width_cnt != border_width; border_width_cnt++) {
    171c:	e3a03000 	mov	r3, #0
    1720:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    1724:	ea00008f 	b	1968 <draw_midpoint_circle+0x288>
        x = radius - border_width_cnt;
    1728:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    172c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1730:	e0633002 	rsb	r3, r3, r2
    1734:	e50b3008 	str	r3, [r11, #-8]
        y = 0;
    1738:	e3a03000 	mov	r3, #0
    173c:	e50b300c 	str	r3, [r11, #-12]
        err = 0;
    1740:	e3a03000 	mov	r3, #0
    1744:	e50b3010 	str	r3, [r11, #-16]
        while (x >= y) {
    1748:	ea00007f 	b	194c <draw_midpoint_circle+0x26c>
            update_canvas(x_center + x, y_center + y, border_colour);
    174c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1750:	e51b3008 	ldr	r3, [r11, #-8]
    1754:	e0821003 	add	r1, r2, r3
    1758:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    175c:	e51b300c 	ldr	r3, [r11, #-12]
    1760:	e0822003 	add	r2, r2, r3
    1764:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1768:	e6ff3073 	uxth	r3, r3
    176c:	e6bf3073 	sxth	r3, r3
    1770:	e1a00001 	mov	r0, r1
    1774:	e1a01002 	mov	r1, r2
    1778:	e1a02003 	mov	r2, r3
    177c:	ebfffb13 	bl	3d0 <update_canvas>
            update_canvas(x_center + y, y_center + x, border_colour);
    1780:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1784:	e51b300c 	ldr	r3, [r11, #-12]
    1788:	e0821003 	add	r1, r2, r3
    178c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1790:	e51b3008 	ldr	r3, [r11, #-8]
    1794:	e0822003 	add	r2, r2, r3
    1798:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    179c:	e6ff3073 	uxth	r3, r3
    17a0:	e6bf3073 	sxth	r3, r3
    17a4:	e1a00001 	mov	r0, r1
    17a8:	e1a01002 	mov	r1, r2
    17ac:	e1a02003 	mov	r2, r3
    17b0:	ebfffb06 	bl	3d0 <update_canvas>
            update_canvas(x_center - y, y_center + x, border_colour);
    17b4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    17b8:	e51b300c 	ldr	r3, [r11, #-12]
    17bc:	e0631002 	rsb	r1, r3, r2
    17c0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    17c4:	e51b3008 	ldr	r3, [r11, #-8]
    17c8:	e0822003 	add	r2, r2, r3
    17cc:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    17d0:	e6ff3073 	uxth	r3, r3
    17d4:	e6bf3073 	sxth	r3, r3
    17d8:	e1a00001 	mov	r0, r1
    17dc:	e1a01002 	mov	r1, r2
    17e0:	e1a02003 	mov	r2, r3
    17e4:	ebfffaf9 	bl	3d0 <update_canvas>
            update_canvas(x_center - x, y_center + y, border_colour);
    17e8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    17ec:	e51b3008 	ldr	r3, [r11, #-8]
    17f0:	e0631002 	rsb	r1, r3, r2
    17f4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    17f8:	e51b300c 	ldr	r3, [r11, #-12]
    17fc:	e0822003 	add	r2, r2, r3
    1800:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1804:	e6ff3073 	uxth	r3, r3
    1808:	e6bf3073 	sxth	r3, r3
    180c:	e1a00001 	mov	r0, r1
    1810:	e1a01002 	mov	r1, r2
    1814:	e1a02003 	mov	r2, r3
    1818:	ebfffaec 	bl	3d0 <update_canvas>
            update_canvas(x_center - x, y_center - y, border_colour);
    181c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1820:	e51b3008 	ldr	r3, [r11, #-8]
    1824:	e0631002 	rsb	r1, r3, r2
    1828:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    182c:	e51b300c 	ldr	r3, [r11, #-12]
    1830:	e0632002 	rsb	r2, r3, r2
    1834:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    1838:	e6ff3073 	uxth	r3, r3
    183c:	e6bf3073 	sxth	r3, r3
    1840:	e1a00001 	mov	r0, r1
    1844:	e1a01002 	mov	r1, r2
    1848:	e1a02003 	mov	r2, r3
    184c:	ebfffadf 	bl	3d0 <update_canvas>
            update_canvas(x_center - y, y_center - x, border_colour);
    1850:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1854:	e51b300c 	ldr	r3, [r11, #-12]
    1858:	e0631002 	rsb	r1, r3, r2
    185c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1860:	e51b3008 	ldr	r3, [r11, #-8]
    1864:	e0632002 	rsb	r2, r3, r2
    1868:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    186c:	e6ff3073 	uxth	r3, r3
    1870:	e6bf3073 	sxth	r3, r3
    1874:	e1a00001 	mov	r0, r1
    1878:	e1a01002 	mov	r1, r2
    187c:	e1a02003 	mov	r2, r3
    1880:	ebfffad2 	bl	3d0 <update_canvas>
            update_canvas(x_center + y, y_center - x, border_colour);
    1884:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1888:	e51b300c 	ldr	r3, [r11, #-12]
    188c:	e0821003 	add	r1, r2, r3
    1890:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1894:	e51b3008 	ldr	r3, [r11, #-8]
    1898:	e0632002 	rsb	r2, r3, r2
    189c:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    18a0:	e6ff3073 	uxth	r3, r3
    18a4:	e6bf3073 	sxth	r3, r3
    18a8:	e1a00001 	mov	r0, r1
    18ac:	e1a01002 	mov	r1, r2
    18b0:	e1a02003 	mov	r2, r3
    18b4:	ebfffac5 	bl	3d0 <update_canvas>
            update_canvas(x_center + x, y_center - y, border_colour);
    18b8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    18bc:	e51b3008 	ldr	r3, [r11, #-8]
    18c0:	e0821003 	add	r1, r2, r3
    18c4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    18c8:	e51b300c 	ldr	r3, [r11, #-12]
    18cc:	e0632002 	rsb	r2, r3, r2
    18d0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
    18d4:	e6ff3073 	uxth	r3, r3
    18d8:	e6bf3073 	sxth	r3, r3
    18dc:	e1a00001 	mov	r0, r1
    18e0:	e1a01002 	mov	r1, r2
    18e4:	e1a02003 	mov	r2, r3
    18e8:	ebfffab8 	bl	3d0 <update_canvas>
            if (err <= 0) {
    18ec:	e51b3010 	ldr	r3, [r11, #-16]
    18f0:	e3530000 	cmp	r3, #0
    18f4:	ca000008 	bgt	191c <draw_midpoint_circle+0x23c>
                y += 1;
    18f8:	e51b300c 	ldr	r3, [r11, #-12]
    18fc:	e2833001 	add	r3, r3, #1
    1900:	e50b300c 	str	r3, [r11, #-12]
                err += 2 * y + 1;
    1904:	e51b300c 	ldr	r3, [r11, #-12]
    1908:	e1a03083 	lsl	r3, r3, #1
    190c:	e2833001 	add	r3, r3, #1
    1910:	e51b2010 	ldr	r2, [r11, #-16]
    1914:	e0823003 	add	r3, r2, r3
    1918:	e50b3010 	str	r3, [r11, #-16]
            }
            if (err > 0) {
    191c:	e51b3010 	ldr	r3, [r11, #-16]
    1920:	e3530000 	cmp	r3, #0
    1924:	da000008 	ble	194c <draw_midpoint_circle+0x26c>
                x -= 1;
    1928:	e51b3008 	ldr	r3, [r11, #-8]
    192c:	e2433001 	sub	r3, r3, #1
    1930:	e50b3008 	str	r3, [r11, #-8]
                err -= 2 * x + 1;
    1934:	e51b3008 	ldr	r3, [r11, #-8]
    1938:	e1a03083 	lsl	r3, r3, #1
    193c:	e1e03003 	mvn	r3, r3
    1940:	e51b2010 	ldr	r2, [r11, #-16]
    1944:	e0823003 	add	r3, r2, r3
    1948:	e50b3010 	str	r3, [r11, #-16]
    // Draw circle with border
    for (border_width_cnt = 0; border_width_cnt != border_width; border_width_cnt++) {
        x = radius - border_width_cnt;
        y = 0;
        err = 0;
        while (x >= y) {
    194c:	e51b2008 	ldr	r2, [r11, #-8]
    1950:	e51b300c 	ldr	r3, [r11, #-12]
    1954:	e1520003 	cmp	r2, r3
    1958:	aaffff7b 	bge	174c <draw_midpoint_circle+0x6c>
    int x = 0;
    int y = 0;
    int err = 0;
    int border_width_cnt = 0;
    // Draw circle with border
    for (border_width_cnt = 0; border_width_cnt != border_width; border_width_cnt++) {
    195c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1960:	e2833001 	add	r3, r3, #1
    1964:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    1968:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    196c:	e59b3004 	ldr	r3, [r11, #4]
    1970:	e1520003 	cmp	r2, r3
    1974:	1affff6b 	bne	1728 <draw_midpoint_circle+0x48>
                err -= 2 * x + 1;
            }
        }
    }
    // Draw circle filling if specified (!= -1)
    if (fill_colour == -1)  return;
    1978:	e59b3008 	ldr	r3, [r11, #8]
    197c:	e3730001 	cmn	r3, #1
    1980:	0a000097 	beq	1be4 <draw_midpoint_circle+0x504>
    for (border_width_cnt = border_width; border_width_cnt <= radius; border_width_cnt++) {
    1984:	e59b3004 	ldr	r3, [r11, #4]
    1988:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    198c:	ea00008f 	b	1bd0 <draw_midpoint_circle+0x4f0>
        x = radius - border_width_cnt;
    1990:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1994:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1998:	e0633002 	rsb	r3, r3, r2
    199c:	e50b3008 	str	r3, [r11, #-8]
        y = 0;
    19a0:	e3a03000 	mov	r3, #0
    19a4:	e50b300c 	str	r3, [r11, #-12]
        err = 0;
    19a8:	e3a03000 	mov	r3, #0
    19ac:	e50b3010 	str	r3, [r11, #-16]
        while (x >= y) {
    19b0:	ea00007f 	b	1bb4 <draw_midpoint_circle+0x4d4>
            update_canvas(x_center + x, y_center + y, fill_colour);
    19b4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19b8:	e51b3008 	ldr	r3, [r11, #-8]
    19bc:	e0821003 	add	r1, r2, r3
    19c0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    19c4:	e51b300c 	ldr	r3, [r11, #-12]
    19c8:	e0822003 	add	r2, r2, r3
    19cc:	e59b3008 	ldr	r3, [r11, #8]
    19d0:	e6ff3073 	uxth	r3, r3
    19d4:	e6bf3073 	sxth	r3, r3
    19d8:	e1a00001 	mov	r0, r1
    19dc:	e1a01002 	mov	r1, r2
    19e0:	e1a02003 	mov	r2, r3
    19e4:	ebfffa79 	bl	3d0 <update_canvas>
            update_canvas(x_center + y, y_center + x, fill_colour);
    19e8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    19ec:	e51b300c 	ldr	r3, [r11, #-12]
    19f0:	e0821003 	add	r1, r2, r3
    19f4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    19f8:	e51b3008 	ldr	r3, [r11, #-8]
    19fc:	e0822003 	add	r2, r2, r3
    1a00:	e59b3008 	ldr	r3, [r11, #8]
    1a04:	e6ff3073 	uxth	r3, r3
    1a08:	e6bf3073 	sxth	r3, r3
    1a0c:	e1a00001 	mov	r0, r1
    1a10:	e1a01002 	mov	r1, r2
    1a14:	e1a02003 	mov	r2, r3
    1a18:	ebfffa6c 	bl	3d0 <update_canvas>
            update_canvas(x_center - y, y_center + x, fill_colour);
    1a1c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1a20:	e51b300c 	ldr	r3, [r11, #-12]
    1a24:	e0631002 	rsb	r1, r3, r2
    1a28:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1a2c:	e51b3008 	ldr	r3, [r11, #-8]
    1a30:	e0822003 	add	r2, r2, r3
    1a34:	e59b3008 	ldr	r3, [r11, #8]
    1a38:	e6ff3073 	uxth	r3, r3
    1a3c:	e6bf3073 	sxth	r3, r3
    1a40:	e1a00001 	mov	r0, r1
    1a44:	e1a01002 	mov	r1, r2
    1a48:	e1a02003 	mov	r2, r3
    1a4c:	ebfffa5f 	bl	3d0 <update_canvas>
            update_canvas(x_center - x, y_center + y, fill_colour);
    1a50:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1a54:	e51b3008 	ldr	r3, [r11, #-8]
    1a58:	e0631002 	rsb	r1, r3, r2
    1a5c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1a60:	e51b300c 	ldr	r3, [r11, #-12]
    1a64:	e0822003 	add	r2, r2, r3
    1a68:	e59b3008 	ldr	r3, [r11, #8]
    1a6c:	e6ff3073 	uxth	r3, r3
    1a70:	e6bf3073 	sxth	r3, r3
    1a74:	e1a00001 	mov	r0, r1
    1a78:	e1a01002 	mov	r1, r2
    1a7c:	e1a02003 	mov	r2, r3
    1a80:	ebfffa52 	bl	3d0 <update_canvas>
            update_canvas(x_center - x, y_center - y, fill_colour);
    1a84:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1a88:	e51b3008 	ldr	r3, [r11, #-8]
    1a8c:	e0631002 	rsb	r1, r3, r2
    1a90:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1a94:	e51b300c 	ldr	r3, [r11, #-12]
    1a98:	e0632002 	rsb	r2, r3, r2
    1a9c:	e59b3008 	ldr	r3, [r11, #8]
    1aa0:	e6ff3073 	uxth	r3, r3
    1aa4:	e6bf3073 	sxth	r3, r3
    1aa8:	e1a00001 	mov	r0, r1
    1aac:	e1a01002 	mov	r1, r2
    1ab0:	e1a02003 	mov	r2, r3
    1ab4:	ebfffa45 	bl	3d0 <update_canvas>
            update_canvas(x_center - y, y_center - x, fill_colour);
    1ab8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1abc:	e51b300c 	ldr	r3, [r11, #-12]
    1ac0:	e0631002 	rsb	r1, r3, r2
    1ac4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1ac8:	e51b3008 	ldr	r3, [r11, #-8]
    1acc:	e0632002 	rsb	r2, r3, r2
    1ad0:	e59b3008 	ldr	r3, [r11, #8]
    1ad4:	e6ff3073 	uxth	r3, r3
    1ad8:	e6bf3073 	sxth	r3, r3
    1adc:	e1a00001 	mov	r0, r1
    1ae0:	e1a01002 	mov	r1, r2
    1ae4:	e1a02003 	mov	r2, r3
    1ae8:	ebfffa38 	bl	3d0 <update_canvas>
            update_canvas(x_center + y, y_center - x, fill_colour);
    1aec:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1af0:	e51b300c 	ldr	r3, [r11, #-12]
    1af4:	e0821003 	add	r1, r2, r3
    1af8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1afc:	e51b3008 	ldr	r3, [r11, #-8]
    1b00:	e0632002 	rsb	r2, r3, r2
    1b04:	e59b3008 	ldr	r3, [r11, #8]
    1b08:	e6ff3073 	uxth	r3, r3
    1b0c:	e6bf3073 	sxth	r3, r3
    1b10:	e1a00001 	mov	r0, r1
    1b14:	e1a01002 	mov	r1, r2
    1b18:	e1a02003 	mov	r2, r3
    1b1c:	ebfffa2b 	bl	3d0 <update_canvas>
            update_canvas(x_center + x, y_center - y, fill_colour);
    1b20:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
    1b24:	e51b3008 	ldr	r3, [r11, #-8]
    1b28:	e0821003 	add	r1, r2, r3
    1b2c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1b30:	e51b300c 	ldr	r3, [r11, #-12]
    1b34:	e0632002 	rsb	r2, r3, r2
    1b38:	e59b3008 	ldr	r3, [r11, #8]
    1b3c:	e6ff3073 	uxth	r3, r3
    1b40:	e6bf3073 	sxth	r3, r3
    1b44:	e1a00001 	mov	r0, r1
    1b48:	e1a01002 	mov	r1, r2
    1b4c:	e1a02003 	mov	r2, r3
    1b50:	ebfffa1e 	bl	3d0 <update_canvas>
            if (err <= 0) {
    1b54:	e51b3010 	ldr	r3, [r11, #-16]
    1b58:	e3530000 	cmp	r3, #0
    1b5c:	ca000008 	bgt	1b84 <draw_midpoint_circle+0x4a4>
                y += 1;
    1b60:	e51b300c 	ldr	r3, [r11, #-12]
    1b64:	e2833001 	add	r3, r3, #1
    1b68:	e50b300c 	str	r3, [r11, #-12]
                err += 2 * y + 1;
    1b6c:	e51b300c 	ldr	r3, [r11, #-12]
    1b70:	e1a03083 	lsl	r3, r3, #1
    1b74:	e2833001 	add	r3, r3, #1
    1b78:	e51b2010 	ldr	r2, [r11, #-16]
    1b7c:	e0823003 	add	r3, r2, r3
    1b80:	e50b3010 	str	r3, [r11, #-16]
            }
            if (err > 0) {
    1b84:	e51b3010 	ldr	r3, [r11, #-16]
    1b88:	e3530000 	cmp	r3, #0
    1b8c:	da000008 	ble	1bb4 <draw_midpoint_circle+0x4d4>
                x -= 1;
    1b90:	e51b3008 	ldr	r3, [r11, #-8]
    1b94:	e2433001 	sub	r3, r3, #1
    1b98:	e50b3008 	str	r3, [r11, #-8]
                err -= 2 * x + 1;
    1b9c:	e51b3008 	ldr	r3, [r11, #-8]
    1ba0:	e1a03083 	lsl	r3, r3, #1
    1ba4:	e1e03003 	mvn	r3, r3
    1ba8:	e51b2010 	ldr	r2, [r11, #-16]
    1bac:	e0823003 	add	r3, r2, r3
    1bb0:	e50b3010 	str	r3, [r11, #-16]
    if (fill_colour == -1)  return;
    for (border_width_cnt = border_width; border_width_cnt <= radius; border_width_cnt++) {
        x = radius - border_width_cnt;
        y = 0;
        err = 0;
        while (x >= y) {
    1bb4:	e51b2008 	ldr	r2, [r11, #-8]
    1bb8:	e51b300c 	ldr	r3, [r11, #-12]
    1bbc:	e1520003 	cmp	r2, r3
    1bc0:	aaffff7b 	bge	19b4 <draw_midpoint_circle+0x2d4>
            }
        }
    }
    // Draw circle filling if specified (!= -1)
    if (fill_colour == -1)  return;
    for (border_width_cnt = border_width; border_width_cnt <= radius; border_width_cnt++) {
    1bc4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1bc8:	e2833001 	add	r3, r3, #1
    1bcc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    1bd0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1bd4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1bd8:	e1520003 	cmp	r2, r3
    1bdc:	daffff6b 	ble	1990 <draw_midpoint_circle+0x2b0>
    1be0:	ea000000 	b	1be8 <draw_midpoint_circle+0x508>
                err -= 2 * x + 1;
            }
        }
    }
    // Draw circle filling if specified (!= -1)
    if (fill_colour == -1)  return;
    1be4:	e1a00000 	nop			; (mov r0, r0)
                x -= 1;
                err -= 2 * x + 1;
            }
        }
    }
}
    1be8:	e24bd004 	sub	sp, r11, #4
    1bec:	e8bd8800 	pop	{r11, pc}

00001bf0 <wait_player_move>:



// D. Game Logic
void wait_player_move() {
    1bf0:	e92d4800 	push	{r11, lr}
    1bf4:	e28db004 	add	r11, sp, #4
    1bf8:	e24dd010 	sub	sp, sp, #16
    // 1) Check for key input if match a list of accepted inputs
    int key = 0;
    1bfc:	e3a03000 	mov	r3, #0
    1c00:	e50b300c 	str	r3, [r11, #-12]
    int i = 0;
    1c04:	e3a03000 	mov	r3, #0
    1c08:	e50b3010 	str	r3, [r11, #-16]
    int chip_col = INI_CHIP_COL;
    1c0c:	e3043734 	movw	r3, #18228	; 0x4734
    1c10:	e3403000 	movt	r3, #0
    1c14:	e5933000 	ldr	r3, [r3]
    1c18:	e50b3008 	str	r3, [r11, #-8]
    1c1c:	ea000000 	b	1c24 <wait_player_move+0x34>
                return;
            case 6 :                                    // esc: reset game
                is_reset_game = true;
                return;
        }
    }
    1c20:	e1a00000 	nop			; (mov r0, r0)
    // 1) Check for key input if match a list of accepted inputs
    int key = 0;
    int i = 0;
    int chip_col = INI_CHIP_COL;
    while (true) {
        chip_col = mov_preview_chip_col(chip_col, 0);
    1c24:	e51b0008 	ldr	r0, [r11, #-8]
    1c28:	e3a01000 	mov	r1, #0
    1c2c:	eb0006d6 	bl	378c <mov_preview_chip_col>
    1c30:	e50b0008 	str	r0, [r11, #-8]
		erase_preview_place_chip();
    1c34:	eb00007e 	bl	1e34 <erase_preview_place_chip>
        preview_place_chip(chip_col, is_player1_turn);
    1c38:	e30c300d 	movw	r3, #49165	; 0xc00d
    1c3c:	e3403009 	movt	r3, #9
    1c40:	e5d33000 	ldrb	r3, [r3]
    1c44:	e51b0008 	ldr	r0, [r11, #-8]
    1c48:	e1a01003 	mov	r1, r3
    1c4c:	eb000037 	bl	1d30 <preview_place_chip>
        draw_canvas();
    1c50:	ebfffa72 	bl	620 <draw_canvas>
        key = wait_for_correct_key(PS2_KEY_CODES);
    1c54:	e30407f0 	movw	r0, #18416	; 0x47f0
    1c58:	e3400000 	movt	r0, #0
    1c5c:	eb00066a 	bl	360c <wait_for_correct_key>
    1c60:	e50b000c 	str	r0, [r11, #-12]
        switch (key) {
    1c64:	e51b300c 	ldr	r3, [r11, #-12]
    1c68:	e3530006 	cmp	r3, #6
    1c6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1c70:	eaffffea 	b	1c20 <wait_player_move+0x30>
    1c74:	00001c90 	.word	0x00001c90
    1c78:	00001c90 	.word	0x00001c90
    1c7c:	00001c90 	.word	0x00001c90
    1c80:	00001ccc 	.word	0x00001ccc
    1c84:	00001ce0 	.word	0x00001ce0
    1c88:	00001cf4 	.word	0x00001cf4
    1c8c:	00001d08 	.word	0x00001d08
            case 0 :                                    // enter: drop chip but first checks if move is valid
            case 1 :                                    // space bar: drop chip but first checks if move is valid
            case 2 :                                    // down arrow: drop chip but first checks if move is valid
                if (game_chip_matrix[0][chip_col] != 0)  break;
    1c90:	e30b3fc0 	movw	r3, #49088	; 0xbfc0
    1c94:	e3403009 	movt	r3, #9
    1c98:	e51b2008 	ldr	r2, [r11, #-8]
    1c9c:	e0833002 	add	r3, r3, r2
    1ca0:	e5d33000 	ldrb	r3, [r3]
    1ca4:	e3530000 	cmp	r3, #0
    1ca8:	1a00001c 	bne	1d20 <wait_player_move+0x130>
                erase_preview_place_chip();
    1cac:	eb000060 	bl	1e34 <erase_preview_place_chip>
                place_chip(chip_col, is_player1_turn);
    1cb0:	e30c300d 	movw	r3, #49165	; 0xc00d
    1cb4:	e3403009 	movt	r3, #9
    1cb8:	e5d33000 	ldrb	r3, [r3]
    1cbc:	e51b0008 	ldr	r0, [r11, #-8]
    1cc0:	e1a01003 	mov	r1, r3
    1cc4:	eb000080 	bl	1ecc <place_chip>
                return;
    1cc8:	ea000016 	b	1d28 <wait_player_move+0x138>
            case 3 :                                    // left arrow: move chip to the next available slot to left
				chip_col = mov_preview_chip_col(chip_col, -1);
    1ccc:	e51b0008 	ldr	r0, [r11, #-8]
    1cd0:	e3e01000 	mvn	r1, #0
    1cd4:	eb0006ac 	bl	378c <mov_preview_chip_col>
    1cd8:	e50b0008 	str	r0, [r11, #-8]
                break;
    1cdc:	ea000010 	b	1d24 <wait_player_move+0x134>
            case 4 :                                    // right arrow: move chip to the next available slot to right
				chip_col = mov_preview_chip_col(chip_col, 1);
    1ce0:	e51b0008 	ldr	r0, [r11, #-8]
    1ce4:	e3a01001 	mov	r1, #1
    1ce8:	eb0006a7 	bl	378c <mov_preview_chip_col>
    1cec:	e50b0008 	str	r0, [r11, #-8]
                break;
    1cf0:	ea00000b 	b	1d24 <wait_player_move+0x134>
            case 5 :                                    // e: forfeit game
                is_forfeit_game = true;
    1cf4:	e30c300f 	movw	r3, #49167	; 0xc00f
    1cf8:	e3403009 	movt	r3, #9
    1cfc:	e3a02001 	mov	r2, #1
    1d00:	e5c32000 	strb	r2, [r3]
                return;
    1d04:	ea000007 	b	1d28 <wait_player_move+0x138>
            case 6 :                                    // esc: reset game
                is_reset_game = true;
    1d08:	e30c300e 	movw	r3, #49166	; 0xc00e
    1d0c:	e3403009 	movt	r3, #9
    1d10:	e3a02001 	mov	r2, #1
    1d14:	e5c32000 	strb	r2, [r3]
                return;
    1d18:	e1a00000 	nop			; (mov r0, r0)
    1d1c:	ea000001 	b	1d28 <wait_player_move+0x138>
        key = wait_for_correct_key(PS2_KEY_CODES);
        switch (key) {
            case 0 :                                    // enter: drop chip but first checks if move is valid
            case 1 :                                    // space bar: drop chip but first checks if move is valid
            case 2 :                                    // down arrow: drop chip but first checks if move is valid
                if (game_chip_matrix[0][chip_col] != 0)  break;
    1d20:	e1a00000 	nop			; (mov r0, r0)
                return;
            case 6 :                                    // esc: reset game
                is_reset_game = true;
                return;
        }
    }
    1d24:	eaffffbd 	b	1c20 <wait_player_move+0x30>
}
    1d28:	e24bd004 	sub	sp, r11, #4
    1d2c:	e8bd8800 	pop	{r11, pc}

00001d30 <preview_place_chip>:

void preview_place_chip(int col, bool is_player1) {
    1d30:	e92d4800 	push	{r11, lr}
    1d34:	e28db004 	add	r11, sp, #4
    1d38:	e24dd010 	sub	sp, sp, #16
    1d3c:	e50b0008 	str	r0, [r11, #-8]
    1d40:	e1a03001 	mov	r3, r1
    1d44:	e54b3009 	strb	r3, [r11, #-9]
    // Don't draw preview if board column is full
    if (game_chip_matrix[0][col] != 0)
    1d48:	e30b3fc0 	movw	r3, #49088	; 0xbfc0
    1d4c:	e3403009 	movt	r3, #9
    1d50:	e51b2008 	ldr	r2, [r11, #-8]
    1d54:	e0833002 	add	r3, r3, r2
    1d58:	e5d33000 	ldrb	r3, [r3]
    1d5c:	e3530000 	cmp	r3, #0
    1d60:	1a000030 	bne	1e28 <preview_place_chip+0xf8>
        return;
    if (is_player1)
    1d64:	e55b3009 	ldrb	r3, [r11, #-9]
    1d68:	e3530000 	cmp	r3, #0
    1d6c:	0a000016 	beq	1dcc <preview_place_chip+0x9c>
        fill_midpoint_circle(CHIP_START_LOC[col][0],
    1d70:	e30436d4 	movw	r3, #18132	; 0x46d4
    1d74:	e3403000 	movt	r3, #0
    1d78:	e51b2008 	ldr	r2, [r11, #-8]
    1d7c:	e7931182 	ldr	r1, [r3, r2, lsl #3]
    1d80:	e30436d4 	movw	r3, #18132	; 0x46d4
    1d84:	e3403000 	movt	r3, #0
    1d88:	e51b0008 	ldr	r0, [r11, #-8]
    1d8c:	e3a02004 	mov	r2, #4
    1d90:	e1a00180 	lsl	r0, r0, #3
    1d94:	e0833000 	add	r3, r3, r0
    1d98:	e0833002 	add	r3, r3, r2
    1d9c:	e5932000 	ldr	r2, [r3]
    1da0:	e304372c 	movw	r3, #18220	; 0x472c
    1da4:	e3403000 	movt	r3, #0
    1da8:	e5933000 	ldr	r3, [r3]
    1dac:	e3e00000 	mvn	r0, #0
    1db0:	e58d0000 	str	r0, [sp]
    1db4:	e1a00001 	mov	r0, r1
    1db8:	e1a01002 	mov	r1, r2
    1dbc:	e1a02003 	mov	r2, r3
    1dc0:	e3a03b2a 	mov	r3, #43008	; 0xa800
    1dc4:	ebfffae4 	bl	95c <fill_midpoint_circle>
    1dc8:	ea000017 	b	1e2c <preview_place_chip+0xfc>
                             CHIP_START_LOC[col][1],
                             CHIP_RADIUS,
                             CHIP1_SHADOW_COLOUR,
                             -1);
    else
        fill_midpoint_circle(CHIP_START_LOC[col][0],
    1dcc:	e30436d4 	movw	r3, #18132	; 0x46d4
    1dd0:	e3403000 	movt	r3, #0
    1dd4:	e51b2008 	ldr	r2, [r11, #-8]
    1dd8:	e7931182 	ldr	r1, [r3, r2, lsl #3]
    1ddc:	e30436d4 	movw	r3, #18132	; 0x46d4
    1de0:	e3403000 	movt	r3, #0
    1de4:	e51b0008 	ldr	r0, [r11, #-8]
    1de8:	e3a02004 	mov	r2, #4
    1dec:	e1a00180 	lsl	r0, r0, #3
    1df0:	e0833000 	add	r3, r3, r0
    1df4:	e0833002 	add	r3, r3, r2
    1df8:	e5932000 	ldr	r2, [r3]
    1dfc:	e304372c 	movw	r3, #18220	; 0x472c
    1e00:	e3403000 	movt	r3, #0
    1e04:	e5933000 	ldr	r3, [r3]
    1e08:	e3e00000 	mvn	r0, #0
    1e0c:	e58d0000 	str	r0, [sp]
    1e10:	e1a00001 	mov	r0, r1
    1e14:	e1a01002 	mov	r1, r2
    1e18:	e1a02003 	mov	r2, r3
    1e1c:	e3a03ca5 	mov	r3, #42240	; 0xa500
    1e20:	ebfffacd 	bl	95c <fill_midpoint_circle>
    1e24:	ea000000 	b	1e2c <preview_place_chip+0xfc>
}

void preview_place_chip(int col, bool is_player1) {
    // Don't draw preview if board column is full
    if (game_chip_matrix[0][col] != 0)
        return;
    1e28:	e1a00000 	nop			; (mov r0, r0)
        fill_midpoint_circle(CHIP_START_LOC[col][0],
                             CHIP_START_LOC[col][1],
                             CHIP_RADIUS,
                             CHIP2_SHADOW_COLOUR,
                             -1);
}
    1e2c:	e24bd004 	sub	sp, r11, #4
    1e30:	e8bd8800 	pop	{r11, pc}

00001e34 <erase_preview_place_chip>:

void erase_preview_place_chip() {
    1e34:	e92d4800 	push	{r11, lr}
    1e38:	e28db004 	add	r11, sp, #4
    1e3c:	e24dd010 	sub	sp, sp, #16
    int col = 0;
    1e40:	e3a03000 	mov	r3, #0
    1e44:	e50b3008 	str	r3, [r11, #-8]
    for (col = 0; col < CHIP_COL_NUM; col++)
    1e48:	e3a03000 	mov	r3, #0
    1e4c:	e50b3008 	str	r3, [r11, #-8]
    1e50:	ea000018 	b	1eb8 <erase_preview_place_chip+0x84>
        fill_midpoint_circle(CHIP_START_LOC[col][0],
    1e54:	e30436d4 	movw	r3, #18132	; 0x46d4
    1e58:	e3403000 	movt	r3, #0
    1e5c:	e51b2008 	ldr	r2, [r11, #-8]
    1e60:	e7931182 	ldr	r1, [r3, r2, lsl #3]
    1e64:	e30436d4 	movw	r3, #18132	; 0x46d4
    1e68:	e3403000 	movt	r3, #0
    1e6c:	e51b0008 	ldr	r0, [r11, #-8]
    1e70:	e3a02004 	mov	r2, #4
    1e74:	e1a00180 	lsl	r0, r0, #3
    1e78:	e0833000 	add	r3, r3, r0
    1e7c:	e0833002 	add	r3, r3, r2
    1e80:	e5932000 	ldr	r2, [r3]
    1e84:	e304372c 	movw	r3, #18220	; 0x472c
    1e88:	e3403000 	movt	r3, #0
    1e8c:	e5933000 	ldr	r3, [r3]
    1e90:	e3e00000 	mvn	r0, #0
    1e94:	e58d0000 	str	r0, [sp]
    1e98:	e1a00001 	mov	r0, r1
    1e9c:	e1a01002 	mov	r1, r2
    1ea0:	e1a02003 	mov	r2, r3
    1ea4:	e3a03000 	mov	r3, #0
    1ea8:	ebfffaab 	bl	95c <fill_midpoint_circle>
                             -1);
}

void erase_preview_place_chip() {
    int col = 0;
    for (col = 0; col < CHIP_COL_NUM; col++)
    1eac:	e51b3008 	ldr	r3, [r11, #-8]
    1eb0:	e2833001 	add	r3, r3, #1
    1eb4:	e50b3008 	str	r3, [r11, #-8]
    1eb8:	e51b3008 	ldr	r3, [r11, #-8]
    1ebc:	e353000a 	cmp	r3, #10
    1ec0:	daffffe3 	ble	1e54 <erase_preview_place_chip+0x20>
        fill_midpoint_circle(CHIP_START_LOC[col][0],
                             CHIP_START_LOC[col][1],
                             CHIP_RADIUS,
                             BACKGROUND_COLOUR,
                             -1);
}
    1ec4:	e24bd004 	sub	sp, r11, #4
    1ec8:	e8bd8800 	pop	{r11, pc}

00001ecc <place_chip>:

bool place_chip(int col, bool is_player1) {
    1ecc:	e92d4810 	push	{r4, r11, lr}
    1ed0:	e28db008 	add	r11, sp, #8
    1ed4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    1ed8:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
    1edc:	e1a03001 	mov	r3, r1
    1ee0:	e54b3029 	strb	r3, [r11, #-41]	; 0xffffffd7
    // 1) Determine colour
    int player_val = 0;
    1ee4:	e3a03000 	mov	r3, #0
    1ee8:	e50b3010 	str	r3, [r11, #-16]
    int colour = 0;
    1eec:	e3a03000 	mov	r3, #0
    1ef0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    double chip_speed_incr = 0;
    1ef4:	e3a02000 	mov	r2, #0
    1ef8:	e3a03000 	mov	r3, #0
    1efc:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
    if (is_player1) {
    1f00:	e55b3029 	ldrb	r3, [r11, #-41]	; 0xffffffd7
    1f04:	e3530000 	cmp	r3, #0
    1f08:	0a000004 	beq	1f20 <place_chip+0x54>
        player_val = 1;
    1f0c:	e3a03001 	mov	r3, #1
    1f10:	e50b3010 	str	r3, [r11, #-16]
        colour = CHIP1_COLOUR;
    1f14:	e3a03b3e 	mov	r3, #63488	; 0xf800
    1f18:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    1f1c:	ea000003 	b	1f30 <place_chip+0x64>
    }
    else {
        player_val = 2;
    1f20:	e3a03002 	mov	r3, #2
    1f24:	e50b3010 	str	r3, [r11, #-16]
        colour = CHIP2_COLOUR;
    1f28:	e30f3780 	movw	r3, #63360	; 0xf780
    1f2c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    }
    // 2) Set initial chip position
    memcpy(place_chip_loc, CHIP_START_LOC[col], sizeof(place_chip_loc));
    1f30:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
    1f34:	e1a02183 	lsl	r2, r3, #3
    1f38:	e30436d4 	movw	r3, #18132	; 0x46d4
    1f3c:	e3403000 	movt	r3, #0
    1f40:	e0822003 	add	r2, r2, r3
    1f44:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    1f48:	e3403009 	movt	r3, #9
    1f4c:	e8920003 	ldm	r2, {r0, r1}
    1f50:	e8830003 	stm	r3, {r0, r1}
    // 3) Determine end position
    int empty_row = 0;
    1f54:	e3a03000 	mov	r3, #0
    1f58:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    for (empty_row = CHIP_ROW_NUM - 1; empty_row >= -1; empty_row--) {
    1f5c:	e3a03006 	mov	r3, #6
    1f60:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    1f64:	ea000015 	b	1fc0 <place_chip+0xf4>
        if (empty_row == -1)    return false;       // if column has been filled, return false
    1f68:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1f6c:	e3730001 	cmn	r3, #1
    1f70:	1a000001 	bne	1f7c <place_chip+0xb0>
    1f74:	e3a03000 	mov	r3, #0
    1f78:	ea0000a4 	b	2210 <place_chip+0x344>
        if (game_chip_matrix[empty_row][col] == 0) {
    1f7c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    1f80:	e3402009 	movt	r2, #9
    1f84:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    1f88:	e1a03001 	mov	r3, r1
    1f8c:	e1a03103 	lsl	r3, r3, #2
    1f90:	e0833001 	add	r3, r3, r1
    1f94:	e1a03083 	lsl	r3, r3, #1
    1f98:	e0833001 	add	r3, r3, r1
    1f9c:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    1fa0:	e0833001 	add	r3, r3, r1
    1fa4:	e0823003 	add	r3, r2, r3
    1fa8:	e5d33000 	ldrb	r3, [r3]
    1fac:	e3530000 	cmp	r3, #0
    1fb0:	0a000006 	beq	1fd0 <place_chip+0x104>
    }
    // 2) Set initial chip position
    memcpy(place_chip_loc, CHIP_START_LOC[col], sizeof(place_chip_loc));
    // 3) Determine end position
    int empty_row = 0;
    for (empty_row = CHIP_ROW_NUM - 1; empty_row >= -1; empty_row--) {
    1fb4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1fb8:	e2433001 	sub	r3, r3, #1
    1fbc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    1fc0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1fc4:	e3730001 	cmn	r3, #1
    1fc8:	aaffffe6 	bge	1f68 <place_chip+0x9c>
    1fcc:	ea000000 	b	1fd4 <place_chip+0x108>
        if (empty_row == -1)    return false;       // if column has been filled, return false
        if (game_chip_matrix[empty_row][col] == 0) {
            break;
    1fd0:	e1a00000 	nop			; (mov r0, r0)
        }
    }
    // 4) Draw and update chip animation location in while loop
    memcpy(canvas_backup, canvas, sizeof(canvas_backup));
    1fd4:	e30f2cd8 	movw	r2, #64728	; 0xfcd8
    1fd8:	e3402004 	movt	r2, #4
    1fdc:	e3043cd8 	movw	r3, #19672	; 0x4cd8
    1fe0:	e3403000 	movt	r3, #0
    1fe4:	e1a01002 	mov	r1, r2
    1fe8:	e1a02003 	mov	r2, r3
    1fec:	e3a03a4b 	mov	r3, #307200	; 0x4b000
    1ff0:	e1a00001 	mov	r0, r1
    1ff4:	e1a01002 	mov	r1, r2
    1ff8:	e1a02003 	mov	r2, r3
    1ffc:	eb000767 	bl	3da0 <memcpy>
    while (place_chip_loc[1] < BOARD_HOLE_LOC[empty_row][col][1]) {
    2000:	ea00002c 	b	20b8 <place_chip+0x1ec>
        memcpy(canvas, canvas_backup, sizeof(canvas));
    2004:	e3042cd8 	movw	r2, #19672	; 0x4cd8
    2008:	e3402000 	movt	r2, #0
    200c:	e30f3cd8 	movw	r3, #64728	; 0xfcd8
    2010:	e3403004 	movt	r3, #4
    2014:	e1a01002 	mov	r1, r2
    2018:	e1a02003 	mov	r2, r3
    201c:	e3a03a4b 	mov	r3, #307200	; 0x4b000
    2020:	e1a00001 	mov	r0, r1
    2024:	e1a01002 	mov	r1, r2
    2028:	e1a02003 	mov	r2, r3
    202c:	eb00075b 	bl	3da0 <memcpy>
        fill_midpoint_circle(place_chip_loc[0],
    2030:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    2034:	e3403009 	movt	r3, #9
    2038:	e5931000 	ldr	r1, [r3]
    203c:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    2040:	e3403009 	movt	r3, #9
    2044:	e5932004 	ldr	r2, [r3, #4]
    2048:	e304372c 	movw	r3, #18220	; 0x472c
    204c:	e3403000 	movt	r3, #0
    2050:	e5933000 	ldr	r3, [r3]
    2054:	e30002df 	movw	r0, #735	; 0x2df
    2058:	e58d0000 	str	r0, [sp]
    205c:	e1a00001 	mov	r0, r1
    2060:	e1a01002 	mov	r1, r2
    2064:	e1a02003 	mov	r2, r3
    2068:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    206c:	ebfffa3a 	bl	95c <fill_midpoint_circle>
                             place_chip_loc[1],
                             CHIP_RADIUS,
                             colour,
                             BOARD_COLOUR);
        place_chip_loc[1] += (int)chip_speed_incr;
    2070:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    2074:	e3403009 	movt	r3, #9
    2078:	e5934004 	ldr	r4, [r3, #4]
    207c:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
    2080:	eb00071a 	bl	3cf0 <__aeabi_d2iz>
    2084:	e1a03000 	mov	r3, r0
    2088:	e0842003 	add	r2, r4, r3
    208c:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    2090:	e3403009 	movt	r3, #9
    2094:	e5832004 	str	r2, [r3, #4]
        chip_speed_incr += 2;
    2098:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
    209c:	e3a02000 	mov	r2, #0
    20a0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    20a4:	eb00060d 	bl	38e0 <__adddf3>
    20a8:	e1a02000 	mov	r2, r0
    20ac:	e1a03001 	mov	r3, r1
    20b0:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
        draw_canvas();
    20b4:	ebfff959 	bl	620 <draw_canvas>
            break;
        }
    }
    // 4) Draw and update chip animation location in while loop
    memcpy(canvas_backup, canvas, sizeof(canvas_backup));
    while (place_chip_loc[1] < BOARD_HOLE_LOC[empty_row][col][1]) {
    20b8:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    20bc:	e3403009 	movt	r3, #9
    20c0:	e5930004 	ldr	r0, [r3, #4]
    20c4:	e3042468 	movw	r2, #17512	; 0x4468
    20c8:	e3402000 	movt	r2, #0
    20cc:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    20d0:	e1a03001 	mov	r3, r1
    20d4:	e1a03103 	lsl	r3, r3, #2
    20d8:	e0833001 	add	r3, r3, r1
    20dc:	e1a03083 	lsl	r3, r3, #1
    20e0:	e0833001 	add	r3, r3, r1
    20e4:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    20e8:	e0831001 	add	r1, r3, r1
    20ec:	e3a03004 	mov	r3, #4
    20f0:	e1a01181 	lsl	r1, r1, #3
    20f4:	e0822001 	add	r2, r2, r1
    20f8:	e0823003 	add	r3, r2, r3
    20fc:	e5933000 	ldr	r3, [r3]
    2100:	e1500003 	cmp	r0, r3
    2104:	baffffbe 	blt	2004 <place_chip+0x138>
                             BOARD_COLOUR);
        place_chip_loc[1] += (int)chip_speed_incr;
        chip_speed_incr += 2;
        draw_canvas();
    }
    memcpy(canvas, canvas_backup, sizeof(canvas));
    2108:	e3042cd8 	movw	r2, #19672	; 0x4cd8
    210c:	e3402000 	movt	r2, #0
    2110:	e30f3cd8 	movw	r3, #64728	; 0xfcd8
    2114:	e3403004 	movt	r3, #4
    2118:	e1a01002 	mov	r1, r2
    211c:	e1a02003 	mov	r2, r3
    2120:	e3a03a4b 	mov	r3, #307200	; 0x4b000
    2124:	e1a00001 	mov	r0, r1
    2128:	e1a01002 	mov	r1, r2
    212c:	e1a02003 	mov	r2, r3
    2130:	eb00071a 	bl	3da0 <memcpy>
    fill_midpoint_circle(place_chip_loc[0],
    2134:	e30b3fa8 	movw	r3, #49064	; 0xbfa8
    2138:	e3403009 	movt	r3, #9
    213c:	e5930000 	ldr	r0, [r3]
    2140:	e3042468 	movw	r2, #17512	; 0x4468
    2144:	e3402000 	movt	r2, #0
    2148:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    214c:	e1a03001 	mov	r3, r1
    2150:	e1a03103 	lsl	r3, r3, #2
    2154:	e0833001 	add	r3, r3, r1
    2158:	e1a03083 	lsl	r3, r3, #1
    215c:	e0833001 	add	r3, r3, r1
    2160:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    2164:	e0831001 	add	r1, r3, r1
    2168:	e3a03004 	mov	r3, #4
    216c:	e1a01181 	lsl	r1, r1, #3
    2170:	e0822001 	add	r2, r2, r1
    2174:	e0823003 	add	r3, r2, r3
    2178:	e5932000 	ldr	r2, [r3]
    217c:	e304372c 	movw	r3, #18220	; 0x472c
    2180:	e3403000 	movt	r3, #0
    2184:	e5933000 	ldr	r3, [r3]
    2188:	e30012df 	movw	r1, #735	; 0x2df
    218c:	e58d1000 	str	r1, [sp]
    2190:	e1a01002 	mov	r1, r2
    2194:	e1a02003 	mov	r2, r3
    2198:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    219c:	ebfff9ee 	bl	95c <fill_midpoint_circle>
                         BOARD_HOLE_LOC[empty_row][col][1],
                         CHIP_RADIUS,
                         colour,
                         BOARD_COLOUR);
    draw_canvas();
    21a0:	ebfff91e 	bl	620 <draw_canvas>
    // 5) Update game chip matrix
    memcpy(canvas_backup, canvas, sizeof(canvas_backup));
    21a4:	e30f2cd8 	movw	r2, #64728	; 0xfcd8
    21a8:	e3402004 	movt	r2, #4
    21ac:	e3043cd8 	movw	r3, #19672	; 0x4cd8
    21b0:	e3403000 	movt	r3, #0
    21b4:	e1a01002 	mov	r1, r2
    21b8:	e1a02003 	mov	r2, r3
    21bc:	e3a03a4b 	mov	r3, #307200	; 0x4b000
    21c0:	e1a00001 	mov	r0, r1
    21c4:	e1a01002 	mov	r1, r2
    21c8:	e1a02003 	mov	r2, r3
    21cc:	eb0006f3 	bl	3da0 <memcpy>
    game_chip_matrix[empty_row][col] = player_val;
    21d0:	e51b3010 	ldr	r3, [r11, #-16]
    21d4:	e6ef0073 	uxtb	r0, r3
    21d8:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    21dc:	e3402009 	movt	r2, #9
    21e0:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
    21e4:	e1a03001 	mov	r3, r1
    21e8:	e1a03103 	lsl	r3, r3, #2
    21ec:	e0833001 	add	r3, r3, r1
    21f0:	e1a03083 	lsl	r3, r3, #1
    21f4:	e0833001 	add	r3, r3, r1
    21f8:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
    21fc:	e0833001 	add	r3, r3, r1
    2200:	e0823003 	add	r3, r2, r3
    2204:	e1a02000 	mov	r2, r0
    2208:	e5c32000 	strb	r2, [r3]
    return true;
    220c:	e3a03001 	mov	r3, #1
}
    2210:	e1a00003 	mov	r0, r3
    2214:	e24bd008 	sub	sp, r11, #8
    2218:	e8bd8810 	pop	{r4, r11, pc}

0000221c <check_game_over>:

int check_game_over() {
    221c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    2220:	e28db000 	add	r11, sp, #0
    2224:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    int x = 0;
    2228:	e3a03000 	mov	r3, #0
    222c:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
    2230:	e3a03000 	mov	r3, #0
    2234:	e50b300c 	str	r3, [r11, #-12]
    // 0) Check if game has been forfeited
    if (is_forfeit_game) {
    2238:	e30c300f 	movw	r3, #49167	; 0xc00f
    223c:	e3403009 	movt	r3, #9
    2240:	e5d33000 	ldrb	r3, [r3]
    2244:	e3530000 	cmp	r3, #0
    2248:	0a000013 	beq	229c <check_game_over+0x80>
        if (is_player1_turn)            game_state = 2;
    224c:	e30c300d 	movw	r3, #49165	; 0xc00d
    2250:	e3403009 	movt	r3, #9
    2254:	e5d33000 	ldrb	r3, [r3]
    2258:	e3530000 	cmp	r3, #0
    225c:	0a000004 	beq	2274 <check_game_over+0x58>
    2260:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2264:	e3403009 	movt	r3, #9
    2268:	e3a02002 	mov	r2, #2
    226c:	e5832000 	str	r2, [r3]
    2270:	ea000003 	b	2284 <check_game_over+0x68>
        else                            game_state = 1;
    2274:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2278:	e3403009 	movt	r3, #9
    227c:	e3a02001 	mov	r2, #1
    2280:	e5832000 	str	r2, [r3]
        win_type = 0;
    2284:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2288:	e3403009 	movt	r3, #9
    228c:	e3a02000 	mov	r2, #0
    2290:	e5832000 	str	r2, [r3]
        return 1;
    2294:	e3a03001 	mov	r3, #1
    2298:	ea00028a 	b	2cc8 <check_game_over+0xaac>
    }
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    229c:	e3a03000 	mov	r3, #0
    22a0:	e50b3008 	str	r3, [r11, #-8]
    22a4:	ea00008d 	b	24e0 <check_game_over+0x2c4>
        for (y = 0; y < CHIP_ROW_NUM; y++)
    22a8:	e3a03000 	mov	r3, #0
    22ac:	e50b300c 	str	r3, [r11, #-12]
    22b0:	ea000084 	b	24c8 <check_game_over+0x2ac>
            if (game_chip_matrix[y][x] != 0 &&
    22b4:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    22b8:	e3402009 	movt	r2, #9
    22bc:	e51b100c 	ldr	r1, [r11, #-12]
    22c0:	e1a03001 	mov	r3, r1
    22c4:	e1a03103 	lsl	r3, r3, #2
    22c8:	e0833001 	add	r3, r3, r1
    22cc:	e1a03083 	lsl	r3, r3, #1
    22d0:	e0833001 	add	r3, r3, r1
    22d4:	e51b1008 	ldr	r1, [r11, #-8]
    22d8:	e0833001 	add	r3, r3, r1
    22dc:	e0823003 	add	r3, r2, r3
    22e0:	e5d33000 	ldrb	r3, [r3]
    22e4:	e3530000 	cmp	r3, #0
    22e8:	0a000073 	beq	24bc <check_game_over+0x2a0>
                game_chip_matrix[y][x] == game_chip_matrix[y][x+1] &&
    22ec:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    22f0:	e3402009 	movt	r2, #9
    22f4:	e51b100c 	ldr	r1, [r11, #-12]
    22f8:	e1a03001 	mov	r3, r1
    22fc:	e1a03103 	lsl	r3, r3, #2
    2300:	e0833001 	add	r3, r3, r1
    2304:	e1a03083 	lsl	r3, r3, #1
    2308:	e0833001 	add	r3, r3, r1
    230c:	e51b1008 	ldr	r1, [r11, #-8]
    2310:	e0833001 	add	r3, r3, r1
    2314:	e0823003 	add	r3, r2, r3
    2318:	e5d30000 	ldrb	r0, [r3]
    231c:	e51b3008 	ldr	r3, [r11, #-8]
    2320:	e283c001 	add	r12, r3, #1
    2324:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2328:	e3402009 	movt	r2, #9
    232c:	e51b100c 	ldr	r1, [r11, #-12]
    2330:	e1a03001 	mov	r3, r1
    2334:	e1a03103 	lsl	r3, r3, #2
    2338:	e0833001 	add	r3, r3, r1
    233c:	e1a03083 	lsl	r3, r3, #1
    2340:	e0833001 	add	r3, r3, r1
    2344:	e083300c 	add	r3, r3, r12
    2348:	e0823003 	add	r3, r2, r3
    234c:	e5d33000 	ldrb	r3, [r3]
        return 1;
    }
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
    2350:	e1500003 	cmp	r0, r3
    2354:	1a000058 	bne	24bc <check_game_over+0x2a0>
                game_chip_matrix[y][x] == game_chip_matrix[y][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y][x+2] &&
    2358:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    235c:	e3402009 	movt	r2, #9
    2360:	e51b100c 	ldr	r1, [r11, #-12]
    2364:	e1a03001 	mov	r3, r1
    2368:	e1a03103 	lsl	r3, r3, #2
    236c:	e0833001 	add	r3, r3, r1
    2370:	e1a03083 	lsl	r3, r3, #1
    2374:	e0833001 	add	r3, r3, r1
    2378:	e51b1008 	ldr	r1, [r11, #-8]
    237c:	e0833001 	add	r3, r3, r1
    2380:	e0823003 	add	r3, r2, r3
    2384:	e5d30000 	ldrb	r0, [r3]
    2388:	e51b3008 	ldr	r3, [r11, #-8]
    238c:	e283c002 	add	r12, r3, #2
    2390:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2394:	e3402009 	movt	r2, #9
    2398:	e51b100c 	ldr	r1, [r11, #-12]
    239c:	e1a03001 	mov	r3, r1
    23a0:	e1a03103 	lsl	r3, r3, #2
    23a4:	e0833001 	add	r3, r3, r1
    23a8:	e1a03083 	lsl	r3, r3, #1
    23ac:	e0833001 	add	r3, r3, r1
    23b0:	e083300c 	add	r3, r3, r12
    23b4:	e0823003 	add	r3, r2, r3
    23b8:	e5d33000 	ldrb	r3, [r3]
    }
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y][x+1] &&
    23bc:	e1500003 	cmp	r0, r3
    23c0:	1a00003d 	bne	24bc <check_game_over+0x2a0>
                game_chip_matrix[y][x] == game_chip_matrix[y][x+2] &&
                game_chip_matrix[y][x] == game_chip_matrix[y][x+3]) {
    23c4:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    23c8:	e3402009 	movt	r2, #9
    23cc:	e51b100c 	ldr	r1, [r11, #-12]
    23d0:	e1a03001 	mov	r3, r1
    23d4:	e1a03103 	lsl	r3, r3, #2
    23d8:	e0833001 	add	r3, r3, r1
    23dc:	e1a03083 	lsl	r3, r3, #1
    23e0:	e0833001 	add	r3, r3, r1
    23e4:	e51b1008 	ldr	r1, [r11, #-8]
    23e8:	e0833001 	add	r3, r3, r1
    23ec:	e0823003 	add	r3, r2, r3
    23f0:	e5d30000 	ldrb	r0, [r3]
    23f4:	e51b3008 	ldr	r3, [r11, #-8]
    23f8:	e283c003 	add	r12, r3, #3
    23fc:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2400:	e3402009 	movt	r2, #9
    2404:	e51b100c 	ldr	r1, [r11, #-12]
    2408:	e1a03001 	mov	r3, r1
    240c:	e1a03103 	lsl	r3, r3, #2
    2410:	e0833001 	add	r3, r3, r1
    2414:	e1a03083 	lsl	r3, r3, #1
    2418:	e0833001 	add	r3, r3, r1
    241c:	e083300c 	add	r3, r3, r12
    2420:	e0823003 	add	r3, r2, r3
    2424:	e5d33000 	ldrb	r3, [r3]
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y][x+2] &&
    2428:	e1500003 	cmp	r0, r3
    242c:	1a000022 	bne	24bc <check_game_over+0x2a0>
                game_chip_matrix[y][x] == game_chip_matrix[y][x+3]) {
                int win_line_loc_L[2][2] = {{y, x}, {y, x+3}};
    2430:	e51b300c 	ldr	r3, [r11, #-12]
    2434:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    2438:	e51b3008 	ldr	r3, [r11, #-8]
    243c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    2440:	e51b300c 	ldr	r3, [r11, #-12]
    2444:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    2448:	e51b3008 	ldr	r3, [r11, #-8]
    244c:	e2833003 	add	r3, r3, #3
    2450:	e50b3010 	str	r3, [r11, #-16]
                memcpy(win_line_loc, win_line_loc_L, sizeof(win_line_loc));
    2454:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2458:	e3403009 	movt	r3, #9
    245c:	e1a0c003 	mov	r12, r3
    2460:	e24b301c 	sub	r3, r11, #28
    2464:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    2468:	e88c000f 	stm	r12, {r0, r1, r2, r3}
                win_type = 1;
    246c:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2470:	e3403009 	movt	r3, #9
    2474:	e3a02001 	mov	r2, #1
    2478:	e5832000 	str	r2, [r3]
                if (is_player1_turn)    game_state = 1;
    247c:	e30c300d 	movw	r3, #49165	; 0xc00d
    2480:	e3403009 	movt	r3, #9
    2484:	e5d33000 	ldrb	r3, [r3]
    2488:	e3530000 	cmp	r3, #0
    248c:	0a000004 	beq	24a4 <check_game_over+0x288>
    2490:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2494:	e3403009 	movt	r3, #9
    2498:	e3a02001 	mov	r2, #1
    249c:	e5832000 	str	r2, [r3]
    24a0:	ea000003 	b	24b4 <check_game_over+0x298>
                else                    game_state = 2;
    24a4:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    24a8:	e3403009 	movt	r3, #9
    24ac:	e3a02002 	mov	r2, #2
    24b0:	e5832000 	str	r2, [r3]
                return 1;
    24b4:	e3a03001 	mov	r3, #1
    24b8:	ea000202 	b	2cc8 <check_game_over+0xaac>
        win_type = 0;
        return 1;
    }
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
    24bc:	e51b300c 	ldr	r3, [r11, #-12]
    24c0:	e2833001 	add	r3, r3, #1
    24c4:	e50b300c 	str	r3, [r11, #-12]
    24c8:	e51b300c 	ldr	r3, [r11, #-12]
    24cc:	e3530006 	cmp	r3, #6
    24d0:	daffff77 	ble	22b4 <check_game_over+0x98>
        else                            game_state = 1;
        win_type = 0;
        return 1;
    }
    // 1) Check horizontal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    24d4:	e51b3008 	ldr	r3, [r11, #-8]
    24d8:	e2833001 	add	r3, r3, #1
    24dc:	e50b3008 	str	r3, [r11, #-8]
    24e0:	e51b3008 	ldr	r3, [r11, #-8]
    24e4:	e3530007 	cmp	r3, #7
    24e8:	daffff6e 	ble	22a8 <check_game_over+0x8c>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
    24ec:	e3a03000 	mov	r3, #0
    24f0:	e50b3008 	str	r3, [r11, #-8]
    24f4:	ea00008d 	b	2730 <check_game_over+0x514>
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
    24f8:	e3a03000 	mov	r3, #0
    24fc:	e50b300c 	str	r3, [r11, #-12]
    2500:	ea000084 	b	2718 <check_game_over+0x4fc>
            if (game_chip_matrix[y][x] != 0 &&
    2504:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2508:	e3402009 	movt	r2, #9
    250c:	e51b100c 	ldr	r1, [r11, #-12]
    2510:	e1a03001 	mov	r3, r1
    2514:	e1a03103 	lsl	r3, r3, #2
    2518:	e0833001 	add	r3, r3, r1
    251c:	e1a03083 	lsl	r3, r3, #1
    2520:	e0833001 	add	r3, r3, r1
    2524:	e51b1008 	ldr	r1, [r11, #-8]
    2528:	e0833001 	add	r3, r3, r1
    252c:	e0823003 	add	r3, r2, r3
    2530:	e5d33000 	ldrb	r3, [r3]
    2534:	e3530000 	cmp	r3, #0
    2538:	0a000073 	beq	270c <check_game_over+0x4f0>
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x] &&
    253c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2540:	e3402009 	movt	r2, #9
    2544:	e51b100c 	ldr	r1, [r11, #-12]
    2548:	e1a03001 	mov	r3, r1
    254c:	e1a03103 	lsl	r3, r3, #2
    2550:	e0833001 	add	r3, r3, r1
    2554:	e1a03083 	lsl	r3, r3, #1
    2558:	e0833001 	add	r3, r3, r1
    255c:	e51b1008 	ldr	r1, [r11, #-8]
    2560:	e0833001 	add	r3, r3, r1
    2564:	e0823003 	add	r3, r2, r3
    2568:	e5d30000 	ldrb	r0, [r3]
    256c:	e51b300c 	ldr	r3, [r11, #-12]
    2570:	e2831001 	add	r1, r3, #1
    2574:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2578:	e3402009 	movt	r2, #9
    257c:	e1a03001 	mov	r3, r1
    2580:	e1a03103 	lsl	r3, r3, #2
    2584:	e0833001 	add	r3, r3, r1
    2588:	e1a03083 	lsl	r3, r3, #1
    258c:	e0833001 	add	r3, r3, r1
    2590:	e51b1008 	ldr	r1, [r11, #-8]
    2594:	e0833001 	add	r3, r3, r1
    2598:	e0823003 	add	r3, r2, r3
    259c:	e5d33000 	ldrb	r3, [r3]
                return 1;
            }
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
    25a0:	e1500003 	cmp	r0, r3
    25a4:	1a000058 	bne	270c <check_game_over+0x4f0>
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x] &&
    25a8:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    25ac:	e3402009 	movt	r2, #9
    25b0:	e51b100c 	ldr	r1, [r11, #-12]
    25b4:	e1a03001 	mov	r3, r1
    25b8:	e1a03103 	lsl	r3, r3, #2
    25bc:	e0833001 	add	r3, r3, r1
    25c0:	e1a03083 	lsl	r3, r3, #1
    25c4:	e0833001 	add	r3, r3, r1
    25c8:	e51b1008 	ldr	r1, [r11, #-8]
    25cc:	e0833001 	add	r3, r3, r1
    25d0:	e0823003 	add	r3, r2, r3
    25d4:	e5d30000 	ldrb	r0, [r3]
    25d8:	e51b300c 	ldr	r3, [r11, #-12]
    25dc:	e2831002 	add	r1, r3, #2
    25e0:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    25e4:	e3402009 	movt	r2, #9
    25e8:	e1a03001 	mov	r3, r1
    25ec:	e1a03103 	lsl	r3, r3, #2
    25f0:	e0833001 	add	r3, r3, r1
    25f4:	e1a03083 	lsl	r3, r3, #1
    25f8:	e0833001 	add	r3, r3, r1
    25fc:	e51b1008 	ldr	r1, [r11, #-8]
    2600:	e0833001 	add	r3, r3, r1
    2604:	e0823003 	add	r3, r2, r3
    2608:	e5d33000 	ldrb	r3, [r3]
            }
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x] &&
    260c:	e1500003 	cmp	r0, r3
    2610:	1a00003d 	bne	270c <check_game_over+0x4f0>
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+3][x]) {
    2614:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2618:	e3402009 	movt	r2, #9
    261c:	e51b100c 	ldr	r1, [r11, #-12]
    2620:	e1a03001 	mov	r3, r1
    2624:	e1a03103 	lsl	r3, r3, #2
    2628:	e0833001 	add	r3, r3, r1
    262c:	e1a03083 	lsl	r3, r3, #1
    2630:	e0833001 	add	r3, r3, r1
    2634:	e51b1008 	ldr	r1, [r11, #-8]
    2638:	e0833001 	add	r3, r3, r1
    263c:	e0823003 	add	r3, r2, r3
    2640:	e5d30000 	ldrb	r0, [r3]
    2644:	e51b300c 	ldr	r3, [r11, #-12]
    2648:	e2831003 	add	r1, r3, #3
    264c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2650:	e3402009 	movt	r2, #9
    2654:	e1a03001 	mov	r3, r1
    2658:	e1a03103 	lsl	r3, r3, #2
    265c:	e0833001 	add	r3, r3, r1
    2660:	e1a03083 	lsl	r3, r3, #1
    2664:	e0833001 	add	r3, r3, r1
    2668:	e51b1008 	ldr	r1, [r11, #-8]
    266c:	e0833001 	add	r3, r3, r1
    2670:	e0823003 	add	r3, r2, r3
    2674:	e5d33000 	ldrb	r3, [r3]
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x] &&
    2678:	e1500003 	cmp	r0, r3
    267c:	1a000022 	bne	270c <check_game_over+0x4f0>
                game_chip_matrix[y][x] == game_chip_matrix[y+3][x]) {
                int win_line_loc_L[2][2] = {{y, x}, {y+3, x}};
    2680:	e51b300c 	ldr	r3, [r11, #-12]
    2684:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    2688:	e51b3008 	ldr	r3, [r11, #-8]
    268c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    2690:	e51b300c 	ldr	r3, [r11, #-12]
    2694:	e2833003 	add	r3, r3, #3
    2698:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    269c:	e51b3008 	ldr	r3, [r11, #-8]
    26a0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
                memcpy(win_line_loc, win_line_loc_L, sizeof(win_line_loc));
    26a4:	e30b3f98 	movw	r3, #49048	; 0xbf98
    26a8:	e3403009 	movt	r3, #9
    26ac:	e1a0c003 	mov	r12, r3
    26b0:	e24b302c 	sub	r3, r11, #44	; 0x2c
    26b4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    26b8:	e88c000f 	stm	r12, {r0, r1, r2, r3}
                win_type = 2;
    26bc:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    26c0:	e3403009 	movt	r3, #9
    26c4:	e3a02002 	mov	r2, #2
    26c8:	e5832000 	str	r2, [r3]
                if (is_player1_turn)    game_state = 1;
    26cc:	e30c300d 	movw	r3, #49165	; 0xc00d
    26d0:	e3403009 	movt	r3, #9
    26d4:	e5d33000 	ldrb	r3, [r3]
    26d8:	e3530000 	cmp	r3, #0
    26dc:	0a000004 	beq	26f4 <check_game_over+0x4d8>
    26e0:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    26e4:	e3403009 	movt	r3, #9
    26e8:	e3a02001 	mov	r2, #1
    26ec:	e5832000 	str	r2, [r3]
    26f0:	ea000003 	b	2704 <check_game_over+0x4e8>
                else                    game_state = 2;
    26f4:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    26f8:	e3403009 	movt	r3, #9
    26fc:	e3a02002 	mov	r2, #2
    2700:	e5832000 	str	r2, [r3]
                return 1;
    2704:	e3a03001 	mov	r3, #1
    2708:	ea00016e 	b	2cc8 <check_game_over+0xaac>
                else                    game_state = 2;
                return 1;
            }
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
    270c:	e51b300c 	ldr	r3, [r11, #-12]
    2710:	e2833001 	add	r3, r3, #1
    2714:	e50b300c 	str	r3, [r11, #-12]
    2718:	e51b300c 	ldr	r3, [r11, #-12]
    271c:	e3530003 	cmp	r3, #3
    2720:	daffff77 	ble	2504 <check_game_over+0x2e8>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 2) Check vertical match
    for (x = 0; x < CHIP_COL_NUM; x++)
    2724:	e51b3008 	ldr	r3, [r11, #-8]
    2728:	e2833001 	add	r3, r3, #1
    272c:	e50b3008 	str	r3, [r11, #-8]
    2730:	e51b3008 	ldr	r3, [r11, #-8]
    2734:	e353000a 	cmp	r3, #10
    2738:	daffff6e 	ble	24f8 <check_game_over+0x2dc>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    273c:	e3a03000 	mov	r3, #0
    2740:	e50b3008 	str	r3, [r11, #-8]
    2744:	ea000091 	b	2990 <check_game_over+0x774>
        for (y = MATCH_NUM - 1; y < CHIP_ROW_NUM; y++)
    2748:	e3a03003 	mov	r3, #3
    274c:	e50b300c 	str	r3, [r11, #-12]
    2750:	ea000088 	b	2978 <check_game_over+0x75c>
            if (game_chip_matrix[y][x] != 0 &&
    2754:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2758:	e3402009 	movt	r2, #9
    275c:	e51b100c 	ldr	r1, [r11, #-12]
    2760:	e1a03001 	mov	r3, r1
    2764:	e1a03103 	lsl	r3, r3, #2
    2768:	e0833001 	add	r3, r3, r1
    276c:	e1a03083 	lsl	r3, r3, #1
    2770:	e0833001 	add	r3, r3, r1
    2774:	e51b1008 	ldr	r1, [r11, #-8]
    2778:	e0833001 	add	r3, r3, r1
    277c:	e0823003 	add	r3, r2, r3
    2780:	e5d33000 	ldrb	r3, [r3]
    2784:	e3530000 	cmp	r3, #0
    2788:	0a000077 	beq	296c <check_game_over+0x750>
                game_chip_matrix[y][x] == game_chip_matrix[y-1][x+1] &&
    278c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2790:	e3402009 	movt	r2, #9
    2794:	e51b100c 	ldr	r1, [r11, #-12]
    2798:	e1a03001 	mov	r3, r1
    279c:	e1a03103 	lsl	r3, r3, #2
    27a0:	e0833001 	add	r3, r3, r1
    27a4:	e1a03083 	lsl	r3, r3, #1
    27a8:	e0833001 	add	r3, r3, r1
    27ac:	e51b1008 	ldr	r1, [r11, #-8]
    27b0:	e0833001 	add	r3, r3, r1
    27b4:	e0823003 	add	r3, r2, r3
    27b8:	e5d30000 	ldrb	r0, [r3]
    27bc:	e51b300c 	ldr	r3, [r11, #-12]
    27c0:	e2431001 	sub	r1, r3, #1
    27c4:	e51b3008 	ldr	r3, [r11, #-8]
    27c8:	e283c001 	add	r12, r3, #1
    27cc:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    27d0:	e3402009 	movt	r2, #9
    27d4:	e1a03001 	mov	r3, r1
    27d8:	e1a03103 	lsl	r3, r3, #2
    27dc:	e0833001 	add	r3, r3, r1
    27e0:	e1a03083 	lsl	r3, r3, #1
    27e4:	e0833001 	add	r3, r3, r1
    27e8:	e083300c 	add	r3, r3, r12
    27ec:	e0823003 	add	r3, r2, r3
    27f0:	e5d33000 	ldrb	r3, [r3]
                return 1;
            }
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = MATCH_NUM - 1; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
    27f4:	e1500003 	cmp	r0, r3
    27f8:	1a00005b 	bne	296c <check_game_over+0x750>
                game_chip_matrix[y][x] == game_chip_matrix[y-1][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y-2][x+2] &&
    27fc:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2800:	e3402009 	movt	r2, #9
    2804:	e51b100c 	ldr	r1, [r11, #-12]
    2808:	e1a03001 	mov	r3, r1
    280c:	e1a03103 	lsl	r3, r3, #2
    2810:	e0833001 	add	r3, r3, r1
    2814:	e1a03083 	lsl	r3, r3, #1
    2818:	e0833001 	add	r3, r3, r1
    281c:	e51b1008 	ldr	r1, [r11, #-8]
    2820:	e0833001 	add	r3, r3, r1
    2824:	e0823003 	add	r3, r2, r3
    2828:	e5d30000 	ldrb	r0, [r3]
    282c:	e51b300c 	ldr	r3, [r11, #-12]
    2830:	e2431002 	sub	r1, r3, #2
    2834:	e51b3008 	ldr	r3, [r11, #-8]
    2838:	e283c002 	add	r12, r3, #2
    283c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2840:	e3402009 	movt	r2, #9
    2844:	e1a03001 	mov	r3, r1
    2848:	e1a03103 	lsl	r3, r3, #2
    284c:	e0833001 	add	r3, r3, r1
    2850:	e1a03083 	lsl	r3, r3, #1
    2854:	e0833001 	add	r3, r3, r1
    2858:	e083300c 	add	r3, r3, r12
    285c:	e0823003 	add	r3, r2, r3
    2860:	e5d33000 	ldrb	r3, [r3]
            }
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = MATCH_NUM - 1; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y-1][x+1] &&
    2864:	e1500003 	cmp	r0, r3
    2868:	1a00003f 	bne	296c <check_game_over+0x750>
                game_chip_matrix[y][x] == game_chip_matrix[y-2][x+2] &&
                game_chip_matrix[y][x] == game_chip_matrix[y-3][x+3]) {
    286c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2870:	e3402009 	movt	r2, #9
    2874:	e51b100c 	ldr	r1, [r11, #-12]
    2878:	e1a03001 	mov	r3, r1
    287c:	e1a03103 	lsl	r3, r3, #2
    2880:	e0833001 	add	r3, r3, r1
    2884:	e1a03083 	lsl	r3, r3, #1
    2888:	e0833001 	add	r3, r3, r1
    288c:	e51b1008 	ldr	r1, [r11, #-8]
    2890:	e0833001 	add	r3, r3, r1
    2894:	e0823003 	add	r3, r2, r3
    2898:	e5d30000 	ldrb	r0, [r3]
    289c:	e51b300c 	ldr	r3, [r11, #-12]
    28a0:	e2431003 	sub	r1, r3, #3
    28a4:	e51b3008 	ldr	r3, [r11, #-8]
    28a8:	e283c003 	add	r12, r3, #3
    28ac:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    28b0:	e3402009 	movt	r2, #9
    28b4:	e1a03001 	mov	r3, r1
    28b8:	e1a03103 	lsl	r3, r3, #2
    28bc:	e0833001 	add	r3, r3, r1
    28c0:	e1a03083 	lsl	r3, r3, #1
    28c4:	e0833001 	add	r3, r3, r1
    28c8:	e083300c 	add	r3, r3, r12
    28cc:	e0823003 	add	r3, r2, r3
    28d0:	e5d33000 	ldrb	r3, [r3]
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = MATCH_NUM - 1; y < CHIP_ROW_NUM; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y-1][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y-2][x+2] &&
    28d4:	e1500003 	cmp	r0, r3
    28d8:	1a000023 	bne	296c <check_game_over+0x750>
                game_chip_matrix[y][x] == game_chip_matrix[y-3][x+3]) {
                int win_line_loc_L[2][2] = {{y, x}, {y-3, x+3}};
    28dc:	e51b300c 	ldr	r3, [r11, #-12]
    28e0:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    28e4:	e51b3008 	ldr	r3, [r11, #-8]
    28e8:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    28ec:	e51b300c 	ldr	r3, [r11, #-12]
    28f0:	e2433003 	sub	r3, r3, #3
    28f4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    28f8:	e51b3008 	ldr	r3, [r11, #-8]
    28fc:	e2833003 	add	r3, r3, #3
    2900:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
                memcpy(win_line_loc, win_line_loc_L, sizeof(win_line_loc));
    2904:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2908:	e3403009 	movt	r3, #9
    290c:	e1a0c003 	mov	r12, r3
    2910:	e24b303c 	sub	r3, r11, #60	; 0x3c
    2914:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    2918:	e88c000f 	stm	r12, {r0, r1, r2, r3}
                win_type = 3;
    291c:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2920:	e3403009 	movt	r3, #9
    2924:	e3a02003 	mov	r2, #3
    2928:	e5832000 	str	r2, [r3]
                if (is_player1_turn)    game_state = 1;
    292c:	e30c300d 	movw	r3, #49165	; 0xc00d
    2930:	e3403009 	movt	r3, #9
    2934:	e5d33000 	ldrb	r3, [r3]
    2938:	e3530000 	cmp	r3, #0
    293c:	0a000004 	beq	2954 <check_game_over+0x738>
    2940:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2944:	e3403009 	movt	r3, #9
    2948:	e3a02001 	mov	r2, #1
    294c:	e5832000 	str	r2, [r3]
    2950:	ea000003 	b	2964 <check_game_over+0x748>
                else                    game_state = 2;
    2954:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2958:	e3403009 	movt	r3, #9
    295c:	e3a02002 	mov	r2, #2
    2960:	e5832000 	str	r2, [r3]
                return 1;
    2964:	e3a03001 	mov	r3, #1
    2968:	ea0000d6 	b	2cc8 <check_game_over+0xaac>
                else                    game_state = 2;
                return 1;
            }
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = MATCH_NUM - 1; y < CHIP_ROW_NUM; y++)
    296c:	e51b300c 	ldr	r3, [r11, #-12]
    2970:	e2833001 	add	r3, r3, #1
    2974:	e50b300c 	str	r3, [r11, #-12]
    2978:	e51b300c 	ldr	r3, [r11, #-12]
    297c:	e3530006 	cmp	r3, #6
    2980:	daffff73 	ble	2754 <check_game_over+0x538>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 3) Check up diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    2984:	e51b3008 	ldr	r3, [r11, #-8]
    2988:	e2833001 	add	r3, r3, #1
    298c:	e50b3008 	str	r3, [r11, #-8]
    2990:	e51b3008 	ldr	r3, [r11, #-8]
    2994:	e3530007 	cmp	r3, #7
    2998:	daffff6a 	ble	2748 <check_game_over+0x52c>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    299c:	e3a03000 	mov	r3, #0
    29a0:	e50b3008 	str	r3, [r11, #-8]
    29a4:	ea000091 	b	2bf0 <check_game_over+0x9d4>
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
    29a8:	e3a03000 	mov	r3, #0
    29ac:	e50b300c 	str	r3, [r11, #-12]
    29b0:	ea000088 	b	2bd8 <check_game_over+0x9bc>
            if (game_chip_matrix[y][x] != 0 &&
    29b4:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    29b8:	e3402009 	movt	r2, #9
    29bc:	e51b100c 	ldr	r1, [r11, #-12]
    29c0:	e1a03001 	mov	r3, r1
    29c4:	e1a03103 	lsl	r3, r3, #2
    29c8:	e0833001 	add	r3, r3, r1
    29cc:	e1a03083 	lsl	r3, r3, #1
    29d0:	e0833001 	add	r3, r3, r1
    29d4:	e51b1008 	ldr	r1, [r11, #-8]
    29d8:	e0833001 	add	r3, r3, r1
    29dc:	e0823003 	add	r3, r2, r3
    29e0:	e5d33000 	ldrb	r3, [r3]
    29e4:	e3530000 	cmp	r3, #0
    29e8:	0a000077 	beq	2bcc <check_game_over+0x9b0>
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x+1] &&
    29ec:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    29f0:	e3402009 	movt	r2, #9
    29f4:	e51b100c 	ldr	r1, [r11, #-12]
    29f8:	e1a03001 	mov	r3, r1
    29fc:	e1a03103 	lsl	r3, r3, #2
    2a00:	e0833001 	add	r3, r3, r1
    2a04:	e1a03083 	lsl	r3, r3, #1
    2a08:	e0833001 	add	r3, r3, r1
    2a0c:	e51b1008 	ldr	r1, [r11, #-8]
    2a10:	e0833001 	add	r3, r3, r1
    2a14:	e0823003 	add	r3, r2, r3
    2a18:	e5d30000 	ldrb	r0, [r3]
    2a1c:	e51b300c 	ldr	r3, [r11, #-12]
    2a20:	e2831001 	add	r1, r3, #1
    2a24:	e51b3008 	ldr	r3, [r11, #-8]
    2a28:	e283c001 	add	r12, r3, #1
    2a2c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2a30:	e3402009 	movt	r2, #9
    2a34:	e1a03001 	mov	r3, r1
    2a38:	e1a03103 	lsl	r3, r3, #2
    2a3c:	e0833001 	add	r3, r3, r1
    2a40:	e1a03083 	lsl	r3, r3, #1
    2a44:	e0833001 	add	r3, r3, r1
    2a48:	e083300c 	add	r3, r3, r12
    2a4c:	e0823003 	add	r3, r2, r3
    2a50:	e5d33000 	ldrb	r3, [r3]
                return 1;
            }
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
    2a54:	e1500003 	cmp	r0, r3
    2a58:	1a00005b 	bne	2bcc <check_game_over+0x9b0>
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x+2] &&
    2a5c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2a60:	e3402009 	movt	r2, #9
    2a64:	e51b100c 	ldr	r1, [r11, #-12]
    2a68:	e1a03001 	mov	r3, r1
    2a6c:	e1a03103 	lsl	r3, r3, #2
    2a70:	e0833001 	add	r3, r3, r1
    2a74:	e1a03083 	lsl	r3, r3, #1
    2a78:	e0833001 	add	r3, r3, r1
    2a7c:	e51b1008 	ldr	r1, [r11, #-8]
    2a80:	e0833001 	add	r3, r3, r1
    2a84:	e0823003 	add	r3, r2, r3
    2a88:	e5d30000 	ldrb	r0, [r3]
    2a8c:	e51b300c 	ldr	r3, [r11, #-12]
    2a90:	e2831002 	add	r1, r3, #2
    2a94:	e51b3008 	ldr	r3, [r11, #-8]
    2a98:	e283c002 	add	r12, r3, #2
    2a9c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2aa0:	e3402009 	movt	r2, #9
    2aa4:	e1a03001 	mov	r3, r1
    2aa8:	e1a03103 	lsl	r3, r3, #2
    2aac:	e0833001 	add	r3, r3, r1
    2ab0:	e1a03083 	lsl	r3, r3, #1
    2ab4:	e0833001 	add	r3, r3, r1
    2ab8:	e083300c 	add	r3, r3, r12
    2abc:	e0823003 	add	r3, r2, r3
    2ac0:	e5d33000 	ldrb	r3, [r3]
            }
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x+1] &&
    2ac4:	e1500003 	cmp	r0, r3
    2ac8:	1a00003f 	bne	2bcc <check_game_over+0x9b0>
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x+2] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+3][x+3]) {
    2acc:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2ad0:	e3402009 	movt	r2, #9
    2ad4:	e51b100c 	ldr	r1, [r11, #-12]
    2ad8:	e1a03001 	mov	r3, r1
    2adc:	e1a03103 	lsl	r3, r3, #2
    2ae0:	e0833001 	add	r3, r3, r1
    2ae4:	e1a03083 	lsl	r3, r3, #1
    2ae8:	e0833001 	add	r3, r3, r1
    2aec:	e51b1008 	ldr	r1, [r11, #-8]
    2af0:	e0833001 	add	r3, r3, r1
    2af4:	e0823003 	add	r3, r2, r3
    2af8:	e5d30000 	ldrb	r0, [r3]
    2afc:	e51b300c 	ldr	r3, [r11, #-12]
    2b00:	e2831003 	add	r1, r3, #3
    2b04:	e51b3008 	ldr	r3, [r11, #-8]
    2b08:	e283c003 	add	r12, r3, #3
    2b0c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2b10:	e3402009 	movt	r2, #9
    2b14:	e1a03001 	mov	r3, r1
    2b18:	e1a03103 	lsl	r3, r3, #2
    2b1c:	e0833001 	add	r3, r3, r1
    2b20:	e1a03083 	lsl	r3, r3, #1
    2b24:	e0833001 	add	r3, r3, r1
    2b28:	e083300c 	add	r3, r3, r12
    2b2c:	e0823003 	add	r3, r2, r3
    2b30:	e5d33000 	ldrb	r3, [r3]
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
            if (game_chip_matrix[y][x] != 0 &&
                game_chip_matrix[y][x] == game_chip_matrix[y+1][x+1] &&
                game_chip_matrix[y][x] == game_chip_matrix[y+2][x+2] &&
    2b34:	e1500003 	cmp	r0, r3
    2b38:	1a000023 	bne	2bcc <check_game_over+0x9b0>
                game_chip_matrix[y][x] == game_chip_matrix[y+3][x+3]) {
                int win_line_loc_L[2][2] = {{y, x}, {y+3, x+3}};
    2b3c:	e51b300c 	ldr	r3, [r11, #-12]
    2b40:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
    2b44:	e51b3008 	ldr	r3, [r11, #-8]
    2b48:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
    2b4c:	e51b300c 	ldr	r3, [r11, #-12]
    2b50:	e2833003 	add	r3, r3, #3
    2b54:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
    2b58:	e51b3008 	ldr	r3, [r11, #-8]
    2b5c:	e2833003 	add	r3, r3, #3
    2b60:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
                memcpy(win_line_loc, win_line_loc_L, sizeof(win_line_loc));
    2b64:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2b68:	e3403009 	movt	r3, #9
    2b6c:	e1a0c003 	mov	r12, r3
    2b70:	e24b304c 	sub	r3, r11, #76	; 0x4c
    2b74:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    2b78:	e88c000f 	stm	r12, {r0, r1, r2, r3}
                win_type = 4;
    2b7c:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2b80:	e3403009 	movt	r3, #9
    2b84:	e3a02004 	mov	r2, #4
    2b88:	e5832000 	str	r2, [r3]
                if (is_player1_turn)    game_state = 1;
    2b8c:	e30c300d 	movw	r3, #49165	; 0xc00d
    2b90:	e3403009 	movt	r3, #9
    2b94:	e5d33000 	ldrb	r3, [r3]
    2b98:	e3530000 	cmp	r3, #0
    2b9c:	0a000004 	beq	2bb4 <check_game_over+0x998>
    2ba0:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2ba4:	e3403009 	movt	r3, #9
    2ba8:	e3a02001 	mov	r2, #1
    2bac:	e5832000 	str	r2, [r3]
    2bb0:	ea000003 	b	2bc4 <check_game_over+0x9a8>
                else                    game_state = 2;
    2bb4:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2bb8:	e3403009 	movt	r3, #9
    2bbc:	e3a02002 	mov	r2, #2
    2bc0:	e5832000 	str	r2, [r3]
                return 1;
    2bc4:	e3a03001 	mov	r3, #1
    2bc8:	ea00003e 	b	2cc8 <check_game_over+0xaac>
                else                    game_state = 2;
                return 1;
            }
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
        for (y = 0; y < CHIP_ROW_NUM - MATCH_NUM + 1; y++)
    2bcc:	e51b300c 	ldr	r3, [r11, #-12]
    2bd0:	e2833001 	add	r3, r3, #1
    2bd4:	e50b300c 	str	r3, [r11, #-12]
    2bd8:	e51b300c 	ldr	r3, [r11, #-12]
    2bdc:	e3530003 	cmp	r3, #3
    2be0:	daffff73 	ble	29b4 <check_game_over+0x798>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 4) Check down diagonal match
    for (x = 0; x < CHIP_COL_NUM - MATCH_NUM + 1; x++)
    2be4:	e51b3008 	ldr	r3, [r11, #-8]
    2be8:	e2833001 	add	r3, r3, #1
    2bec:	e50b3008 	str	r3, [r11, #-8]
    2bf0:	e51b3008 	ldr	r3, [r11, #-8]
    2bf4:	e3530007 	cmp	r3, #7
    2bf8:	daffff6a 	ble	29a8 <check_game_over+0x78c>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 5) No one won; game continues
    for (x = 0; x < CHIP_COL_NUM; x++)
    2bfc:	e3a03000 	mov	r3, #0
    2c00:	e50b3008 	str	r3, [r11, #-8]
    2c04:	ea000023 	b	2c98 <check_game_over+0xa7c>
        for (y = 0; y < CHIP_ROW_NUM; y++)
    2c08:	e3a03000 	mov	r3, #0
    2c0c:	e50b300c 	str	r3, [r11, #-12]
    2c10:	ea00001a 	b	2c80 <check_game_over+0xa64>
            if (game_chip_matrix[y][x] == 0) {
    2c14:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    2c18:	e3402009 	movt	r2, #9
    2c1c:	e51b100c 	ldr	r1, [r11, #-12]
    2c20:	e1a03001 	mov	r3, r1
    2c24:	e1a03103 	lsl	r3, r3, #2
    2c28:	e0833001 	add	r3, r3, r1
    2c2c:	e1a03083 	lsl	r3, r3, #1
    2c30:	e0833001 	add	r3, r3, r1
    2c34:	e51b1008 	ldr	r1, [r11, #-8]
    2c38:	e0833001 	add	r3, r3, r1
    2c3c:	e0823003 	add	r3, r2, r3
    2c40:	e5d33000 	ldrb	r3, [r3]
    2c44:	e3530000 	cmp	r3, #0
    2c48:	1a000009 	bne	2c74 <check_game_over+0xa58>
                win_type = 0;
    2c4c:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2c50:	e3403009 	movt	r3, #9
    2c54:	e3a02000 	mov	r2, #0
    2c58:	e5832000 	str	r2, [r3]
                game_state = 0;
    2c5c:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2c60:	e3403009 	movt	r3, #9
    2c64:	e3a02000 	mov	r2, #0
    2c68:	e5832000 	str	r2, [r3]
                return 0;
    2c6c:	e3a03000 	mov	r3, #0
    2c70:	ea000014 	b	2cc8 <check_game_over+0xaac>
                else                    game_state = 2;
                return 1;
            }
    // 5) No one won; game continues
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
    2c74:	e51b300c 	ldr	r3, [r11, #-12]
    2c78:	e2833001 	add	r3, r3, #1
    2c7c:	e50b300c 	str	r3, [r11, #-12]
    2c80:	e51b300c 	ldr	r3, [r11, #-12]
    2c84:	e3530006 	cmp	r3, #6
    2c88:	daffffe1 	ble	2c14 <check_game_over+0x9f8>
                if (is_player1_turn)    game_state = 1;
                else                    game_state = 2;
                return 1;
            }
    // 5) No one won; game continues
    for (x = 0; x < CHIP_COL_NUM; x++)
    2c8c:	e51b3008 	ldr	r3, [r11, #-8]
    2c90:	e2833001 	add	r3, r3, #1
    2c94:	e50b3008 	str	r3, [r11, #-8]
    2c98:	e51b3008 	ldr	r3, [r11, #-8]
    2c9c:	e353000a 	cmp	r3, #10
    2ca0:	daffffd8 	ble	2c08 <check_game_over+0x9ec>
                win_type = 0;
                game_state = 0;
                return 0;
            }
    // 6) Tie: all board holes have been filled
    win_type = 5;
    2ca4:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2ca8:	e3403009 	movt	r3, #9
    2cac:	e3a02005 	mov	r2, #5
    2cb0:	e5832000 	str	r2, [r3]
    game_state = 3;
    2cb4:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2cb8:	e3403009 	movt	r3, #9
    2cbc:	e3a02003 	mov	r2, #3
    2cc0:	e5832000 	str	r2, [r3]
    return 1;
    2cc4:	e3a03001 	mov	r3, #1
}
    2cc8:	e1a00003 	mov	r0, r3
    2ccc:	e28bd000 	add	sp, r11, #0
    2cd0:	e8bd0800 	ldmfd	sp!, {r11}
    2cd4:	e12fff1e 	bx	lr

00002cd8 <handle_game_over>:

void handle_game_over() {
    2cd8:	e92d4800 	push	{r11, lr}
    2cdc:	e28db004 	add	r11, sp, #4
    // Handle game states and show winner
    switch (game_state) {
    2ce0:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2ce4:	e3403009 	movt	r3, #9
    2ce8:	e5933000 	ldr	r3, [r3]
    2cec:	e3530002 	cmp	r3, #2
    2cf0:	0a000024 	beq	2d88 <handle_game_over+0xb0>
    2cf4:	e3530003 	cmp	r3, #3
    2cf8:	0a000043 	beq	2e0c <handle_game_over+0x134>
    2cfc:	e3530001 	cmp	r3, #1
    2d00:	1a00005a 	bne	2e70 <handle_game_over+0x198>
        case 1 :
            player1_score++;
    2d04:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
    2d08:	e3403009 	movt	r3, #9
    2d0c:	e5933000 	ldr	r3, [r3]
    2d10:	e2832001 	add	r2, r3, #1
    2d14:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
    2d18:	e3403009 	movt	r3, #9
    2d1c:	e5832000 	str	r2, [r3]
			draw_winning_line();
    2d20:	eb000053 	bl	2e74 <draw_winning_line>
            update_txt_canvas(0, 1, INFO_TXT[game_state]);
    2d24:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2d28:	e3403009 	movt	r3, #9
    2d2c:	e5932000 	ldr	r2, [r3]
    2d30:	e1a03002 	mov	r3, r2
    2d34:	e1a03083 	lsl	r3, r3, #1
    2d38:	e0833002 	add	r3, r3, r2
    2d3c:	e1a02183 	lsl	r2, r3, #3
    2d40:	e0632002 	rsb	r2, r3, r2
    2d44:	e3043778 	movw	r3, #18296	; 0x4778
    2d48:	e3403000 	movt	r3, #0
    2d4c:	e0823003 	add	r3, r2, r3
    2d50:	e3a00000 	mov	r0, #0
    2d54:	e3a01001 	mov	r1, #1
    2d58:	e1a02003 	mov	r2, r3
    2d5c:	ebfff5e1 	bl	4e8 <update_txt_canvas>
            draw_txt_canvas();
    2d60:	ebfff662 	bl	6f0 <draw_txt_canvas>
            reset_board();
    2d64:	eb0001a3 	bl	33f8 <reset_board>
            wait_for_correct_one_key(PS2_KEY_CODES[0]);                      // wait for enter
    2d68:	e30437f0 	movw	r3, #18416	; 0x47f0
    2d6c:	e3403000 	movt	r3, #0
    2d70:	e5933000 	ldr	r3, [r3]
    2d74:	e1a00003 	mov	r0, r3
    2d78:	eb000254 	bl	36d0 <wait_for_correct_one_key>
			draw_background(false);
    2d7c:	e3a00000 	mov	r0, #0
    2d80:	ebfff76d 	bl	b3c <draw_background>
            break;
    2d84:	ea000039 	b	2e70 <handle_game_over+0x198>
        case 2 :
            player2_score++;
    2d88:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
    2d8c:	e3403009 	movt	r3, #9
    2d90:	e5933000 	ldr	r3, [r3]
    2d94:	e2832001 	add	r2, r3, #1
    2d98:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
    2d9c:	e3403009 	movt	r3, #9
    2da0:	e5832000 	str	r2, [r3]
            draw_winning_line();
    2da4:	eb000032 	bl	2e74 <draw_winning_line>
            update_txt_canvas(0, 1, INFO_TXT[game_state]);
    2da8:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2dac:	e3403009 	movt	r3, #9
    2db0:	e5932000 	ldr	r2, [r3]
    2db4:	e1a03002 	mov	r3, r2
    2db8:	e1a03083 	lsl	r3, r3, #1
    2dbc:	e0833002 	add	r3, r3, r2
    2dc0:	e1a02183 	lsl	r2, r3, #3
    2dc4:	e0632002 	rsb	r2, r3, r2
    2dc8:	e3043778 	movw	r3, #18296	; 0x4778
    2dcc:	e3403000 	movt	r3, #0
    2dd0:	e0823003 	add	r3, r2, r3
    2dd4:	e3a00000 	mov	r0, #0
    2dd8:	e3a01001 	mov	r1, #1
    2ddc:	e1a02003 	mov	r2, r3
    2de0:	ebfff5c0 	bl	4e8 <update_txt_canvas>
            draw_txt_canvas();
    2de4:	ebfff641 	bl	6f0 <draw_txt_canvas>
            reset_board();
    2de8:	eb000182 	bl	33f8 <reset_board>
            wait_for_correct_one_key(PS2_KEY_CODES[0]);                      // wait for enter
    2dec:	e30437f0 	movw	r3, #18416	; 0x47f0
    2df0:	e3403000 	movt	r3, #0
    2df4:	e5933000 	ldr	r3, [r3]
    2df8:	e1a00003 	mov	r0, r3
    2dfc:	eb000233 	bl	36d0 <wait_for_correct_one_key>
			draw_background(false);
    2e00:	e3a00000 	mov	r0, #0
    2e04:	ebfff74c 	bl	b3c <draw_background>
            break;
    2e08:	ea000018 	b	2e70 <handle_game_over+0x198>
        case 3 :
            update_txt_canvas(0, 1, INFO_TXT[game_state]);
    2e0c:	e30b3fb0 	movw	r3, #49072	; 0xbfb0
    2e10:	e3403009 	movt	r3, #9
    2e14:	e5932000 	ldr	r2, [r3]
    2e18:	e1a03002 	mov	r3, r2
    2e1c:	e1a03083 	lsl	r3, r3, #1
    2e20:	e0833002 	add	r3, r3, r2
    2e24:	e1a02183 	lsl	r2, r3, #3
    2e28:	e0632002 	rsb	r2, r3, r2
    2e2c:	e3043778 	movw	r3, #18296	; 0x4778
    2e30:	e3403000 	movt	r3, #0
    2e34:	e0823003 	add	r3, r2, r3
    2e38:	e3a00000 	mov	r0, #0
    2e3c:	e3a01001 	mov	r1, #1
    2e40:	e1a02003 	mov	r2, r3
    2e44:	ebfff5a7 	bl	4e8 <update_txt_canvas>
            draw_txt_canvas();
    2e48:	ebfff628 	bl	6f0 <draw_txt_canvas>
            reset_board();
    2e4c:	eb000169 	bl	33f8 <reset_board>
            wait_for_correct_one_key(PS2_KEY_CODES[0]);                      // wait for enter
    2e50:	e30437f0 	movw	r3, #18416	; 0x47f0
    2e54:	e3403000 	movt	r3, #0
    2e58:	e5933000 	ldr	r3, [r3]
    2e5c:	e1a00003 	mov	r0, r3
    2e60:	eb00021a 	bl	36d0 <wait_for_correct_one_key>
			draw_background(false);
    2e64:	e3a00000 	mov	r0, #0
    2e68:	ebfff733 	bl	b3c <draw_background>
            break;
    2e6c:	e1a00000 	nop			; (mov r0, r0)
    }
}
    2e70:	e8bd8800 	pop	{r11, pc}

00002e74 <draw_winning_line>:

void draw_winning_line() {
    2e74:	e92d4810 	push	{r4, r11, lr}
    2e78:	e28db008 	add	r11, sp, #8
    2e7c:	e24dd01c 	sub	sp, sp, #28
    int i = 0;
    2e80:	e3a03000 	mov	r3, #0
    2e84:	e50b3010 	str	r3, [r11, #-16]
    switch (win_type) {
    2e88:	e30b3fb4 	movw	r3, #49076	; 0xbfb4
    2e8c:	e3403009 	movt	r3, #9
    2e90:	e5933000 	ldr	r3, [r3]
    2e94:	e2433001 	sub	r3, r3, #1
    2e98:	e3530003 	cmp	r3, #3
    2e9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    2ea0:	ea000151 	b	33ec <draw_winning_line+0x578>
    2ea4:	00002eb4 	.word	0x00002eb4
    2ea8:	00003000 	.word	0x00003000
    2eac:	0000314c 	.word	0x0000314c
    2eb0:	00003298 	.word	0x00003298
        case 1 :        // horizontal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0],
    2eb4:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2eb8:	e3403009 	movt	r3, #9
    2ebc:	e5931000 	ldr	r1, [r3]
    2ec0:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2ec4:	e3403009 	movt	r3, #9
    2ec8:	e5930004 	ldr	r0, [r3, #4]
    2ecc:	e3042468 	movw	r2, #17512	; 0x4468
    2ed0:	e3402000 	movt	r2, #0
    2ed4:	e1a03001 	mov	r3, r1
    2ed8:	e1a03103 	lsl	r3, r3, #2
    2edc:	e0833001 	add	r3, r3, r1
    2ee0:	e1a03083 	lsl	r3, r3, #1
    2ee4:	e0833001 	add	r3, r3, r1
    2ee8:	e0833000 	add	r3, r3, r0
    2eec:	e7920183 	ldr	r0, [r2, r3, lsl #3]
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1] - 1,
    2ef0:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2ef4:	e3403009 	movt	r3, #9
    2ef8:	e5931000 	ldr	r1, [r3]
    2efc:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2f00:	e3403009 	movt	r3, #9
    2f04:	e593c004 	ldr	r12, [r3, #4]
    2f08:	e3042468 	movw	r2, #17512	; 0x4468
    2f0c:	e3402000 	movt	r2, #0
    2f10:	e1a03001 	mov	r3, r1
    2f14:	e1a03103 	lsl	r3, r3, #2
    2f18:	e0833001 	add	r3, r3, r1
    2f1c:	e1a03083 	lsl	r3, r3, #1
    2f20:	e0833001 	add	r3, r3, r1
    2f24:	e083100c 	add	r1, r3, r12
    2f28:	e3a03004 	mov	r3, #4
    2f2c:	e1a01181 	lsl	r1, r1, #3
    2f30:	e0822001 	add	r2, r2, r1
    2f34:	e0823003 	add	r3, r2, r3
    2f38:	e5933000 	ldr	r3, [r3]

void draw_winning_line() {
    int i = 0;
    switch (win_type) {
        case 1 :        // horizontal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0],
    2f3c:	e2434001 	sub	r4, r3, #1
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1] - 1,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0],
    2f40:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2f44:	e3403009 	movt	r3, #9
    2f48:	e5931008 	ldr	r1, [r3, #8]
    2f4c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2f50:	e3403009 	movt	r3, #9
    2f54:	e593c00c 	ldr	r12, [r3, #12]

void draw_winning_line() {
    int i = 0;
    switch (win_type) {
        case 1 :        // horizontal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0],
    2f58:	e3042468 	movw	r2, #17512	; 0x4468
    2f5c:	e3402000 	movt	r2, #0
    2f60:	e1a03001 	mov	r3, r1
    2f64:	e1a03103 	lsl	r3, r3, #2
    2f68:	e0833001 	add	r3, r3, r1
    2f6c:	e1a03083 	lsl	r3, r3, #1
    2f70:	e0833001 	add	r3, r3, r1
    2f74:	e083300c 	add	r3, r3, r12
    2f78:	e792e183 	ldr	lr, [r2, r3, lsl #3]
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1] - 1,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1] - 1,
    2f7c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2f80:	e3403009 	movt	r3, #9
    2f84:	e5931008 	ldr	r1, [r3, #8]
    2f88:	e30b3f98 	movw	r3, #49048	; 0xbf98
    2f8c:	e3403009 	movt	r3, #9
    2f90:	e593c00c 	ldr	r12, [r3, #12]
    2f94:	e3042468 	movw	r2, #17512	; 0x4468
    2f98:	e3402000 	movt	r2, #0
    2f9c:	e1a03001 	mov	r3, r1
    2fa0:	e1a03103 	lsl	r3, r3, #2
    2fa4:	e0833001 	add	r3, r3, r1
    2fa8:	e1a03083 	lsl	r3, r3, #1
    2fac:	e0833001 	add	r3, r3, r1
    2fb0:	e083100c 	add	r1, r3, r12
    2fb4:	e3a03004 	mov	r3, #4
    2fb8:	e1a01181 	lsl	r1, r1, #3
    2fbc:	e0822001 	add	r2, r2, r1
    2fc0:	e0823003 	add	r3, r2, r3
    2fc4:	e5933000 	ldr	r3, [r3]

void draw_winning_line() {
    int i = 0;
    switch (win_type) {
        case 1 :        // horizontal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0],
    2fc8:	e243c001 	sub	r12, r3, #1
    2fcc:	e304374c 	movw	r3, #18252	; 0x474c
    2fd0:	e3403000 	movt	r3, #0
    2fd4:	e5933000 	ldr	r3, [r3]
    2fd8:	e3a02003 	mov	r2, #3
    2fdc:	e58d2000 	str	r2, [sp]
    2fe0:	e58d3004 	str	r3, [sp, #4]
    2fe4:	e3e03000 	mvn	r3, #0
    2fe8:	e58d3008 	str	r3, [sp, #8]
    2fec:	e1a01004 	mov	r1, r4
    2ff0:	e1a0200e 	mov	r2, lr
    2ff4:	e1a0300c 	mov	r3, r12
    2ff8:	ebfff7fb 	bl	fec <draw_line>
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1] - 1,
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
    2ffc:	ea0000f8 	b	33e4 <draw_winning_line+0x570>
        case 2 :        // vertical
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 1,
    3000:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3004:	e3403009 	movt	r3, #9
    3008:	e5931000 	ldr	r1, [r3]
    300c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3010:	e3403009 	movt	r3, #9
    3014:	e5930004 	ldr	r0, [r3, #4]
    3018:	e3042468 	movw	r2, #17512	; 0x4468
    301c:	e3402000 	movt	r2, #0
    3020:	e1a03001 	mov	r3, r1
    3024:	e1a03103 	lsl	r3, r3, #2
    3028:	e0833001 	add	r3, r3, r1
    302c:	e1a03083 	lsl	r3, r3, #1
    3030:	e0833001 	add	r3, r3, r1
    3034:	e0833000 	add	r3, r3, r0
    3038:	e7923183 	ldr	r3, [r2, r3, lsl #3]
    303c:	e2430001 	sub	r0, r3, #1
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
    3040:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3044:	e3403009 	movt	r3, #9
    3048:	e5931000 	ldr	r1, [r3]
    304c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3050:	e3403009 	movt	r3, #9
    3054:	e593c004 	ldr	r12, [r3, #4]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 2 :        // vertical
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 1,
    3058:	e3042468 	movw	r2, #17512	; 0x4468
    305c:	e3402000 	movt	r2, #0
    3060:	e1a03001 	mov	r3, r1
    3064:	e1a03103 	lsl	r3, r3, #2
    3068:	e0833001 	add	r3, r3, r1
    306c:	e1a03083 	lsl	r3, r3, #1
    3070:	e0833001 	add	r3, r3, r1
    3074:	e083100c 	add	r1, r3, r12
    3078:	e3a03004 	mov	r3, #4
    307c:	e1a01181 	lsl	r1, r1, #3
    3080:	e0822001 	add	r2, r2, r1
    3084:	e0823003 	add	r3, r2, r3
    3088:	e5934000 	ldr	r4, [r3]
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 1,
    308c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3090:	e3403009 	movt	r3, #9
    3094:	e5931008 	ldr	r1, [r3, #8]
    3098:	e30b3f98 	movw	r3, #49048	; 0xbf98
    309c:	e3403009 	movt	r3, #9
    30a0:	e593c00c 	ldr	r12, [r3, #12]
    30a4:	e3042468 	movw	r2, #17512	; 0x4468
    30a8:	e3402000 	movt	r2, #0
    30ac:	e1a03001 	mov	r3, r1
    30b0:	e1a03103 	lsl	r3, r3, #2
    30b4:	e0833001 	add	r3, r3, r1
    30b8:	e1a03083 	lsl	r3, r3, #1
    30bc:	e0833001 	add	r3, r3, r1
    30c0:	e083300c 	add	r3, r3, r12
    30c4:	e7923183 	ldr	r3, [r2, r3, lsl #3]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 2 :        // vertical
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 1,
    30c8:	e243e001 	sub	lr, r3, #1
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 1,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
    30cc:	e30b3f98 	movw	r3, #49048	; 0xbf98
    30d0:	e3403009 	movt	r3, #9
    30d4:	e5931008 	ldr	r1, [r3, #8]
    30d8:	e30b3f98 	movw	r3, #49048	; 0xbf98
    30dc:	e3403009 	movt	r3, #9
    30e0:	e593c00c 	ldr	r12, [r3, #12]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 2 :        // vertical
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 1,
    30e4:	e3042468 	movw	r2, #17512	; 0x4468
    30e8:	e3402000 	movt	r2, #0
    30ec:	e1a03001 	mov	r3, r1
    30f0:	e1a03103 	lsl	r3, r3, #2
    30f4:	e0833001 	add	r3, r3, r1
    30f8:	e1a03083 	lsl	r3, r3, #1
    30fc:	e0833001 	add	r3, r3, r1
    3100:	e083100c 	add	r1, r3, r12
    3104:	e3a03004 	mov	r3, #4
    3108:	e1a01181 	lsl	r1, r1, #3
    310c:	e0822001 	add	r2, r2, r1
    3110:	e0823003 	add	r3, r2, r3
    3114:	e593c000 	ldr	r12, [r3]
    3118:	e304374c 	movw	r3, #18252	; 0x474c
    311c:	e3403000 	movt	r3, #0
    3120:	e5933000 	ldr	r3, [r3]
    3124:	e3a02003 	mov	r2, #3
    3128:	e58d2000 	str	r2, [sp]
    312c:	e58d3004 	str	r3, [sp, #4]
    3130:	e3e03000 	mvn	r3, #0
    3134:	e58d3008 	str	r3, [sp, #8]
    3138:	e1a01004 	mov	r1, r4
    313c:	e1a0200e 	mov	r2, lr
    3140:	e1a0300c 	mov	r3, r12
    3144:	ebfff7a8 	bl	fec <draw_line>
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 1,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
    3148:	ea0000a5 	b	33e4 <draw_winning_line+0x570>
        case 3 :        // up diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    314c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3150:	e3403009 	movt	r3, #9
    3154:	e5931000 	ldr	r1, [r3]
    3158:	e30b3f98 	movw	r3, #49048	; 0xbf98
    315c:	e3403009 	movt	r3, #9
    3160:	e5930004 	ldr	r0, [r3, #4]
    3164:	e3042468 	movw	r2, #17512	; 0x4468
    3168:	e3402000 	movt	r2, #0
    316c:	e1a03001 	mov	r3, r1
    3170:	e1a03103 	lsl	r3, r3, #2
    3174:	e0833001 	add	r3, r3, r1
    3178:	e1a03083 	lsl	r3, r3, #1
    317c:	e0833001 	add	r3, r3, r1
    3180:	e0833000 	add	r3, r3, r0
    3184:	e7923183 	ldr	r3, [r2, r3, lsl #3]
    3188:	e2430002 	sub	r0, r3, #2
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
    318c:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3190:	e3403009 	movt	r3, #9
    3194:	e5931000 	ldr	r1, [r3]
    3198:	e30b3f98 	movw	r3, #49048	; 0xbf98
    319c:	e3403009 	movt	r3, #9
    31a0:	e593c004 	ldr	r12, [r3, #4]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 3 :        // up diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    31a4:	e3042468 	movw	r2, #17512	; 0x4468
    31a8:	e3402000 	movt	r2, #0
    31ac:	e1a03001 	mov	r3, r1
    31b0:	e1a03103 	lsl	r3, r3, #2
    31b4:	e0833001 	add	r3, r3, r1
    31b8:	e1a03083 	lsl	r3, r3, #1
    31bc:	e0833001 	add	r3, r3, r1
    31c0:	e083100c 	add	r1, r3, r12
    31c4:	e3a03004 	mov	r3, #4
    31c8:	e1a01181 	lsl	r1, r1, #3
    31cc:	e0822001 	add	r2, r2, r1
    31d0:	e0823003 	add	r3, r2, r3
    31d4:	e5934000 	ldr	r4, [r3]
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
    31d8:	e30b3f98 	movw	r3, #49048	; 0xbf98
    31dc:	e3403009 	movt	r3, #9
    31e0:	e5931008 	ldr	r1, [r3, #8]
    31e4:	e30b3f98 	movw	r3, #49048	; 0xbf98
    31e8:	e3403009 	movt	r3, #9
    31ec:	e593c00c 	ldr	r12, [r3, #12]
    31f0:	e3042468 	movw	r2, #17512	; 0x4468
    31f4:	e3402000 	movt	r2, #0
    31f8:	e1a03001 	mov	r3, r1
    31fc:	e1a03103 	lsl	r3, r3, #2
    3200:	e0833001 	add	r3, r3, r1
    3204:	e1a03083 	lsl	r3, r3, #1
    3208:	e0833001 	add	r3, r3, r1
    320c:	e083300c 	add	r3, r3, r12
    3210:	e7923183 	ldr	r3, [r2, r3, lsl #3]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 3 :        // up diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    3214:	e243e002 	sub	lr, r3, #2
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
    3218:	e30b3f98 	movw	r3, #49048	; 0xbf98
    321c:	e3403009 	movt	r3, #9
    3220:	e5931008 	ldr	r1, [r3, #8]
    3224:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3228:	e3403009 	movt	r3, #9
    322c:	e593c00c 	ldr	r12, [r3, #12]
                      3,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 3 :        // up diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    3230:	e3042468 	movw	r2, #17512	; 0x4468
    3234:	e3402000 	movt	r2, #0
    3238:	e1a03001 	mov	r3, r1
    323c:	e1a03103 	lsl	r3, r3, #2
    3240:	e0833001 	add	r3, r3, r1
    3244:	e1a03083 	lsl	r3, r3, #1
    3248:	e0833001 	add	r3, r3, r1
    324c:	e083100c 	add	r1, r3, r12
    3250:	e3a03004 	mov	r3, #4
    3254:	e1a01181 	lsl	r1, r1, #3
    3258:	e0822001 	add	r2, r2, r1
    325c:	e0823003 	add	r3, r2, r3
    3260:	e593c000 	ldr	r12, [r3]
    3264:	e304374c 	movw	r3, #18252	; 0x474c
    3268:	e3403000 	movt	r3, #0
    326c:	e5933000 	ldr	r3, [r3]
    3270:	e3a02005 	mov	r2, #5
    3274:	e58d2000 	str	r2, [sp]
    3278:	e58d3004 	str	r3, [sp, #4]
    327c:	e3e03000 	mvn	r3, #0
    3280:	e58d3008 	str	r3, [sp, #8]
    3284:	e1a01004 	mov	r1, r4
    3288:	e1a0200e 	mov	r2, lr
    328c:	e1a0300c 	mov	r3, r12
    3290:	ebfff755 	bl	fec <draw_line>
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
    3294:	ea000052 	b	33e4 <draw_winning_line+0x570>
        case 4 :        // down diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    3298:	e30b3f98 	movw	r3, #49048	; 0xbf98
    329c:	e3403009 	movt	r3, #9
    32a0:	e5931000 	ldr	r1, [r3]
    32a4:	e30b3f98 	movw	r3, #49048	; 0xbf98
    32a8:	e3403009 	movt	r3, #9
    32ac:	e5930004 	ldr	r0, [r3, #4]
    32b0:	e3042468 	movw	r2, #17512	; 0x4468
    32b4:	e3402000 	movt	r2, #0
    32b8:	e1a03001 	mov	r3, r1
    32bc:	e1a03103 	lsl	r3, r3, #2
    32c0:	e0833001 	add	r3, r3, r1
    32c4:	e1a03083 	lsl	r3, r3, #1
    32c8:	e0833001 	add	r3, r3, r1
    32cc:	e0833000 	add	r3, r3, r0
    32d0:	e7923183 	ldr	r3, [r2, r3, lsl #3]
    32d4:	e2430002 	sub	r0, r3, #2
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
    32d8:	e30b3f98 	movw	r3, #49048	; 0xbf98
    32dc:	e3403009 	movt	r3, #9
    32e0:	e5931000 	ldr	r1, [r3]
    32e4:	e30b3f98 	movw	r3, #49048	; 0xbf98
    32e8:	e3403009 	movt	r3, #9
    32ec:	e593c004 	ldr	r12, [r3, #4]
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 4 :        // down diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    32f0:	e3042468 	movw	r2, #17512	; 0x4468
    32f4:	e3402000 	movt	r2, #0
    32f8:	e1a03001 	mov	r3, r1
    32fc:	e1a03103 	lsl	r3, r3, #2
    3300:	e0833001 	add	r3, r3, r1
    3304:	e1a03083 	lsl	r3, r3, #1
    3308:	e0833001 	add	r3, r3, r1
    330c:	e083100c 	add	r1, r3, r12
    3310:	e3a03004 	mov	r3, #4
    3314:	e1a01181 	lsl	r1, r1, #3
    3318:	e0822001 	add	r2, r2, r1
    331c:	e0823003 	add	r3, r2, r3
    3320:	e5934000 	ldr	r4, [r3]
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
    3324:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3328:	e3403009 	movt	r3, #9
    332c:	e5931008 	ldr	r1, [r3, #8]
    3330:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3334:	e3403009 	movt	r3, #9
    3338:	e593c00c 	ldr	r12, [r3, #12]
    333c:	e3042468 	movw	r2, #17512	; 0x4468
    3340:	e3402000 	movt	r2, #0
    3344:	e1a03001 	mov	r3, r1
    3348:	e1a03103 	lsl	r3, r3, #2
    334c:	e0833001 	add	r3, r3, r1
    3350:	e1a03083 	lsl	r3, r3, #1
    3354:	e0833001 	add	r3, r3, r1
    3358:	e083300c 	add	r3, r3, r12
    335c:	e7923183 	ldr	r3, [r2, r3, lsl #3]
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 4 :        // down diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    3360:	e243e002 	sub	lr, r3, #2
                      BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][1],
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
    3364:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3368:	e3403009 	movt	r3, #9
    336c:	e5931008 	ldr	r1, [r3, #8]
    3370:	e30b3f98 	movw	r3, #49048	; 0xbf98
    3374:	e3403009 	movt	r3, #9
    3378:	e593c00c 	ldr	r12, [r3, #12]
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        case 4 :        // down diagonal
            draw_line(BOARD_HOLE_LOC[win_line_loc[0][0]][win_line_loc[0][1]][0] - 2,
    337c:	e3042468 	movw	r2, #17512	; 0x4468
    3380:	e3402000 	movt	r2, #0
    3384:	e1a03001 	mov	r3, r1
    3388:	e1a03103 	lsl	r3, r3, #2
    338c:	e0833001 	add	r3, r3, r1
    3390:	e1a03083 	lsl	r3, r3, #1
    3394:	e0833001 	add	r3, r3, r1
    3398:	e083100c 	add	r1, r3, r12
    339c:	e3a03004 	mov	r3, #4
    33a0:	e1a01181 	lsl	r1, r1, #3
    33a4:	e0822001 	add	r2, r2, r1
    33a8:	e0823003 	add	r3, r2, r3
    33ac:	e593c000 	ldr	r12, [r3]
    33b0:	e304374c 	movw	r3, #18252	; 0x474c
    33b4:	e3403000 	movt	r3, #0
    33b8:	e5933000 	ldr	r3, [r3]
    33bc:	e3a02005 	mov	r2, #5
    33c0:	e58d2000 	str	r2, [sp]
    33c4:	e58d3004 	str	r3, [sp, #4]
    33c8:	e3e03000 	mvn	r3, #0
    33cc:	e58d3008 	str	r3, [sp, #8]
    33d0:	e1a01004 	mov	r1, r4
    33d4:	e1a0200e 	mov	r2, lr
    33d8:	e1a0300c 	mov	r3, r12
    33dc:	ebfff702 	bl	fec <draw_line>
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][0] - 2,
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
    33e0:	e1a00000 	nop			; (mov r0, r0)
        default : return;
    }
	draw_canvas();
    33e4:	ebfff48d 	bl	620 <draw_canvas>
    33e8:	ea000000 	b	33f0 <draw_winning_line+0x57c>
                      BOARD_HOLE_LOC[win_line_loc[1][0]][win_line_loc[1][1]][1],
                      5,
                      WIN_LINE_COLOUR,
                      -1);
            break;
        default : return;
    33ec:	e1a00000 	nop			; (mov r0, r0)
    }
	draw_canvas();
}
    33f0:	e24bd008 	sub	sp, r11, #8
    33f4:	e8bd8810 	pop	{r4, r11, pc}

000033f8 <reset_board>:

void reset_board() {
    33f8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    33fc:	e28db000 	add	r11, sp, #0
    3400:	e24dd00c 	sub	sp, sp, #12
    // 1) Clear game chip matrix array
    int x = 0;
    3404:	e3a03000 	mov	r3, #0
    3408:	e50b3008 	str	r3, [r11, #-8]
    int y = 0;
    340c:	e3a03000 	mov	r3, #0
    3410:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < CHIP_COL_NUM; x++)
    3414:	e3a03000 	mov	r3, #0
    3418:	e50b3008 	str	r3, [r11, #-8]
    341c:	ea000018 	b	3484 <reset_board+0x8c>
        for (y = 0; y < CHIP_ROW_NUM; y++)
    3420:	e3a03000 	mov	r3, #0
    3424:	e50b300c 	str	r3, [r11, #-12]
    3428:	ea00000f 	b	346c <reset_board+0x74>
            game_chip_matrix[y][x] = 0;
    342c:	e30b2fc0 	movw	r2, #49088	; 0xbfc0
    3430:	e3402009 	movt	r2, #9
    3434:	e51b100c 	ldr	r1, [r11, #-12]
    3438:	e1a03001 	mov	r3, r1
    343c:	e1a03103 	lsl	r3, r3, #2
    3440:	e0833001 	add	r3, r3, r1
    3444:	e1a03083 	lsl	r3, r3, #1
    3448:	e0833001 	add	r3, r3, r1
    344c:	e51b1008 	ldr	r1, [r11, #-8]
    3450:	e0833001 	add	r3, r3, r1
    3454:	e0823003 	add	r3, r2, r3
    3458:	e3a02000 	mov	r2, #0
    345c:	e5c32000 	strb	r2, [r3]
void reset_board() {
    // 1) Clear game chip matrix array
    int x = 0;
    int y = 0;
    for (x = 0; x < CHIP_COL_NUM; x++)
        for (y = 0; y < CHIP_ROW_NUM; y++)
    3460:	e51b300c 	ldr	r3, [r11, #-12]
    3464:	e2833001 	add	r3, r3, #1
    3468:	e50b300c 	str	r3, [r11, #-12]
    346c:	e51b300c 	ldr	r3, [r11, #-12]
    3470:	e3530006 	cmp	r3, #6
    3474:	daffffec 	ble	342c <reset_board+0x34>

void reset_board() {
    // 1) Clear game chip matrix array
    int x = 0;
    int y = 0;
    for (x = 0; x < CHIP_COL_NUM; x++)
    3478:	e51b3008 	ldr	r3, [r11, #-8]
    347c:	e2833001 	add	r3, r3, #1
    3480:	e50b3008 	str	r3, [r11, #-8]
    3484:	e51b3008 	ldr	r3, [r11, #-8]
    3488:	e353000a 	cmp	r3, #10
    348c:	daffffe3 	ble	3420 <reset_board+0x28>
        for (y = 0; y < CHIP_ROW_NUM; y++)
            game_chip_matrix[y][x] = 0;
    // 2) Reset turn
    is_player1_turn = false;
    3490:	e30c300d 	movw	r3, #49165	; 0xc00d
    3494:	e3403009 	movt	r3, #9
    3498:	e3a02000 	mov	r2, #0
    349c:	e5c32000 	strb	r2, [r3]
    is_forfeit_game = false;
    34a0:	e30c300f 	movw	r3, #49167	; 0xc00f
    34a4:	e3403009 	movt	r3, #9
    34a8:	e3a02000 	mov	r2, #0
    34ac:	e5c32000 	strb	r2, [r3]
    // 3) If any player's score is greater than 99, reset score
    if (player1_score > 99 || player2_score > 99) {
    34b0:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
    34b4:	e3403009 	movt	r3, #9
    34b8:	e5933000 	ldr	r3, [r3]
    34bc:	e3530063 	cmp	r3, #99	; 0x63
    34c0:	ca000004 	bgt	34d8 <reset_board+0xe0>
    34c4:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
    34c8:	e3403009 	movt	r3, #9
    34cc:	e5933000 	ldr	r3, [r3]
    34d0:	e3530063 	cmp	r3, #99	; 0x63
    34d4:	da000007 	ble	34f8 <reset_board+0x100>
        player1_score = 0;
    34d8:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
    34dc:	e3403009 	movt	r3, #9
    34e0:	e3a02000 	mov	r2, #0
    34e4:	e5832000 	str	r2, [r3]
        player2_score = 0;
    34e8:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
    34ec:	e3403009 	movt	r3, #9
    34f0:	e3a02000 	mov	r2, #0
    34f4:	e5832000 	str	r2, [r3]
    }
}
    34f8:	e28bd000 	add	sp, r11, #0
    34fc:	e8bd0800 	ldmfd	sp!, {r11}
    3500:	e12fff1e 	bx	lr

00003504 <reset_game>:

void reset_game() {
    3504:	e92d4800 	push	{r11, lr}
    3508:	e28db004 	add	r11, sp, #4
    // 1) Reset variables
    player1_score = 0;
    350c:	e30b3fb8 	movw	r3, #49080	; 0xbfb8
    3510:	e3403009 	movt	r3, #9
    3514:	e3a02000 	mov	r2, #0
    3518:	e5832000 	str	r2, [r3]
    player2_score = 0;
    351c:	e30b3fbc 	movw	r3, #49084	; 0xbfbc
    3520:	e3403009 	movt	r3, #9
    3524:	e3a02000 	mov	r2, #0
    3528:	e5832000 	str	r2, [r3]
    is_reset_game = false;
    352c:	e30c300e 	movw	r3, #49166	; 0xc00e
    3530:	e3403009 	movt	r3, #9
    3534:	e3a02000 	mov	r2, #0
    3538:	e5c32000 	strb	r2, [r3]
    // 2) Reset board
    reset_board();
    353c:	ebffffad 	bl	33f8 <reset_board>
}
    3540:	e8bd8800 	pop	{r11, pc}

00003544 <wait_for_keyb>:



// E. Control
int wait_for_keyb() {
    3544:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    3548:	e28db000 	add	r11, sp, #0
    354c:	e24dd014 	sub	sp, sp, #20
    // 1) Store keyboard codes
    int PS2_data, RVALID, current_key;
    while (true) {
        PS2_data = *(PS2_ptr);                          // read the Data register in the PS/2 port
    3550:	e3043878 	movw	r3, #18552	; 0x4878
    3554:	e3403000 	movt	r3, #0
    3558:	e5933000 	ldr	r3, [r3]
    355c:	e5933000 	ldr	r3, [r3]
    3560:	e50b3008 	str	r3, [r11, #-8]
        RVALID = PS2_data & 0x8000;                     // extract the RVALID field
    3564:	e51b3008 	ldr	r3, [r11, #-8]
    3568:	e2033902 	and	r3, r3, #32768	; 0x8000
    356c:	e50b300c 	str	r3, [r11, #-12]
        if (RVALID) {
    3570:	e51b300c 	ldr	r3, [r11, #-12]
    3574:	e3530000 	cmp	r3, #0
    3578:	0a000010 	beq	35c0 <wait_for_keyb+0x7c>
            /* shift the next data byte into the display */
            byte1 = byte2;
    357c:	e30c3015 	movw	r3, #49173	; 0xc015
    3580:	e3403009 	movt	r3, #9
    3584:	e5d32000 	ldrb	r2, [r3]
    3588:	e30c3014 	movw	r3, #49172	; 0xc014
    358c:	e3403009 	movt	r3, #9
    3590:	e5c32000 	strb	r2, [r3]
            byte2 = byte3;
    3594:	e30c3016 	movw	r3, #49174	; 0xc016
    3598:	e3403009 	movt	r3, #9
    359c:	e5d32000 	ldrb	r2, [r3]
    35a0:	e30c3015 	movw	r3, #49173	; 0xc015
    35a4:	e3403009 	movt	r3, #9
    35a8:	e5c32000 	strb	r2, [r3]
            byte3 = PS2_data & 0xFF;
    35ac:	e51b3008 	ldr	r3, [r11, #-8]
    35b0:	e6ef2073 	uxtb	r2, r3
    35b4:	e30c3016 	movw	r3, #49174	; 0xc016
    35b8:	e3403009 	movt	r3, #9
    35bc:	e5c32000 	strb	r2, [r3]
        }
        // 1.1) Translate to a single code
        current_key = (byte3 << 16) | (byte2 << 8) | byte3;
    35c0:	e30c3016 	movw	r3, #49174	; 0xc016
    35c4:	e3403009 	movt	r3, #9
    35c8:	e5d33000 	ldrb	r3, [r3]
    35cc:	e1a02803 	lsl	r2, r3, #16
    35d0:	e30c3015 	movw	r3, #49173	; 0xc015
    35d4:	e3403009 	movt	r3, #9
    35d8:	e5d33000 	ldrb	r3, [r3]
    35dc:	e1a03403 	lsl	r3, r3, #8
    35e0:	e1822003 	orr	r2, r2, r3
    35e4:	e30c3016 	movw	r3, #49174	; 0xc016
    35e8:	e3403009 	movt	r3, #9
    35ec:	e5d33000 	ldrb	r3, [r3]
    35f0:	e1823003 	orr	r3, r2, r3
    35f4:	e50b3010 	str	r3, [r11, #-16]
		return current_key;
    35f8:	e51b3010 	ldr	r3, [r11, #-16]
    }
}
    35fc:	e1a00003 	mov	r0, r3
    3600:	e28bd000 	add	sp, r11, #0
    3604:	e8bd0800 	ldmfd	sp!, {r11}
    3608:	e12fff1e 	bx	lr

0000360c <wait_for_correct_key>:

int wait_for_correct_key(const int* expected_keys) {
    360c:	e92d4800 	push	{r11, lr}
    3610:	e28db004 	add	r11, sp, #4
    3614:	e24dd010 	sub	sp, sp, #16
    3618:	e50b0010 	str	r0, [r11, #-16]
    *(PS2_ptr) = 0xFF;                          // reset keyboard
    361c:	e3043878 	movw	r3, #18552	; 0x4878
    3620:	e3403000 	movt	r3, #0
    3624:	e5933000 	ldr	r3, [r3]
    3628:	e3a020ff 	mov	r2, #255	; 0xff
    362c:	e5832000 	str	r2, [r3]
    *(PS2_ptr) = 0xF4;                          // enable keyboard input
    3630:	e3043878 	movw	r3, #18552	; 0x4878
    3634:	e3403000 	movt	r3, #0
    3638:	e5933000 	ldr	r3, [r3]
    363c:	e3a020f4 	mov	r2, #244	; 0xf4
    3640:	e5832000 	str	r2, [r3]
    while (true) {
		int i = 0;
    3644:	e3a03000 	mov	r3, #0
    3648:	e50b3008 	str	r3, [r11, #-8]
        int key = wait_for_keyb();
    364c:	ebffffbc 	bl	3544 <wait_for_keyb>
    3650:	e50b000c 	str	r0, [r11, #-12]
        while (expected_keys[i] != 0x0) {
    3654:	ea000012 	b	36a4 <wait_for_correct_key+0x98>
            if (key == expected_keys[i]) {
    3658:	e51b3008 	ldr	r3, [r11, #-8]
    365c:	e1a03103 	lsl	r3, r3, #2
    3660:	e51b2010 	ldr	r2, [r11, #-16]
    3664:	e0823003 	add	r3, r2, r3
    3668:	e5932000 	ldr	r2, [r3]
    366c:	e51b300c 	ldr	r3, [r11, #-12]
    3670:	e1520003 	cmp	r2, r3
    3674:	1a000007 	bne	3698 <wait_for_correct_key+0x8c>
				reset_key_bytes();
    3678:	eb000032 	bl	3748 <reset_key_bytes>
                *(PS2_ptr) = 0xF5;              // disable keyboard input
    367c:	e3043878 	movw	r3, #18552	; 0x4878
    3680:	e3403000 	movt	r3, #0
    3684:	e5933000 	ldr	r3, [r3]
    3688:	e3a020f5 	mov	r2, #245	; 0xf5
    368c:	e5832000 	str	r2, [r3]
                return i;
    3690:	e51b3008 	ldr	r3, [r11, #-8]
    3694:	ea00000a 	b	36c4 <wait_for_correct_key+0xb8>
			}
			i++;
    3698:	e51b3008 	ldr	r3, [r11, #-8]
    369c:	e2833001 	add	r3, r3, #1
    36a0:	e50b3008 	str	r3, [r11, #-8]
    *(PS2_ptr) = 0xFF;                          // reset keyboard
    *(PS2_ptr) = 0xF4;                          // enable keyboard input
    while (true) {
		int i = 0;
        int key = wait_for_keyb();
        while (expected_keys[i] != 0x0) {
    36a4:	e51b3008 	ldr	r3, [r11, #-8]
    36a8:	e1a03103 	lsl	r3, r3, #2
    36ac:	e51b2010 	ldr	r2, [r11, #-16]
    36b0:	e0823003 	add	r3, r2, r3
    36b4:	e5933000 	ldr	r3, [r3]
    36b8:	e3530000 	cmp	r3, #0
    36bc:	1affffe5 	bne	3658 <wait_for_correct_key+0x4c>
                *(PS2_ptr) = 0xF5;              // disable keyboard input
                return i;
			}
			i++;
        }
    }
    36c0:	eaffffdf 	b	3644 <wait_for_correct_key+0x38>
}
    36c4:	e1a00003 	mov	r0, r3
    36c8:	e24bd004 	sub	sp, r11, #4
    36cc:	e8bd8800 	pop	{r11, pc}

000036d0 <wait_for_correct_one_key>:

void wait_for_correct_one_key(const int expected_key) {
    36d0:	e92d4800 	push	{r11, lr}
    36d4:	e28db004 	add	r11, sp, #4
    36d8:	e24dd008 	sub	sp, sp, #8
    36dc:	e50b0008 	str	r0, [r11, #-8]
    *(PS2_ptr) = 0xFF;                          // reset keyboard
    36e0:	e3043878 	movw	r3, #18552	; 0x4878
    36e4:	e3403000 	movt	r3, #0
    36e8:	e5933000 	ldr	r3, [r3]
    36ec:	e3a020ff 	mov	r2, #255	; 0xff
    36f0:	e5832000 	str	r2, [r3]
    *(PS2_ptr) = 0xF4;                          // enable keyboard input
    36f4:	e3043878 	movw	r3, #18552	; 0x4878
    36f8:	e3403000 	movt	r3, #0
    36fc:	e5933000 	ldr	r3, [r3]
    3700:	e3a020f4 	mov	r2, #244	; 0xf4
    3704:	e5832000 	str	r2, [r3]
    3708:	ea000000 	b	3710 <wait_for_correct_one_key+0x40>
		if (expected_key == wait_for_keyb()) {
			reset_key_bytes();
            *(PS2_ptr) = 0xF5;                  // disable keyboard input
			return;
		}
    }
    370c:	e1a00000 	nop			; (mov r0, r0)

void wait_for_correct_one_key(const int expected_key) {
    *(PS2_ptr) = 0xFF;                          // reset keyboard
    *(PS2_ptr) = 0xF4;                          // enable keyboard input
	while (true) {
		if (expected_key == wait_for_keyb()) {
    3710:	ebffff8b 	bl	3544 <wait_for_keyb>
    3714:	e1a02000 	mov	r2, r0
    3718:	e51b3008 	ldr	r3, [r11, #-8]
    371c:	e1520003 	cmp	r2, r3
    3720:	1afffff9 	bne	370c <wait_for_correct_one_key+0x3c>
			reset_key_bytes();
    3724:	eb000007 	bl	3748 <reset_key_bytes>
            *(PS2_ptr) = 0xF5;                  // disable keyboard input
    3728:	e3043878 	movw	r3, #18552	; 0x4878
    372c:	e3403000 	movt	r3, #0
    3730:	e5933000 	ldr	r3, [r3]
    3734:	e3a020f5 	mov	r2, #245	; 0xf5
    3738:	e5832000 	str	r2, [r3]
			return;
    373c:	e1a00000 	nop			; (mov r0, r0)
		}
    }
}
    3740:	e24bd004 	sub	sp, r11, #4
    3744:	e8bd8800 	pop	{r11, pc}

00003748 <reset_key_bytes>:

void reset_key_bytes() {
    3748:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    374c:	e28db000 	add	r11, sp, #0
	byte1 = 0;
    3750:	e30c3014 	movw	r3, #49172	; 0xc014
    3754:	e3403009 	movt	r3, #9
    3758:	e3a02000 	mov	r2, #0
    375c:	e5c32000 	strb	r2, [r3]
	byte2 = 0;
    3760:	e30c3015 	movw	r3, #49173	; 0xc015
    3764:	e3403009 	movt	r3, #9
    3768:	e3a02000 	mov	r2, #0
    376c:	e5c32000 	strb	r2, [r3]
	byte3 = 0;
    3770:	e30c3016 	movw	r3, #49174	; 0xc016
    3774:	e3403009 	movt	r3, #9
    3778:	e3a02000 	mov	r2, #0
    377c:	e5c32000 	strb	r2, [r3]
}
    3780:	e28bd000 	add	sp, r11, #0
    3784:	e8bd0800 	ldmfd	sp!, {r11}
    3788:	e12fff1e 	bx	lr

0000378c <mov_preview_chip_col>:

int mov_preview_chip_col(int current_col, int increment_val) {
    378c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    3790:	e28db000 	add	r11, sp, #0
    3794:	e24dd00c 	sub	sp, sp, #12
    3798:	e50b0008 	str	r0, [r11, #-8]
    379c:	e50b100c 	str	r1, [r11, #-12]
    current_col += increment_val;
    37a0:	e51b2008 	ldr	r2, [r11, #-8]
    37a4:	e51b300c 	ldr	r3, [r11, #-12]
    37a8:	e0823003 	add	r3, r2, r3
    37ac:	e50b3008 	str	r3, [r11, #-8]
    if      (current_col < 0)                   current_col = CHIP_COL_NUM + current_col;
    37b0:	e51b3008 	ldr	r3, [r11, #-8]
    37b4:	e3530000 	cmp	r3, #0
    37b8:	aa000003 	bge	37cc <mov_preview_chip_col+0x40>
    37bc:	e51b3008 	ldr	r3, [r11, #-8]
    37c0:	e283300b 	add	r3, r3, #11
    37c4:	e50b3008 	str	r3, [r11, #-8]
    else if (current_col >= CHIP_COL_NUM)       current_col %= CHIP_COL_NUM;
    while (game_chip_matrix[0][current_col] != 0) {
    37c8:	ea000034 	b	38a0 <mov_preview_chip_col+0x114>
}

int mov_preview_chip_col(int current_col, int increment_val) {
    current_col += increment_val;
    if      (current_col < 0)                   current_col = CHIP_COL_NUM + current_col;
    else if (current_col >= CHIP_COL_NUM)       current_col %= CHIP_COL_NUM;
    37cc:	e51b3008 	ldr	r3, [r11, #-8]
    37d0:	e353000a 	cmp	r3, #10
    37d4:	da000031 	ble	38a0 <mov_preview_chip_col+0x114>
    37d8:	e51b2008 	ldr	r2, [r11, #-8]
    37dc:	e30a32e9 	movw	r3, #41705	; 0xa2e9
    37e0:	e3423e8b 	movt	r3, #11915	; 0x2e8b
    37e4:	e0c31293 	smull	r1, r3, r3, r2
    37e8:	e1a010c3 	asr	r1, r3, #1
    37ec:	e1a03fc2 	asr	r3, r2, #31
    37f0:	e0631001 	rsb	r1, r3, r1
    37f4:	e1a03001 	mov	r3, r1
    37f8:	e1a03103 	lsl	r3, r3, #2
    37fc:	e0833001 	add	r3, r3, r1
    3800:	e1a03083 	lsl	r3, r3, #1
    3804:	e0833001 	add	r3, r3, r1
    3808:	e0633002 	rsb	r3, r3, r2
    380c:	e50b3008 	str	r3, [r11, #-8]
    while (game_chip_matrix[0][current_col] != 0) {
    3810:	ea000022 	b	38a0 <mov_preview_chip_col+0x114>
        if (increment_val >= 0)                 current_col += 1;
    3814:	e51b300c 	ldr	r3, [r11, #-12]
    3818:	e3530000 	cmp	r3, #0
    381c:	ba000003 	blt	3830 <mov_preview_chip_col+0xa4>
    3820:	e51b3008 	ldr	r3, [r11, #-8]
    3824:	e2833001 	add	r3, r3, #1
    3828:	e50b3008 	str	r3, [r11, #-8]
    382c:	ea000002 	b	383c <mov_preview_chip_col+0xb0>
        else                                    current_col -= 1;
    3830:	e51b3008 	ldr	r3, [r11, #-8]
    3834:	e2433001 	sub	r3, r3, #1
    3838:	e50b3008 	str	r3, [r11, #-8]
        if      (current_col < 0)               current_col = CHIP_COL_NUM + current_col;
    383c:	e51b3008 	ldr	r3, [r11, #-8]
    3840:	e3530000 	cmp	r3, #0
    3844:	aa000003 	bge	3858 <mov_preview_chip_col+0xcc>
    3848:	e51b3008 	ldr	r3, [r11, #-8]
    384c:	e283300b 	add	r3, r3, #11
    3850:	e50b3008 	str	r3, [r11, #-8]
    3854:	ea000012 	b	38a4 <mov_preview_chip_col+0x118>
        else if (current_col >= CHIP_COL_NUM)   current_col %= CHIP_COL_NUM;
    3858:	e51b3008 	ldr	r3, [r11, #-8]
    385c:	e353000a 	cmp	r3, #10
    3860:	da00000f 	ble	38a4 <mov_preview_chip_col+0x118>
    3864:	e51b2008 	ldr	r2, [r11, #-8]
    3868:	e30a32e9 	movw	r3, #41705	; 0xa2e9
    386c:	e3423e8b 	movt	r3, #11915	; 0x2e8b
    3870:	e0c31293 	smull	r1, r3, r3, r2
    3874:	e1a010c3 	asr	r1, r3, #1
    3878:	e1a03fc2 	asr	r3, r2, #31
    387c:	e0631001 	rsb	r1, r3, r1
    3880:	e1a03001 	mov	r3, r1
    3884:	e1a03103 	lsl	r3, r3, #2
    3888:	e0833001 	add	r3, r3, r1
    388c:	e1a03083 	lsl	r3, r3, #1
    3890:	e0833001 	add	r3, r3, r1
    3894:	e0633002 	rsb	r3, r3, r2
    3898:	e50b3008 	str	r3, [r11, #-8]
    389c:	ea000000 	b	38a4 <mov_preview_chip_col+0x118>

int mov_preview_chip_col(int current_col, int increment_val) {
    current_col += increment_val;
    if      (current_col < 0)                   current_col = CHIP_COL_NUM + current_col;
    else if (current_col >= CHIP_COL_NUM)       current_col %= CHIP_COL_NUM;
    while (game_chip_matrix[0][current_col] != 0) {
    38a0:	e1a00000 	nop			; (mov r0, r0)
    38a4:	e30b3fc0 	movw	r3, #49088	; 0xbfc0
    38a8:	e3403009 	movt	r3, #9
    38ac:	e51b2008 	ldr	r2, [r11, #-8]
    38b0:	e0833002 	add	r3, r3, r2
    38b4:	e5d33000 	ldrb	r3, [r3]
    38b8:	e3530000 	cmp	r3, #0
    38bc:	1affffd4 	bne	3814 <mov_preview_chip_col+0x88>
        if (increment_val >= 0)                 current_col += 1;
        else                                    current_col -= 1;
        if      (current_col < 0)               current_col = CHIP_COL_NUM + current_col;
        else if (current_col >= CHIP_COL_NUM)   current_col %= CHIP_COL_NUM;
    }
    return current_col;
    38c0:	e51b3008 	ldr	r3, [r11, #-8]
}
    38c4:	e1a00003 	mov	r0, r3
    38c8:	e28bd000 	add	sp, r11, #0
    38cc:	e8bd0800 	ldmfd	sp!, {r11}
    38d0:	e12fff1e 	bx	lr

000038d4 <__aeabi_drsub>:
    38d4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    38d8:	ea000000 	b	38e0 <__adddf3>

000038dc <__aeabi_dsub>:
    38dc:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000038e0 <__adddf3>:
    38e0:	e92d4030 	push	{r4, r5, lr}
    38e4:	e1a04081 	lsl	r4, r1, #1
    38e8:	e1a05083 	lsl	r5, r3, #1
    38ec:	e1340005 	teq	r4, r5
    38f0:	01300002 	teqeq	r0, r2
    38f4:	1194c000 	orrsne	r12, r4, r0
    38f8:	1195c002 	orrsne	r12, r5, r2
    38fc:	11f0cac4 	mvnsne	r12, r4, asr #21
    3900:	11f0cac5 	mvnsne	r12, r5, asr #21
    3904:	0a00008c 	beq	3b3c <__adddf3+0x25c>
    3908:	e1a04aa4 	lsr	r4, r4, #21
    390c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    3910:	b2655000 	rsblt	r5, r5, #0
    3914:	da000006 	ble	3934 <__adddf3+0x54>
    3918:	e0844005 	add	r4, r4, r5
    391c:	e0202002 	eor	r2, r0, r2
    3920:	e0213003 	eor	r3, r1, r3
    3924:	e0220000 	eor	r0, r2, r0
    3928:	e0231001 	eor	r1, r3, r1
    392c:	e0202002 	eor	r2, r0, r2
    3930:	e0213003 	eor	r3, r1, r3
    3934:	e3550036 	cmp	r5, #54	; 0x36
    3938:	88bd4030 	pophi	{r4, r5, lr}
    393c:	812fff1e 	bxhi	lr
    3940:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    3944:	e1a01601 	lsl	r1, r1, #12
    3948:	e3a0c601 	mov	r12, #1048576	; 0x100000
    394c:	e18c1621 	orr	r1, r12, r1, lsr #12
    3950:	0a000001 	beq	395c <__adddf3+0x7c>
    3954:	e2700000 	rsbs	r0, r0, #0
    3958:	e2e11000 	rsc	r1, r1, #0
    395c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    3960:	e1a03603 	lsl	r3, r3, #12
    3964:	e18c3623 	orr	r3, r12, r3, lsr #12
    3968:	0a000001 	beq	3974 <__adddf3+0x94>
    396c:	e2722000 	rsbs	r2, r2, #0
    3970:	e2e33000 	rsc	r3, r3, #0
    3974:	e1340005 	teq	r4, r5
    3978:	0a000069 	beq	3b24 <__adddf3+0x244>
    397c:	e2444001 	sub	r4, r4, #1
    3980:	e275e020 	rsbs	lr, r5, #32
    3984:	ba000005 	blt	39a0 <__adddf3+0xc0>
    3988:	e1a0ce12 	lsl	r12, r2, lr
    398c:	e0900532 	adds	r0, r0, r2, lsr r5
    3990:	e2a11000 	adc	r1, r1, #0
    3994:	e0900e13 	adds	r0, r0, r3, lsl lr
    3998:	e0b11553 	adcs	r1, r1, r3, asr r5
    399c:	ea000006 	b	39bc <__adddf3+0xdc>
    39a0:	e2455020 	sub	r5, r5, #32
    39a4:	e28ee020 	add	lr, lr, #32
    39a8:	e3520001 	cmp	r2, #1
    39ac:	e1a0ce13 	lsl	r12, r3, lr
    39b0:	238cc002 	orrcs	r12, r12, #2
    39b4:	e0900553 	adds	r0, r0, r3, asr r5
    39b8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    39bc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    39c0:	5a000002 	bpl	39d0 <__adddf3+0xf0>
    39c4:	e27cc000 	rsbs	r12, r12, #0
    39c8:	e2f00000 	rscs	r0, r0, #0
    39cc:	e2e11000 	rsc	r1, r1, #0
    39d0:	e3510601 	cmp	r1, #1048576	; 0x100000
    39d4:	3a00000f 	bcc	3a18 <__adddf3+0x138>
    39d8:	e3510602 	cmp	r1, #2097152	; 0x200000
    39dc:	3a000006 	bcc	39fc <__adddf3+0x11c>
    39e0:	e1b010a1 	lsrs	r1, r1, #1
    39e4:	e1b00060 	rrxs	r0, r0
    39e8:	e1a0c06c 	rrx	r12, r12
    39ec:	e2844001 	add	r4, r4, #1
    39f0:	e1a02a84 	lsl	r2, r4, #21
    39f4:	e3720501 	cmn	r2, #4194304	; 0x400000
    39f8:	2a00006b 	bcs	3bac <__adddf3+0x2cc>
    39fc:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    3a00:	01b0c0a0 	lsrseq	r12, r0, #1
    3a04:	e2b00000 	adcs	r0, r0, #0
    3a08:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3a0c:	e1811005 	orr	r1, r1, r5
    3a10:	e8bd4030 	pop	{r4, r5, lr}
    3a14:	e12fff1e 	bx	lr
    3a18:	e1b0c08c 	lsls	r12, r12, #1
    3a1c:	e0b00000 	adcs	r0, r0, r0
    3a20:	e0a11001 	adc	r1, r1, r1
    3a24:	e3110601 	tst	r1, #1048576	; 0x100000
    3a28:	e2444001 	sub	r4, r4, #1
    3a2c:	1afffff2 	bne	39fc <__adddf3+0x11c>
    3a30:	e3310000 	teq	r1, #0
    3a34:	13a03014 	movne	r3, #20
    3a38:	03a03034 	moveq	r3, #52	; 0x34
    3a3c:	01a01000 	moveq	r1, r0
    3a40:	03a00000 	moveq	r0, #0
    3a44:	e1a02001 	mov	r2, r1
    3a48:	e3520801 	cmp	r2, #65536	; 0x10000
    3a4c:	21a02822 	lsrcs	r2, r2, #16
    3a50:	22433010 	subcs	r3, r3, #16
    3a54:	e3520c01 	cmp	r2, #256	; 0x100
    3a58:	21a02422 	lsrcs	r2, r2, #8
    3a5c:	22433008 	subcs	r3, r3, #8
    3a60:	e3520010 	cmp	r2, #16
    3a64:	21a02222 	lsrcs	r2, r2, #4
    3a68:	22433004 	subcs	r3, r3, #4
    3a6c:	e3520004 	cmp	r2, #4
    3a70:	22433002 	subcs	r3, r3, #2
    3a74:	304330a2 	subcc	r3, r3, r2, lsr #1
    3a78:	e04331a2 	sub	r3, r3, r2, lsr #3
    3a7c:	e2532020 	subs	r2, r3, #32
    3a80:	aa000007 	bge	3aa4 <__adddf3+0x1c4>
    3a84:	e292200c 	adds	r2, r2, #12
    3a88:	da000004 	ble	3aa0 <__adddf3+0x1c0>
    3a8c:	e282c014 	add	r12, r2, #20
    3a90:	e262200c 	rsb	r2, r2, #12
    3a94:	e1a00c11 	lsl	r0, r1, r12
    3a98:	e1a01231 	lsr	r1, r1, r2
    3a9c:	ea000004 	b	3ab4 <__adddf3+0x1d4>
    3aa0:	e2822014 	add	r2, r2, #20
    3aa4:	d262c020 	rsble	r12, r2, #32
    3aa8:	e1a01211 	lsl	r1, r1, r2
    3aac:	d1811c30 	orrle	r1, r1, r0, lsr r12
    3ab0:	d1a00210 	lslle	r0, r0, r2
    3ab4:	e0544003 	subs	r4, r4, r3
    3ab8:	a0811a04 	addge	r1, r1, r4, lsl #20
    3abc:	a1811005 	orrge	r1, r1, r5
    3ac0:	a8bd4030 	popge	{r4, r5, lr}
    3ac4:	a12fff1e 	bxge	lr
    3ac8:	e1e04004 	mvn	r4, r4
    3acc:	e254401f 	subs	r4, r4, #31
    3ad0:	aa00000f 	bge	3b14 <__adddf3+0x234>
    3ad4:	e294400c 	adds	r4, r4, #12
    3ad8:	ca000006 	bgt	3af8 <__adddf3+0x218>
    3adc:	e2844014 	add	r4, r4, #20
    3ae0:	e2642020 	rsb	r2, r4, #32
    3ae4:	e1a00430 	lsr	r0, r0, r4
    3ae8:	e1800211 	orr	r0, r0, r1, lsl r2
    3aec:	e1851431 	orr	r1, r5, r1, lsr r4
    3af0:	e8bd4030 	pop	{r4, r5, lr}
    3af4:	e12fff1e 	bx	lr
    3af8:	e264400c 	rsb	r4, r4, #12
    3afc:	e2642020 	rsb	r2, r4, #32
    3b00:	e1a00230 	lsr	r0, r0, r2
    3b04:	e1800411 	orr	r0, r0, r1, lsl r4
    3b08:	e1a01005 	mov	r1, r5
    3b0c:	e8bd4030 	pop	{r4, r5, lr}
    3b10:	e12fff1e 	bx	lr
    3b14:	e1a00431 	lsr	r0, r1, r4
    3b18:	e1a01005 	mov	r1, r5
    3b1c:	e8bd4030 	pop	{r4, r5, lr}
    3b20:	e12fff1e 	bx	lr
    3b24:	e3340000 	teq	r4, #0
    3b28:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    3b2c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    3b30:	02844001 	addeq	r4, r4, #1
    3b34:	12455001 	subne	r5, r5, #1
    3b38:	eaffff8f 	b	397c <__adddf3+0x9c>
    3b3c:	e1f0cac4 	mvns	r12, r4, asr #21
    3b40:	11f0cac5 	mvnsne	r12, r5, asr #21
    3b44:	0a00001d 	beq	3bc0 <__adddf3+0x2e0>
    3b48:	e1340005 	teq	r4, r5
    3b4c:	01300002 	teqeq	r0, r2
    3b50:	0a000004 	beq	3b68 <__adddf3+0x288>
    3b54:	e194c000 	orrs	r12, r4, r0
    3b58:	01a01003 	moveq	r1, r3
    3b5c:	01a00002 	moveq	r0, r2
    3b60:	e8bd4030 	pop	{r4, r5, lr}
    3b64:	e12fff1e 	bx	lr
    3b68:	e1310003 	teq	r1, r3
    3b6c:	13a01000 	movne	r1, #0
    3b70:	13a00000 	movne	r0, #0
    3b74:	18bd4030 	popne	{r4, r5, lr}
    3b78:	112fff1e 	bxne	lr
    3b7c:	e1b0caa4 	lsrs	r12, r4, #21
    3b80:	1a000004 	bne	3b98 <__adddf3+0x2b8>
    3b84:	e1b00080 	lsls	r0, r0, #1
    3b88:	e0b11001 	adcs	r1, r1, r1
    3b8c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    3b90:	e8bd4030 	pop	{r4, r5, lr}
    3b94:	e12fff1e 	bx	lr
    3b98:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    3b9c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    3ba0:	38bd4030 	popcc	{r4, r5, lr}
    3ba4:	312fff1e 	bxcc	lr
    3ba8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3bac:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    3bb0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    3bb4:	e3a00000 	mov	r0, #0
    3bb8:	e8bd4030 	pop	{r4, r5, lr}
    3bbc:	e12fff1e 	bx	lr
    3bc0:	e1f0cac4 	mvns	r12, r4, asr #21
    3bc4:	11a01003 	movne	r1, r3
    3bc8:	11a00002 	movne	r0, r2
    3bcc:	01f0cac5 	mvnseq	r12, r5, asr #21
    3bd0:	11a03001 	movne	r3, r1
    3bd4:	11a02000 	movne	r2, r0
    3bd8:	e1904601 	orrs	r4, r0, r1, lsl #12
    3bdc:	01925603 	orrseq	r5, r2, r3, lsl #12
    3be0:	01310003 	teqeq	r1, r3
    3be4:	13811702 	orrne	r1, r1, #524288	; 0x80000
    3be8:	e8bd4030 	pop	{r4, r5, lr}
    3bec:	e12fff1e 	bx	lr

00003bf0 <__aeabi_ui2d>:
    3bf0:	e3300000 	teq	r0, #0
    3bf4:	03a01000 	moveq	r1, #0
    3bf8:	012fff1e 	bxeq	lr
    3bfc:	e92d4030 	push	{r4, r5, lr}
    3c00:	e3a04b01 	mov	r4, #1024	; 0x400
    3c04:	e2844032 	add	r4, r4, #50	; 0x32
    3c08:	e3a05000 	mov	r5, #0
    3c0c:	e3a01000 	mov	r1, #0
    3c10:	eaffff86 	b	3a30 <__adddf3+0x150>

00003c14 <__aeabi_i2d>:
    3c14:	e3300000 	teq	r0, #0
    3c18:	03a01000 	moveq	r1, #0
    3c1c:	012fff1e 	bxeq	lr
    3c20:	e92d4030 	push	{r4, r5, lr}
    3c24:	e3a04b01 	mov	r4, #1024	; 0x400
    3c28:	e2844032 	add	r4, r4, #50	; 0x32
    3c2c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    3c30:	42600000 	rsbmi	r0, r0, #0
    3c34:	e3a01000 	mov	r1, #0
    3c38:	eaffff7c 	b	3a30 <__adddf3+0x150>

00003c3c <__aeabi_f2d>:
    3c3c:	e1b02080 	lsls	r2, r0, #1
    3c40:	e1a011c2 	asr	r1, r2, #3
    3c44:	e1a01061 	rrx	r1, r1
    3c48:	e1a00e02 	lsl	r0, r2, #28
    3c4c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    3c50:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    3c54:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    3c58:	112fff1e 	bxne	lr
    3c5c:	e3320000 	teq	r2, #0
    3c60:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    3c64:	012fff1e 	bxeq	lr
    3c68:	e92d4030 	push	{r4, r5, lr}
    3c6c:	e3a04d0e 	mov	r4, #896	; 0x380
    3c70:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3c74:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    3c78:	eaffff6c 	b	3a30 <__adddf3+0x150>

00003c7c <__aeabi_ul2d>:
    3c7c:	e1902001 	orrs	r2, r0, r1
    3c80:	012fff1e 	bxeq	lr
    3c84:	e92d4030 	push	{r4, r5, lr}
    3c88:	e3a05000 	mov	r5, #0
    3c8c:	ea000006 	b	3cac <__aeabi_l2d+0x1c>

00003c90 <__aeabi_l2d>:
    3c90:	e1902001 	orrs	r2, r0, r1
    3c94:	012fff1e 	bxeq	lr
    3c98:	e92d4030 	push	{r4, r5, lr}
    3c9c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    3ca0:	5a000001 	bpl	3cac <__aeabi_l2d+0x1c>
    3ca4:	e2700000 	rsbs	r0, r0, #0
    3ca8:	e2e11000 	rsc	r1, r1, #0
    3cac:	e3a04b01 	mov	r4, #1024	; 0x400
    3cb0:	e2844032 	add	r4, r4, #50	; 0x32
    3cb4:	e1b0cb21 	lsrs	r12, r1, #22
    3cb8:	0affff44 	beq	39d0 <__adddf3+0xf0>
    3cbc:	e3a02003 	mov	r2, #3
    3cc0:	e1b0c1ac 	lsrs	r12, r12, #3
    3cc4:	12822003 	addne	r2, r2, #3
    3cc8:	e1b0c1ac 	lsrs	r12, r12, #3
    3ccc:	12822003 	addne	r2, r2, #3
    3cd0:	e08221ac 	add	r2, r2, r12, lsr #3
    3cd4:	e2623020 	rsb	r3, r2, #32
    3cd8:	e1a0c310 	lsl	r12, r0, r3
    3cdc:	e1a00230 	lsr	r0, r0, r2
    3ce0:	e1800311 	orr	r0, r0, r1, lsl r3
    3ce4:	e1a01231 	lsr	r1, r1, r2
    3ce8:	e0844002 	add	r4, r4, r2
    3cec:	eaffff37 	b	39d0 <__adddf3+0xf0>

00003cf0 <__aeabi_d2iz>:
    3cf0:	e1a02081 	lsl	r2, r1, #1
    3cf4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    3cf8:	2a00000c 	bcs	3d30 <__aeabi_d2iz+0x40>
    3cfc:	5a000009 	bpl	3d28 <__aeabi_d2iz+0x38>
    3d00:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    3d04:	e0532ac2 	subs	r2, r3, r2, asr #21
    3d08:	9a00000a 	bls	3d38 <__aeabi_d2iz+0x48>
    3d0c:	e1a03581 	lsl	r3, r1, #11
    3d10:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    3d14:	e1833aa0 	orr	r3, r3, r0, lsr #21
    3d18:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    3d1c:	e1a00233 	lsr	r0, r3, r2
    3d20:	12600000 	rsbne	r0, r0, #0
    3d24:	e12fff1e 	bx	lr
    3d28:	e3a00000 	mov	r0, #0
    3d2c:	e12fff1e 	bx	lr
    3d30:	e1900601 	orrs	r0, r0, r1, lsl #12
    3d34:	1a000002 	bne	3d44 <__aeabi_d2iz+0x54>
    3d38:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    3d3c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    3d40:	e12fff1e 	bx	lr
    3d44:	e3a00000 	mov	r0, #0
    3d48:	e12fff1e 	bx	lr

00003d4c <atexit>:
    3d4c:	e1a01000 	mov	r1, r0
    3d50:	e3a00000 	mov	r0, #0
    3d54:	e92d4008 	push	{r3, lr}
    3d58:	e1a02000 	mov	r2, r0
    3d5c:	e1a03000 	mov	r3, r0
    3d60:	eb0000c3 	bl	4074 <__register_exitproc>
    3d64:	e8bd4008 	pop	{r3, lr}
    3d68:	e12fff1e 	bx	lr

00003d6c <exit>:
    3d6c:	e92d4008 	push	{r3, lr}
    3d70:	e3a01000 	mov	r1, #0
    3d74:	e1a04000 	mov	r4, r0
    3d78:	eb0000fa 	bl	4168 <__call_exitprocs>
    3d7c:	e59f3018 	ldr	r3, [pc, #24]	; 3d9c <exit+0x30>
    3d80:	e5930000 	ldr	r0, [r3]
    3d84:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    3d88:	e3530000 	cmp	r3, #0
    3d8c:	11a0e00f 	movne	lr, pc
    3d90:	112fff13 	bxne	r3
    3d94:	e1a00004 	mov	r0, r4
    3d98:	eb00017e 	bl	4398 <_exit>
    3d9c:	00004810 	.word	0x00004810

00003da0 <memcpy>:
    3da0:	e3520003 	cmp	r2, #3
    3da4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    3da8:	8a000009 	bhi	3dd4 <memcpy+0x34>
    3dac:	e3520000 	cmp	r2, #0
    3db0:	0a000005 	beq	3dcc <memcpy+0x2c>
    3db4:	e3a03000 	mov	r3, #0
    3db8:	e7d1c003 	ldrb	r12, [r1, r3]
    3dbc:	e7c0c003 	strb	r12, [r0, r3]
    3dc0:	e2833001 	add	r3, r3, #1
    3dc4:	e1530002 	cmp	r3, r2
    3dc8:	1afffffa 	bne	3db8 <memcpy+0x18>
    3dcc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    3dd0:	e12fff1e 	bx	lr
    3dd4:	e3100003 	tst	r0, #3
    3dd8:	e0802002 	add	r2, r0, r2
    3ddc:	0a00000b 	beq	3e10 <memcpy+0x70>
    3de0:	e280c001 	add	r12, r0, #1
    3de4:	e2814001 	add	r4, r1, #1
    3de8:	e20c3003 	and	r3, r12, #3
    3dec:	e5545001 	ldrb	r5, [r4, #-1]
    3df0:	e3530000 	cmp	r3, #0
    3df4:	e1a01004 	mov	r1, r4
    3df8:	e1a0300c 	mov	r3, r12
    3dfc:	e54c5001 	strb	r5, [r12, #-1]
    3e00:	e2844001 	add	r4, r4, #1
    3e04:	e28cc001 	add	r12, r12, #1
    3e08:	1afffff6 	bne	3de8 <memcpy+0x48>
    3e0c:	ea000000 	b	3e14 <memcpy+0x74>
    3e10:	e1a03000 	mov	r3, r0
    3e14:	e211c003 	ands	r12, r1, #3
    3e18:	1a00004f 	bne	3f5c <memcpy+0x1bc>
    3e1c:	e063c002 	rsb	r12, r3, r2
    3e20:	e35c003f 	cmp	r12, #63	; 0x3f
    3e24:	da000024 	ble	3ebc <memcpy+0x11c>
    3e28:	e591c000 	ldr	r12, [r1]
    3e2c:	e583c000 	str	r12, [r3]
    3e30:	e591c004 	ldr	r12, [r1, #4]
    3e34:	e583c004 	str	r12, [r3, #4]
    3e38:	e591c008 	ldr	r12, [r1, #8]
    3e3c:	e583c008 	str	r12, [r3, #8]
    3e40:	e591c00c 	ldr	r12, [r1, #12]
    3e44:	e583c00c 	str	r12, [r3, #12]
    3e48:	e591c010 	ldr	r12, [r1, #16]
    3e4c:	e583c010 	str	r12, [r3, #16]
    3e50:	e591c014 	ldr	r12, [r1, #20]
    3e54:	e583c014 	str	r12, [r3, #20]
    3e58:	e591c018 	ldr	r12, [r1, #24]
    3e5c:	e583c018 	str	r12, [r3, #24]
    3e60:	e591c01c 	ldr	r12, [r1, #28]
    3e64:	e583c01c 	str	r12, [r3, #28]
    3e68:	e591c020 	ldr	r12, [r1, #32]
    3e6c:	e583c020 	str	r12, [r3, #32]
    3e70:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    3e74:	e583c024 	str	r12, [r3, #36]	; 0x24
    3e78:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    3e7c:	e583c028 	str	r12, [r3, #40]	; 0x28
    3e80:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    3e84:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    3e88:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    3e8c:	e583c030 	str	r12, [r3, #48]	; 0x30
    3e90:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    3e94:	e583c034 	str	r12, [r3, #52]	; 0x34
    3e98:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    3e9c:	e583c038 	str	r12, [r3, #56]	; 0x38
    3ea0:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    3ea4:	e2833040 	add	r3, r3, #64	; 0x40
    3ea8:	e503c004 	str	r12, [r3, #-4]
    3eac:	e063c002 	rsb	r12, r3, r2
    3eb0:	e35c003f 	cmp	r12, #63	; 0x3f
    3eb4:	e2811040 	add	r1, r1, #64	; 0x40
    3eb8:	caffffda 	bgt	3e28 <memcpy+0x88>
    3ebc:	e35c000f 	cmp	r12, #15
    3ec0:	da00000c 	ble	3ef8 <memcpy+0x158>
    3ec4:	e591c000 	ldr	r12, [r1]
    3ec8:	e583c000 	str	r12, [r3]
    3ecc:	e591c004 	ldr	r12, [r1, #4]
    3ed0:	e583c004 	str	r12, [r3, #4]
    3ed4:	e591c008 	ldr	r12, [r1, #8]
    3ed8:	e583c008 	str	r12, [r3, #8]
    3edc:	e591c00c 	ldr	r12, [r1, #12]
    3ee0:	e2833010 	add	r3, r3, #16
    3ee4:	e503c004 	str	r12, [r3, #-4]
    3ee8:	e063c002 	rsb	r12, r3, r2
    3eec:	e35c000f 	cmp	r12, #15
    3ef0:	e2811010 	add	r1, r1, #16
    3ef4:	cafffff2 	bgt	3ec4 <memcpy+0x124>
    3ef8:	e35c0003 	cmp	r12, #3
    3efc:	da00000a 	ble	3f2c <memcpy+0x18c>
    3f00:	e283c004 	add	r12, r3, #4
    3f04:	e2814004 	add	r4, r1, #4
    3f08:	e06c3002 	rsb	r3, r12, r2
    3f0c:	e5145004 	ldr	r5, [r4, #-4]
    3f10:	e3530003 	cmp	r3, #3
    3f14:	e1a01004 	mov	r1, r4
    3f18:	e1a0300c 	mov	r3, r12
    3f1c:	e50c5004 	str	r5, [r12, #-4]
    3f20:	e2844004 	add	r4, r4, #4
    3f24:	e28cc004 	add	r12, r12, #4
    3f28:	cafffff6 	bgt	3f08 <memcpy+0x168>
    3f2c:	e1520003 	cmp	r2, r3
    3f30:	82833001 	addhi	r3, r3, #1
    3f34:	82811001 	addhi	r1, r1, #1
    3f38:	82822001 	addhi	r2, r2, #1
    3f3c:	9affffa2 	bls	3dcc <memcpy+0x2c>
    3f40:	e551c001 	ldrb	r12, [r1, #-1]
    3f44:	e2833001 	add	r3, r3, #1
    3f48:	e1530002 	cmp	r3, r2
    3f4c:	e543c002 	strb	r12, [r3, #-2]
    3f50:	e2811001 	add	r1, r1, #1
    3f54:	1afffff9 	bne	3f40 <memcpy+0x1a0>
    3f58:	eaffff9b 	b	3dcc <memcpy+0x2c>
    3f5c:	e0635002 	rsb	r5, r3, r2
    3f60:	e06c4001 	rsb	r4, r12, r1
    3f64:	e3550003 	cmp	r5, #3
    3f68:	e5945000 	ldr	r5, [r4]
    3f6c:	daffffee 	ble	3f2c <memcpy+0x18c>
    3f70:	e26c6004 	rsb	r6, r12, #4
    3f74:	e1a0718c 	lsl	r7, r12, #3
    3f78:	e1a06186 	lsl	r6, r6, #3
    3f7c:	e283c004 	add	r12, r3, #4
    3f80:	e1a08735 	lsr	r8, r5, r7
    3f84:	e5b45004 	ldr	r5, [r4, #4]!
    3f88:	e1888615 	orr	r8, r8, r5, lsl r6
    3f8c:	e06c3002 	rsb	r3, r12, r2
    3f90:	e3530003 	cmp	r3, #3
    3f94:	e50c8004 	str	r8, [r12, #-4]
    3f98:	e1a0300c 	mov	r3, r12
    3f9c:	e2811004 	add	r1, r1, #4
    3fa0:	e28cc004 	add	r12, r12, #4
    3fa4:	cafffff5 	bgt	3f80 <memcpy+0x1e0>
    3fa8:	eaffffdf 	b	3f2c <memcpy+0x18c>

00003fac <strncpy>:
    3fac:	e1813000 	orr	r3, r1, r0
    3fb0:	e3130003 	tst	r3, #3
    3fb4:	e92d0070 	push	{r4, r5, r6}
    3fb8:	e1a03000 	mov	r3, r0
    3fbc:	1a000001 	bne	3fc8 <strncpy+0x1c>
    3fc0:	e3520003 	cmp	r2, #3
    3fc4:	8a000018 	bhi	402c <strncpy+0x80>
    3fc8:	e3520000 	cmp	r2, #0
    3fcc:	0a000014 	beq	4024 <strncpy+0x78>
    3fd0:	e5d1c000 	ldrb	r12, [r1]
    3fd4:	e4c3c001 	strb	r12, [r3], #1
    3fd8:	e35c0000 	cmp	r12, #0
    3fdc:	e2422001 	sub	r2, r2, #1
    3fe0:	11a0c003 	movne	r12, r3
    3fe4:	0a000007 	beq	4008 <strncpy+0x5c>
    3fe8:	e3520000 	cmp	r2, #0
    3fec:	0a00000c 	beq	4024 <strncpy+0x78>
    3ff0:	e5f13001 	ldrb	r3, [r1, #1]!
    3ff4:	e4cc3001 	strb	r3, [r12], #1
    3ff8:	e3530000 	cmp	r3, #0
    3ffc:	e2422001 	sub	r2, r2, #1
    4000:	e1a0300c 	mov	r3, r12
    4004:	1afffff7 	bne	3fe8 <strncpy+0x3c>
    4008:	e3520000 	cmp	r2, #0
    400c:	10832002 	addne	r2, r3, r2
    4010:	13a01000 	movne	r1, #0
    4014:	0a000002 	beq	4024 <strncpy+0x78>
    4018:	e4c31001 	strb	r1, [r3], #1
    401c:	e1530002 	cmp	r3, r2
    4020:	1afffffc 	bne	4018 <strncpy+0x6c>
    4024:	e8bd0070 	pop	{r4, r5, r6}
    4028:	e12fff1e 	bx	lr
    402c:	e1a06001 	mov	r6, r1
    4030:	e59f4034 	ldr	r4, [pc, #52]	; 406c <strncpy+0xc0>
    4034:	e4915004 	ldr	r5, [r1], #4
    4038:	e59fc030 	ldr	r12, [pc, #48]	; 4070 <strncpy+0xc4>
    403c:	e0854004 	add	r4, r5, r4
    4040:	e1c44005 	bic	r4, r4, r5
    4044:	e004c00c 	and	r12, r4, r12
    4048:	e35c0000 	cmp	r12, #0
    404c:	1a000004 	bne	4064 <strncpy+0xb8>
    4050:	e2422004 	sub	r2, r2, #4
    4054:	e3520003 	cmp	r2, #3
    4058:	e4835004 	str	r5, [r3], #4
    405c:	8afffff2 	bhi	402c <strncpy+0x80>
    4060:	eaffffd8 	b	3fc8 <strncpy+0x1c>
    4064:	e1a01006 	mov	r1, r6
    4068:	eaffffd6 	b	3fc8 <strncpy+0x1c>
    406c:	fefefeff 	.word	0xfefefeff
    4070:	80808080 	.word	0x80808080

00004074 <__register_exitproc>:
    4074:	e59fc0e4 	ldr	r12, [pc, #228]	; 4160 <__register_exitproc+0xec>
    4078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    407c:	e59c4000 	ldr	r4, [r12]
    4080:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    4084:	e35c0000 	cmp	r12, #0
    4088:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    408c:	e59c5004 	ldr	r5, [r12, #4]
    4090:	0584c148 	streq	r12, [r4, #328]	; 0x148
    4094:	e355001f 	cmp	r5, #31
    4098:	e24dd010 	sub	sp, sp, #16
    409c:	e1a06000 	mov	r6, r0
    40a0:	da000015 	ble	40fc <__register_exitproc+0x88>
    40a4:	e59f00b8 	ldr	r0, [pc, #184]	; 4164 <__register_exitproc+0xf0>
    40a8:	e3500000 	cmp	r0, #0
    40ac:	1a000001 	bne	40b8 <__register_exitproc+0x44>
    40b0:	e3e00000 	mvn	r0, #0
    40b4:	ea000018 	b	411c <__register_exitproc+0xa8>
    40b8:	e3a00e19 	mov	r0, #400	; 0x190
    40bc:	e58d100c 	str	r1, [sp, #12]
    40c0:	e58d2008 	str	r2, [sp, #8]
    40c4:	e58d3004 	str	r3, [sp, #4]
    40c8:	e320f000 	nop	{0}
    40cc:	e250c000 	subs	r12, r0, #0
    40d0:	e59d100c 	ldr	r1, [sp, #12]
    40d4:	e59d2008 	ldr	r2, [sp, #8]
    40d8:	e59d3004 	ldr	r3, [sp, #4]
    40dc:	0afffff3 	beq	40b0 <__register_exitproc+0x3c>
    40e0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    40e4:	e3a00000 	mov	r0, #0
    40e8:	e58c0004 	str	r0, [r12, #4]
    40ec:	e58c5000 	str	r5, [r12]
    40f0:	e584c148 	str	r12, [r4, #328]	; 0x148
    40f4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    40f8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    40fc:	e3560000 	cmp	r6, #0
    4100:	e59c4004 	ldr	r4, [r12, #4]
    4104:	1a000007 	bne	4128 <__register_exitproc+0xb4>
    4108:	e2843002 	add	r3, r4, #2
    410c:	e2844001 	add	r4, r4, #1
    4110:	e78c1103 	str	r1, [r12, r3, lsl #2]
    4114:	e58c4004 	str	r4, [r12, #4]
    4118:	e3a00000 	mov	r0, #0
    411c:	e28dd010 	add	sp, sp, #16
    4120:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4124:	e12fff1e 	bx	lr
    4128:	e3a00001 	mov	r0, #1
    412c:	e1a00410 	lsl	r0, r0, r4
    4130:	e08c8104 	add	r8, r12, r4, lsl #2
    4134:	e3560002 	cmp	r6, #2
    4138:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    413c:	e5883108 	str	r3, [r8, #264]	; 0x108
    4140:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    4144:	e1877000 	orr	r7, r7, r0
    4148:	01830000 	orreq	r0, r3, r0
    414c:	e1a05008 	mov	r5, r8
    4150:	e5882088 	str	r2, [r8, #136]	; 0x88
    4154:	e58c7188 	str	r7, [r12, #392]	; 0x188
    4158:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    415c:	eaffffe9 	b	4108 <__register_exitproc+0x94>
    4160:	00004810 	.word	0x00004810
    4164:	00000000 	.word	0x00000000

00004168 <__call_exitprocs>:
    4168:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    416c:	e59f3168 	ldr	r3, [pc, #360]	; 42dc <__call_exitprocs+0x174>
    4170:	e5933000 	ldr	r3, [r3]
    4174:	e24dd014 	sub	sp, sp, #20
    4178:	e58d3004 	str	r3, [sp, #4]
    417c:	e2833f52 	add	r3, r3, #328	; 0x148
    4180:	e58d0008 	str	r0, [sp, #8]
    4184:	e58d300c 	str	r3, [sp, #12]
    4188:	e1a07001 	mov	r7, r1
    418c:	e3a08001 	mov	r8, #1
    4190:	e59d3004 	ldr	r3, [sp, #4]
    4194:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    4198:	e3560000 	cmp	r6, #0
    419c:	e59db00c 	ldr	r11, [sp, #12]
    41a0:	0a000033 	beq	4274 <__call_exitprocs+0x10c>
    41a4:	e5965004 	ldr	r5, [r6, #4]
    41a8:	e2554001 	subs	r4, r5, #1
    41ac:	5286a088 	addpl	r10, r6, #136	; 0x88
    41b0:	5285501f 	addpl	r5, r5, #31
    41b4:	508a5105 	addpl	r5, r10, r5, lsl #2
    41b8:	5a000007 	bpl	41dc <__call_exitprocs+0x74>
    41bc:	ea000029 	b	4268 <__call_exitprocs+0x100>
    41c0:	e5953000 	ldr	r3, [r5]
    41c4:	e1530007 	cmp	r3, r7
    41c8:	0a000005 	beq	41e4 <__call_exitprocs+0x7c>
    41cc:	e2444001 	sub	r4, r4, #1
    41d0:	e3740001 	cmn	r4, #1
    41d4:	e2455004 	sub	r5, r5, #4
    41d8:	0a000022 	beq	4268 <__call_exitprocs+0x100>
    41dc:	e3570000 	cmp	r7, #0
    41e0:	1afffff6 	bne	41c0 <__call_exitprocs+0x58>
    41e4:	e5963004 	ldr	r3, [r6, #4]
    41e8:	e06a2005 	rsb	r2, r10, r5
    41ec:	e2433001 	sub	r3, r3, #1
    41f0:	e0862002 	add	r2, r6, r2
    41f4:	e1530004 	cmp	r3, r4
    41f8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    41fc:	13a01000 	movne	r1, #0
    4200:	05864004 	streq	r4, [r6, #4]
    4204:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    4208:	e3530000 	cmp	r3, #0
    420c:	0affffee 	beq	41cc <__call_exitprocs+0x64>
    4210:	e1a02418 	lsl	r2, r8, r4
    4214:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    4218:	e1120001 	tst	r2, r1
    421c:	e5969004 	ldr	r9, [r6, #4]
    4220:	0a000016 	beq	4280 <__call_exitprocs+0x118>
    4224:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    4228:	e1120001 	tst	r2, r1
    422c:	1a000016 	bne	428c <__call_exitprocs+0x124>
    4230:	e59d0008 	ldr	r0, [sp, #8]
    4234:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    4238:	e1a0e00f 	mov	lr, pc
    423c:	e12fff13 	bx	r3
    4240:	e5963004 	ldr	r3, [r6, #4]
    4244:	e1530009 	cmp	r3, r9
    4248:	1affffd0 	bne	4190 <__call_exitprocs+0x28>
    424c:	e59b3000 	ldr	r3, [r11]
    4250:	e1530006 	cmp	r3, r6
    4254:	1affffcd 	bne	4190 <__call_exitprocs+0x28>
    4258:	e2444001 	sub	r4, r4, #1
    425c:	e3740001 	cmn	r4, #1
    4260:	e2455004 	sub	r5, r5, #4
    4264:	1affffdc 	bne	41dc <__call_exitprocs+0x74>
    4268:	e59f1070 	ldr	r1, [pc, #112]	; 42e0 <__call_exitprocs+0x178>
    426c:	e3510000 	cmp	r1, #0
    4270:	1a000009 	bne	429c <__call_exitprocs+0x134>
    4274:	e28dd014 	add	sp, sp, #20
    4278:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    427c:	e12fff1e 	bx	lr
    4280:	e1a0e00f 	mov	lr, pc
    4284:	e12fff13 	bx	r3
    4288:	eaffffec 	b	4240 <__call_exitprocs+0xd8>
    428c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    4290:	e1a0e00f 	mov	lr, pc
    4294:	e12fff13 	bx	r3
    4298:	eaffffe8 	b	4240 <__call_exitprocs+0xd8>
    429c:	e5963004 	ldr	r3, [r6, #4]
    42a0:	e3530000 	cmp	r3, #0
    42a4:	e5963000 	ldr	r3, [r6]
    42a8:	1a000008 	bne	42d0 <__call_exitprocs+0x168>
    42ac:	e3530000 	cmp	r3, #0
    42b0:	0a000006 	beq	42d0 <__call_exitprocs+0x168>
    42b4:	e1a00006 	mov	r0, r6
    42b8:	e58b3000 	str	r3, [r11]
    42bc:	e320f000 	nop	{0}
    42c0:	e59b6000 	ldr	r6, [r11]
    42c4:	e3560000 	cmp	r6, #0
    42c8:	1affffb5 	bne	41a4 <__call_exitprocs+0x3c>
    42cc:	eaffffe8 	b	4274 <__call_exitprocs+0x10c>
    42d0:	e1a0b006 	mov	r11, r6
    42d4:	e1a06003 	mov	r6, r3
    42d8:	eafffff9 	b	42c4 <__call_exitprocs+0x15c>
    42dc:	00004810 	.word	0x00004810
    42e0:	00000000 	.word	0x00000000

000042e4 <register_fini>:
    42e4:	e92d4008 	push	{r3, lr}
    42e8:	e59f3010 	ldr	r3, [pc, #16]	; 4300 <register_fini+0x1c>
    42ec:	e3530000 	cmp	r3, #0
    42f0:	159f000c 	ldrne	r0, [pc, #12]	; 4304 <register_fini+0x20>
    42f4:	1bfffe94 	blne	3d4c <atexit>
    42f8:	e8bd4008 	pop	{r3, lr}
    42fc:	e12fff1e 	bx	lr
    4300:	00004838 	.word	0x00004838
    4304:	00004308 	.word	0x00004308

00004308 <__libc_fini_array>:
    4308:	e92d4038 	push	{r3, r4, r5, lr}
    430c:	e59f5030 	ldr	r5, [pc, #48]	; 4344 <__libc_fini_array+0x3c>
    4310:	e59f4030 	ldr	r4, [pc, #48]	; 4348 <__libc_fini_array+0x40>
    4314:	e0654004 	rsb	r4, r5, r4
    4318:	e1b04144 	asrs	r4, r4, #2
    431c:	10855104 	addne	r5, r5, r4, lsl #2
    4320:	0a000004 	beq	4338 <__libc_fini_array+0x30>
    4324:	e5353004 	ldr	r3, [r5, #-4]!
    4328:	e1a0e00f 	mov	lr, pc
    432c:	e12fff13 	bx	r3
    4330:	e2544001 	subs	r4, r4, #1
    4334:	1afffffa 	bne	4324 <__libc_fini_array+0x1c>
    4338:	eb00013e 	bl	4838 <__libc_fini>
    433c:	e8bd4038 	pop	{r3, r4, r5, lr}
    4340:	e12fff1e 	bx	lr
    4344:	00004850 	.word	0x00004850
    4348:	00004854 	.word	0x00004854

0000434c <__cs3_premain>:
    434c:	e92d4008 	push	{r3, lr}
    4350:	eb00001d 	bl	43cc <__libc_init_array>
    4354:	e59f3030 	ldr	r3, [pc, #48]	; 438c <__cs3_premain+0x40>
    4358:	e3530000 	cmp	r3, #0
    435c:	15930000 	ldrne	r0, [r3]
    4360:	01a00003 	moveq	r0, r3
    4364:	e59f3024 	ldr	r3, [pc, #36]	; 4390 <__cs3_premain+0x44>
    4368:	e3530000 	cmp	r3, #0
    436c:	15931000 	ldrne	r1, [r3]
    4370:	01a01003 	moveq	r1, r3
    4374:	e3a02000 	mov	r2, #0
    4378:	ebffefb7 	bl	25c <main>
    437c:	e59f3010 	ldr	r3, [pc, #16]	; 4394 <__cs3_premain+0x48>
    4380:	e3530000 	cmp	r3, #0
    4384:	1bfffe78 	blne	3d6c <exit>
    4388:	eafffffe 	b	4388 <__cs3_premain+0x3c>
	...
    4394:	00003d6c 	.word	0x00003d6c

00004398 <_exit>:
    4398:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    439c:	e3a00018 	mov	r0, #24
    43a0:	e59f1004 	ldr	r1, [pc, #4]	; 43ac <_exit+0x14>
    43a4:	ef123456 	svc	0x00123456
    43a8:	eafffffe 	b	43a8 <_exit+0x10>
    43ac:	00020026 	.word	0x00020026

000043b0 <__cs3_isr_interrupt>:
    43b0:	eafffffe 	b	43b0 <__cs3_isr_interrupt>

000043b4 <__cs3_isr_undef>:
    43b4:	eafffffe 	b	43b4 <__cs3_isr_undef>

000043b8 <__cs3_isr_swi>:
    43b8:	eafffffe 	b	43b8 <__cs3_isr_swi>

000043bc <__cs3_isr_pabort>:
    43bc:	eafffffe 	b	43bc <__cs3_isr_pabort>

000043c0 <__cs3_isr_dabort>:
    43c0:	eafffffe 	b	43c0 <__cs3_isr_dabort>

000043c4 <__cs3_isr_irq>:
    43c4:	eafffffe 	b	43c4 <__cs3_isr_irq>

000043c8 <__cs3_isr_fiq>:
    43c8:	eafffffe 	b	43c8 <__cs3_isr_fiq>

000043cc <__libc_init_array>:
    43cc:	e92d4070 	push	{r4, r5, r6, lr}
    43d0:	e59f506c 	ldr	r5, [pc, #108]	; 4444 <__libc_init_array+0x78>
    43d4:	e59f606c 	ldr	r6, [pc, #108]	; 4448 <__libc_init_array+0x7c>
    43d8:	e0656006 	rsb	r6, r5, r6
    43dc:	e1b06146 	asrs	r6, r6, #2
    43e0:	12455004 	subne	r5, r5, #4
    43e4:	13a04000 	movne	r4, #0
    43e8:	0a000005 	beq	4404 <__libc_init_array+0x38>
    43ec:	e5b53004 	ldr	r3, [r5, #4]!
    43f0:	e2844001 	add	r4, r4, #1
    43f4:	e1a0e00f 	mov	lr, pc
    43f8:	e12fff13 	bx	r3
    43fc:	e1560004 	cmp	r6, r4
    4400:	1afffff9 	bne	43ec <__libc_init_array+0x20>
    4404:	e59f5040 	ldr	r5, [pc, #64]	; 444c <__libc_init_array+0x80>
    4408:	e59f6040 	ldr	r6, [pc, #64]	; 4450 <__libc_init_array+0x84>
    440c:	e0656006 	rsb	r6, r5, r6
    4410:	eb000100 	bl	4818 <_init>
    4414:	e1b06146 	asrs	r6, r6, #2
    4418:	12455004 	subne	r5, r5, #4
    441c:	13a04000 	movne	r4, #0
    4420:	0a000005 	beq	443c <__libc_init_array+0x70>
    4424:	e5b53004 	ldr	r3, [r5, #4]!
    4428:	e2844001 	add	r4, r4, #1
    442c:	e1a0e00f 	mov	lr, pc
    4430:	e12fff13 	bx	r3
    4434:	e1560004 	cmp	r6, r4
    4438:	1afffff9 	bne	4424 <__libc_init_array+0x58>
    443c:	e8bd4070 	pop	{r4, r5, r6, lr}
    4440:	e12fff1e 	bx	lr
    4444:	00004830 	.word	0x00004830
    4448:	00004830 	.word	0x00004830
    444c:	00004830 	.word	0x00004830
    4450:	00004838 	.word	0x00004838

Disassembly of section .rodata:

00004458 <BOARD_REC_LOC>:
    4458:	0000000f 00000032 0000012f 000000ef     ....2.../.......

00004468 <BOARD_HOLE_LOC>:
    4468:	0000001d 0000003f 00000037 0000003f     ....?...7...?...
    4478:	00000051 0000003f 0000006b 0000003f     Q...?...k...?...
    4488:	00000085 0000003f 0000009f 0000003f     ....?.......?...
    4498:	000000b9 0000003f 000000d3 0000003f     ....?.......?...
    44a8:	000000ed 0000003f 00000107 0000003f     ....?.......?...
    44b8:	00000121 0000003f 0000001d 00000059     !...?.......Y...
    44c8:	00000037 00000059 00000051 00000059     7...Y...Q...Y...
    44d8:	0000006b 00000059 00000085 00000059     k...Y.......Y...
    44e8:	0000009f 00000059 000000b9 00000059     ....Y.......Y...
    44f8:	000000d3 00000059 000000ed 00000059     ....Y.......Y...
    4508:	00000107 00000059 00000121 00000059     ....Y...!...Y...
    4518:	0000001d 00000073 00000037 00000073     ....s...7...s...
    4528:	00000051 00000073 0000006b 00000073     Q...s...k...s...
    4538:	00000085 00000073 0000009f 00000073     ....s.......s...
    4548:	000000b9 00000073 000000d3 00000073     ....s.......s...
    4558:	000000ed 00000073 00000107 00000073     ....s.......s...
    4568:	00000121 00000073 0000001d 0000008d     !...s...........
    4578:	00000037 0000008d 00000051 0000008d     7.......Q.......
    4588:	0000006b 0000008d 00000085 0000008d     k...............
    4598:	0000009f 0000008d 000000b9 0000008d     ................
    45a8:	000000d3 0000008d 000000ed 0000008d     ................
    45b8:	00000107 0000008d 00000121 0000008d     ........!.......
    45c8:	0000001d 000000a7 00000037 000000a7     ........7.......
    45d8:	00000051 000000a7 0000006b 000000a7     Q.......k.......
    45e8:	00000085 000000a7 0000009f 000000a7     ................
    45f8:	000000b9 000000a7 000000d3 000000a7     ................
    4608:	000000ed 000000a7 00000107 000000a7     ................
    4618:	00000121 000000a7 0000001d 000000c1     !...............
    4628:	00000037 000000c1 00000051 000000c1     7.......Q.......
    4638:	0000006b 000000c1 00000085 000000c1     k...............
    4648:	0000009f 000000c1 000000b9 000000c1     ................
    4658:	000000d3 000000c1 000000ed 000000c1     ................
    4668:	00000107 000000c1 00000121 000000c1     ........!.......
    4678:	0000001d 000000db 00000037 000000db     ........7.......
    4688:	00000051 000000db 0000006b 000000db     Q.......k.......
    4698:	00000085 000000db 0000009f 000000db     ................
    46a8:	000000b9 000000db 000000d3 000000db     ................
    46b8:	000000ed 000000db 00000107 000000db     ................
    46c8:	00000121 000000db                       !.......

000046d0 <BOARD_HOLE_RADIUS>:
    46d0:	0000000b                                ....

000046d4 <CHIP_START_LOC>:
    46d4:	0000001d 00000023 00000037 00000023     ....#...7...#...
    46e4:	00000051 00000023 0000006b 00000023     Q...#...k...#...
    46f4:	00000085 00000023 0000009f 00000023     ....#.......#...
    4704:	000000b9 00000023 000000d3 00000023     ....#.......#...
    4714:	000000ed 00000023 00000107 00000023     ....#.......#...
    4724:	00000121 00000023                       !...#...

0000472c <CHIP_RADIUS>:
    472c:	0000000c                                ....

00004730 <CHIP_DROP_SPEED>:
    4730:	00000004                                ....

00004734 <INI_CHIP_COL>:
    4734:	00000005                                ....

00004738 <TITLE_LINE_LOC>:
    4738:	00000000 00000009 0000013f 00000009     ........?.......

00004748 <TITLE_LINE_COLOUR>:
    4748:	0000ffff                                ....

0000474c <WIN_LINE_COLOUR>:
    474c:	000007e0                                ....

00004750 <WIN_LINE_WIDTH>:
    4750:	00000005                                ....

00004754 <INFO_TXT_COLOUR>:
    4754:	0000ffff                                ....

00004758 <PLAYER_TXT_COLOUR>:
    4758:	0000fc00                                ....

0000475c <SCORE_COLOUR>:
    475c:	0000f800                                ....

00004760 <TITLE_TXT>:
    4760:	20202020 4e4e4f43 20544345 52554f46         CONNECT FOUR
    4770:	20202020 00000000                           ....

00004778 <INFO_TXT>:
    4778:	203a5020 20202020 203a3150 32502020      P:     P1:   P2
    4788:	2020203a 20202000 79616c50 31207265     :   .   Player 1
    4798:	6e695720 20202173 20200020 616c5020      Wins!   .   Pla
    47a8:	20726579 69572032 2021736e 20002020     yer 2 Wins!   . 
    47b8:	49202020 73692074 54206120 20216569        It is a Tie! 
    47c8:	00202020 20202020 73657250 45202073        .    Press  E
    47d8:	7265746e 20202020 00000000              nter    ....

000047e4 <SCORE>:
    47e4:	33323130 37363534 00003938              0123456789..

000047f0 <PS2_KEY_CODES>:
    47f0:	005af05a 0029f029 0072f072 006bf06b     Z.Z.).).r.r.k.k.
    4800:	0074f074 0024f024 0076f076 00000000     t.t.$.$.v.v.....

00004810 <_global_impure_ptr>:
    4810:	00004888 00000043                       .H..C...

00004818 <_init>:
    4818:	e1a0c00d 	mov	r12, sp
    481c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4820:	e24cb004 	sub	r11, r12, #4
    4824:	e24bd028 	sub	sp, r11, #40	; 0x28
    4828:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    482c:	e12fff1e 	bx	lr

00004830 <__init_array_start>:
    4830:	000042e4 	.word	0x000042e4

00004834 <__frame_dummy_init_array_entry>:
    4834:	00000208                                ....

00004838 <__libc_fini>:
    4838:	e1a0c00d 	mov	r12, sp
    483c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4840:	e24cb004 	sub	r11, r12, #4
    4844:	e24bd028 	sub	sp, r11, #40	; 0x28
    4848:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    484c:	e12fff1e 	bx	lr

00004850 <__fini_array_start>:
    4850:	000001c4 	.word	0x000001c4

00004854 <__cs3_regions>:
	...
    4860:	00004cb8 	.word	0x00004cb8
    4864:	00097360 	.word	0x00097360
