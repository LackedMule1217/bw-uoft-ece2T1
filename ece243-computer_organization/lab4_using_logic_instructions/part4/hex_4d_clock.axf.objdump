
D:/Lab 5; Using Input Output Devices/part4/hex_4d_clock.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.equ	PTIM_ADDR, 0xFFFEC600	// stores address of private timer
			.equ	COUNT, 2000000			// private timer to 10M
			.equ	SCALE, 0				// private timer scale
			
_start:
			LDR		R0, =0x3F3F			// set initial HEX display to 00
   0:	e59f011c 	ldr	r0, [pc, #284]	; 124 <HEX+0xc>
			LDR		R4, =HEX			// set pointer to beginning of HEX array
   4:	e59f411c 	ldr	r4, [pc, #284]	; 128 <HEX+0x10>
			LDR		R5, =HEX_ADDR		// stores hex address
   8:	e59f511c 	ldr	r5, [pc, #284]	; 12c <HEX+0x14>
			LDR		R6, =KEY_ADDR		// stores key address
   c:	e59f611c 	ldr	r6, [pc, #284]	; 130 <HEX+0x18>
			MOV		R7,	#0				// stores counter value
  10:	e3a07000 	mov	r7, #0
			LDR		R8, =PTIM_ADDR		// stores private timer address
  14:	e59f8118 	ldr	r8, [pc, #280]	; 134 <HEX+0x1c>
			LDR		R9, =COUNT			// stores count
  18:	e59f9118 	ldr	r9, [pc, #280]	; 138 <HEX+0x20>
			STR		R9, [R8]			// stores count in load value of private timer
  1c:	e5889000 	str	r9, [r8]
			MOV		R9, #SCALE			// store prescaler value
  20:	e3a09000 	mov	r9, #0
			LSL		R9, R9, #8
  24:	e1a09409 	lsl	r9, r9, #8
			ADD		R9, #0b011			// store IAE for control
  28:	e2899003 	add	r9, r9, #3
			STR		R9, [R8, #0x8]		// store control in private timer and enable it
  2c:	e5889008 	str	r9, [r8, #8]

00000030 <main>:
			
main:		STR		R0, [R5]			// store value to HEX display
  30:	e5850000 	str	r0, [r5]

00000034 <check_tim>:
check_tim:	LDR		R9, [R8, #0xC]		// store timer timeout state
  34:	e598900c 	ldr	r9, [r8, #12]
			CMP		R9, #1				// check if timer has finished the 0.25 second delay
  38:	e3590001 	cmp	r9, #1
			BNE		check_tim			// if timer has not finished, poll again
  3c:	1afffffc 	bne	34 <check_tim>
			STR		R9, [R8, #0xC]		// reset timer timeout flag
  40:	e588900c 	str	r9, [r8, #12]
			LDR		R9, [R6, #0xC]		// if keys are pressed, pause
  44:	e596900c 	ldr	r9, [r6, #12]
			LSL		R9, #28
  48:	e1a09e09 	lsl	r9, r9, #28
			CMP		R9, #0
  4c:	e3590000 	cmp	r9, #0
			BEQ		incre
  50:	0a000007 	beq	74 <incre>
			MOV		R10, #0b1111
  54:	e3a0a00f 	mov	r10, #15
			STR		R10, [R6, #0xC]		// reset key edgecapture register
  58:	e586a00c 	str	r10, [r6, #12]

0000005c <check_key>:
check_key:	LDR		R10, [R6, #0xC]
  5c:	e596a00c 	ldr	r10, [r6, #12]
			LSL		R10, #28
  60:	e1a0ae0a 	lsl	r10, r10, #28
			CMP		R10, #0
  64:	e35a0000 	cmp	r10, #0
			BEQ		check_key
  68:	0afffffb 	beq	5c <check_key>
			MOV		R10, #0b1111
  6c:	e3a0a00f 	mov	r10, #15
			STR		R10, [R6, #0xC]		// reset key edgecapture register
  70:	e586a00c 	str	r10, [r6, #12]

00000074 <incre>:
incre:		ADD		R7, #1				// increment counter value
  74:	e2877001 	add	r7, r7, #1
			LDR		R9, =6000			// if cnt==6000, reset counter to 0 and return to main
  78:	e59f90bc 	ldr	r9, [pc, #188]	; 13c <HEX+0x24>
			CMP		R7, R9				
  7c:	e1570009 	cmp	r7, r9
			MOVEQ	R7, #0
  80:	03a07000 	moveq	r7, #0
			MOV		R2, R7				// subroutine prep: moves count value to R2
  84:	e1a02007 	mov	r2, r7
			BL		HEX_DIVIDE			// calls hex divide subroutine
  88:	eb000009 	bl	b4 <HEX_DIVIDE>
			MOV		R9, R0				// stores remainder [0]
  8c:	e1a09000 	mov	r9, r0
			MOV		R2, R1				// stores quotient to be fed to HEX_DIVIDE again
  90:	e1a02001 	mov	r2, r1
			BL		HEX_DIVIDE			// calls hex divide subroutine
  94:	eb000006 	bl	b4 <HEX_DIVIDE>
			MOV		R10, R0				// stores remainder [1]
  98:	e1a0a000 	mov	r10, r0
			MOV		R2, R1				// stores quotient to be fed to HEX_DIVIDE again
  9c:	e1a02001 	mov	r2, r1
			BL		HEX_DIVIDE			// calls hex divide subroutine
  a0:	eb000003 	bl	b4 <HEX_DIVIDE>
			MOV		R11, R0				// stores remainder [2]
  a4:	e1a0b000 	mov	r11, r0
			MOV		R12, R1				// stores quotient [3]
  a8:	e1a0c001 	mov	r12, r1
			BL		NUM_TO_HEX			// calls num to hex subroutine
  ac:	eb00000b 	bl	e0 <NUM_TO_HEX>
			B		main				// loop to main
  b0:	eaffffde 	b	30 <main>

000000b4 <HEX_DIVIDE>:
 * Input: 		R2 - input data
 * Usage:		R4 - temporary quotient
 * Output: 		R0 - remainder
 *				R1 - quotient
 */
HEX_DIVIDE: PUSH	{R4-R12}
  b4:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			MOV 	R4, #0
  b8:	e3a04000 	mov	r4, #0

000000bc <CONT>:
CONT: 		CMP 	R2, #10
  bc:	e352000a 	cmp	r2, #10
			BLT 	DIV_END
  c0:	ba000002 	blt	d0 <DIV_END>
			SUB 	R2, #10
  c4:	e242200a 	sub	r2, r2, #10
			ADD 	R4, #1
  c8:	e2844001 	add	r4, r4, #1
			B 		CONT
  cc:	eafffffa 	b	bc <CONT>

000000d0 <DIV_END>:
DIV_END: 	MOV 	R1, R4 				// quotient in R1
  d0:	e1a01004 	mov	r1, r4
			MOV		R0, R2				// remainder in R0
  d4:	e1a00002 	mov	r0, r2
			POP		{R4-R12}
  d8:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
  dc:	e12fff1e 	bx	lr

000000e0 <NUM_TO_HEX>:
				R12 - SS:ff[3]
 * Usage:		R4 - HEX memory value
				R5 - temporary remainder hex code
 * Output: 		R0 - hex code
 */
NUM_TO_HEX: PUSH	{R4-R12}
  e0:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR		R4, =HEX
  e4:	e59f403c 	ldr	r4, [pc, #60]	; 128 <HEX+0x10>
			LDRB	R0, [R4, R12]		// store SS:ff[3]
  e8:	e7d4000c 	ldrb	r0, [r4, r12]
			LSL		R0, R0, #8
  ec:	e1a00400 	lsl	r0, r0, #8
			LDRB	R5, [R4, R11]		// store SS:ff[2]
  f0:	e7d4500b 	ldrb	r5, [r4, r11]
			ADD		R0, R5
  f4:	e0800005 	add	r0, r0, r5
			LSL		R0, R0, #8
  f8:	e1a00400 	lsl	r0, r0, #8
			LDRB	R5, [R4, R10]		// store SS:ff[1]
  fc:	e7d4500a 	ldrb	r5, [r4, r10]
			ADD		R0, R5
 100:	e0800005 	add	r0, r0, r5
			LSL		R0, R0, #8
 104:	e1a00400 	lsl	r0, r0, #8
			LDRB	R5, [R4, R9]		// store SS:ff[0]
 108:	e7d45009 	ldrb	r5, [r4, r9]
			ADD		R0, R5
 10c:	e0800005 	add	r0, r0, r5
			POP		{R4-R12}
 110:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
 114:	e12fff1e 	bx	lr

00000118 <HEX>:
 118:	4f5b063f 	.word	0x4f5b063f
 11c:	077d6d66 	.word	0x077d6d66
 120:	0000677f 	.word	0x0000677f
 124:	00003f3f 	.word	0x00003f3f
 128:	00000118 	.word	0x00000118
 12c:	ff200020 	.word	0xff200020
 130:	ff200050 	.word	0xff200050
 134:	fffec600 	.word	0xfffec600
 138:	001e8480 	.word	0x001e8480
 13c:	00001770 	.word	0x00001770
