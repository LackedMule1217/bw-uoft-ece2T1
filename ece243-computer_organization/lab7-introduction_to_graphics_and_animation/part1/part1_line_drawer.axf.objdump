
D:/Barney/OneDrive - University of Toronto/2. Homework/10. Computer Organization (ECE243)/Labs/Lab 7; Introduction to Graphics and Animation/part1/part1_line_drawer.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 58 0a 00 00 5c 0a 00 00 60 0a 00 00     @...X...\...`...
  30:	64 0a 00 00 54 0a 00 00 68 0a 00 00 6c 0a 00 00     d...T...h...l...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000245 	bl	9f0 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b54 	.word	0x00000b54

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f90 	.word	0x00000f90

00000124 <__cs3_heap_start_ptr>:
 124:	00000fb8 	.word	0x00000fb8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f98 	.word	0x00000f98
 170:	00000f9b 	.word	0x00000f9b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f98 	.word	0x00000f98
 1bc:	00000f98 	.word	0x00000f98
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f98 	.word	0x00000f98
 200:	00000000 	.word	0x00000000
 204:	00000af8 	.word	0x00000af8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000af8 	.word	0x00000af8
 250:	00000f9c 	.word	0x00000f9c
 254:	00000b58 	.word	0x00000b58
 258:	00000000 	.word	0x00000000

0000025c <main>:
void draw_line(int x0, int y0, int x1, int y1, int colour);

volatile int pixel_buffer_start; // global variable

int main(void)
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
 268:	e3033020 	movw	r3, #12320	; 0x3020
 26c:	e34f3f20 	movt	r3, #65312	; 0xff20
 270:	e50b3008 	str	r3, [r11, #-8]
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_buffer_start = *pixel_ctrl_ptr;
 274:	e51b3008 	ldr	r3, [r11, #-8]
 278:	e5932000 	ldr	r2, [r3]
 27c:	e3003fb4 	movw	r3, #4020	; 0xfb4
 280:	e3403000 	movt	r3, #0
 284:	e5832000 	str	r2, [r3]

    clear_screen();
 288:	eb000041 	bl	394 <clear_screen>
    draw_line(0, 0, 150, 150, 0x001F);      // this line is blue
 28c:	e3a0301f 	mov	r3, #31
 290:	e58d3000 	str	r3, [sp]
 294:	e3a00000 	mov	r0, #0
 298:	e3a01000 	mov	r1, #0
 29c:	e3a02096 	mov	r2, #150	; 0x96
 2a0:	e3a03096 	mov	r3, #150	; 0x96
 2a4:	eb00005a 	bl	414 <draw_line>
    draw_line(150, 150, 319, 0, 0x07E0);    // this line is green
 2a8:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 2ac:	e58d3000 	str	r3, [sp]
 2b0:	e3a00096 	mov	r0, #150	; 0x96
 2b4:	e3a01096 	mov	r1, #150	; 0x96
 2b8:	e300213f 	movw	r2, #319	; 0x13f
 2bc:	e3a03000 	mov	r3, #0
 2c0:	eb000053 	bl	414 <draw_line>
    draw_line(0, 239, 319, 239, 0xF800);    // this line is red
 2c4:	e3a03b3e 	mov	r3, #63488	; 0xf800
 2c8:	e58d3000 	str	r3, [sp]
 2cc:	e3a00000 	mov	r0, #0
 2d0:	e3a010ef 	mov	r1, #239	; 0xef
 2d4:	e300213f 	movw	r2, #319	; 0x13f
 2d8:	e3a030ef 	mov	r3, #239	; 0xef
 2dc:	eb00004c 	bl	414 <draw_line>
    draw_line(230, 10, 100, 50, 0xF81F);    // this line is a pink color
 2e0:	e30f381f 	movw	r3, #63519	; 0xf81f
 2e4:	e58d3000 	str	r3, [sp]
 2e8:	e3a000e6 	mov	r0, #230	; 0xe6
 2ec:	e3a0100a 	mov	r1, #10
 2f0:	e3a02064 	mov	r2, #100	; 0x64
 2f4:	e3a03032 	mov	r3, #50	; 0x32
 2f8:	eb000045 	bl	414 <draw_line>
    draw_line(50, 0, 50, 200, 0xFFFF);      // this vertical line is while
 2fc:	e30f3fff 	movw	r3, #65535	; 0xffff
 300:	e58d3000 	str	r3, [sp]
 304:	e3a00032 	mov	r0, #50	; 0x32
 308:	e3a01000 	mov	r1, #0
 30c:	e3a02032 	mov	r2, #50	; 0x32
 310:	e3a030c8 	mov	r3, #200	; 0xc8
 314:	eb00003e 	bl	414 <draw_line>
    draw_line(0, 100, 200, 100, 0xFFFF);    // this horizontal line is while
 318:	e30f3fff 	movw	r3, #65535	; 0xffff
 31c:	e58d3000 	str	r3, [sp]
 320:	e3a00000 	mov	r0, #0
 324:	e3a01064 	mov	r1, #100	; 0x64
 328:	e3a020c8 	mov	r2, #200	; 0xc8
 32c:	e3a03064 	mov	r3, #100	; 0x64
 330:	eb000037 	bl	414 <draw_line>
}
 334:	e1a00003 	mov	r0, r3
 338:	e24bd004 	sub	sp, r11, #4
 33c:	e8bd8800 	pop	{r11, pc}

00000340 <plot_pixel>:

// code not shown for clear_screen() and draw_line() subroutines

void plot_pixel(int x, int y, short int line_color) {
 340:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 344:	e28db000 	add	r11, sp, #0
 348:	e24dd014 	sub	sp, sp, #20
 34c:	e50b0008 	str	r0, [r11, #-8]
 350:	e50b100c 	str	r1, [r11, #-12]
 354:	e1a03002 	mov	r3, r2
 358:	e14b30be 	strh	r3, [r11, #-14]
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 35c:	e51b300c 	ldr	r3, [r11, #-12]
 360:	e1a02503 	lsl	r2, r3, #10
 364:	e3003fb4 	movw	r3, #4020	; 0xfb4
 368:	e3403000 	movt	r3, #0
 36c:	e5933000 	ldr	r3, [r3]
 370:	e0822003 	add	r2, r2, r3
 374:	e51b3008 	ldr	r3, [r11, #-8]
 378:	e1a03083 	lsl	r3, r3, #1
 37c:	e0823003 	add	r3, r2, r3
 380:	e15b20be 	ldrh	r2, [r11, #-14]
 384:	e1c320b0 	strh	r2, [r3]
}
 388:	e28bd000 	add	sp, r11, #0
 38c:	e8bd0800 	ldmfd	sp!, {r11}
 390:	e12fff1e 	bx	lr

00000394 <clear_screen>:

void clear_screen() {
 394:	e92d4800 	push	{r11, lr}
 398:	e28db004 	add	r11, sp, #4
 39c:	e24dd008 	sub	sp, sp, #8
	int x = 0;
 3a0:	e3a03000 	mov	r3, #0
 3a4:	e50b3008 	str	r3, [r11, #-8]
	int y = 0;
 3a8:	e3a03000 	mov	r3, #0
 3ac:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < 320; x++)
 3b0:	e3a03000 	mov	r3, #0
 3b4:	e50b3008 	str	r3, [r11, #-8]
 3b8:	ea00000f 	b	3fc <clear_screen+0x68>
        for (y = 0; y < 240; y++)
 3bc:	e3a03000 	mov	r3, #0
 3c0:	e50b300c 	str	r3, [r11, #-12]
 3c4:	ea000006 	b	3e4 <clear_screen+0x50>
            plot_pixel(x, y, 0x0);
 3c8:	e51b0008 	ldr	r0, [r11, #-8]
 3cc:	e51b100c 	ldr	r1, [r11, #-12]
 3d0:	e3a02000 	mov	r2, #0
 3d4:	ebffffd9 	bl	340 <plot_pixel>

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
        for (y = 0; y < 240; y++)
 3d8:	e51b300c 	ldr	r3, [r11, #-12]
 3dc:	e2833001 	add	r3, r3, #1
 3e0:	e50b300c 	str	r3, [r11, #-12]
 3e4:	e51b300c 	ldr	r3, [r11, #-12]
 3e8:	e35300ef 	cmp	r3, #239	; 0xef
 3ec:	dafffff5 	ble	3c8 <clear_screen+0x34>
}

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
 3f0:	e51b3008 	ldr	r3, [r11, #-8]
 3f4:	e2833001 	add	r3, r3, #1
 3f8:	e50b3008 	str	r3, [r11, #-8]
 3fc:	e51b2008 	ldr	r2, [r11, #-8]
 400:	e300313f 	movw	r3, #319	; 0x13f
 404:	e1520003 	cmp	r2, r3
 408:	daffffeb 	ble	3bc <clear_screen+0x28>
        for (y = 0; y < 240; y++)
            plot_pixel(x, y, 0x0);
}
 40c:	e24bd004 	sub	sp, r11, #4
 410:	e8bd8800 	pop	{r11, pc}

00000414 <draw_line>:

void draw_line(int x0, int y0, int x1, int y1, int colour) {
 414:	e92d4800 	push	{r11, lr}
 418:	e28db004 	add	r11, sp, #4
 41c:	e24dd038 	sub	sp, sp, #56	; 0x38
 420:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
 424:	e50b1034 	str	r1, [r11, #-52]	; 0xffffffcc
 428:	e50b2038 	str	r2, [r11, #-56]	; 0xffffffc8
 42c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
 430:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 434:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 438:	e0633002 	rsb	r3, r3, r2
 43c:	e0232fc3 	eor	r2, r3, r3, asr #31
 440:	e0422fc3 	sub	r2, r2, r3, asr #31
 444:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
 448:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 44c:	e0633001 	rsb	r3, r3, r1
 450:	e3530000 	cmp	r3, #0
 454:	b2633000 	rsblt	r3, r3, #0
 458:	e1520003 	cmp	r2, r3
 45c:	d3a03000 	movle	r3, #0
 460:	c3a03001 	movgt	r3, #1
 464:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	int temp = 0;
 468:	e3a03000 	mov	r3, #0
 46c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    // if slope is greater than 1, set pivot to y instead of x
    if (is_steep) {
 470:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 474:	e3530000 	cmp	r3, #0
 478:	0a00000b 	beq	4ac <draw_line+0x98>
		// swap x0, y0
		temp = x0;
 47c:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 480:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = y0;
 484:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 488:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		y0 = temp;
 48c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 490:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		// swap x1, y1
		temp = x1;
 494:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 498:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x1 = y1;
 49c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
 4a0:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		y1 = temp;
 4a4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4a8:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // start at the lowest pivot position with x0
    if (x0 > x1) {
 4ac:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
 4b0:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 4b4:	e1520003 	cmp	r2, r3
 4b8:	da00000b 	ble	4ec <draw_line+0xd8>
		// swap x0, x1
		temp = x0;
 4bc:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 4c0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = x1;
 4c4:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 4c8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		x1 = temp;
 4cc:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4d0:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		// swap y0, y1
		temp = y0;
 4d4:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 4d8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		y0 = y1;
 4dc:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
 4e0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		y1 = temp;
 4e4:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4e8:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // declare variables
    int dx = x1 - x0;
 4ec:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
 4f0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 4f4:	e0633002 	rsb	r3, r3, r2
 4f8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int dy = abs(y1 - y0);
 4fc:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 500:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 504:	e0633002 	rsb	r3, r3, r2
 508:	e3530000 	cmp	r3, #0
 50c:	b2633000 	rsblt	r3, r3, #0
 510:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int dx2 = 2 * dx;
 514:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 518:	e1a03083 	lsl	r3, r3, #1
 51c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int dy2 = 2 * dy;
 520:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
 524:	e1a03083 	lsl	r3, r3, #1
 528:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    int error = dy2 - dx;
 52c:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
 530:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 534:	e0633002 	rsb	r3, r3, r2
 538:	e50b3008 	str	r3, [r11, #-8]
    int y = y0;
 53c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 540:	e50b300c 	str	r3, [r11, #-12]
    // determine step value
    int step = 1;
 544:	e3a03001 	mov	r3, #1
 548:	e50b3010 	str	r3, [r11, #-16]
    if (y1 - y0 < 0)    step = -1;
 54c:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 550:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 554:	e0633002 	rsb	r3, r3, r2
 558:	e3530000 	cmp	r3, #0
 55c:	aa000001 	bge	568 <draw_line+0x154>
 560:	e3e03000 	mvn	r3, #0
 564:	e50b3010 	str	r3, [r11, #-16]
    // plot initial point
    if (is_steep)   plot_pixel(y0, x0, colour);
 568:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 56c:	e3530000 	cmp	r3, #0
 570:	0a000007 	beq	594 <draw_line+0x180>
 574:	e59b3004 	ldr	r3, [r11, #4]
 578:	e6ff3073 	uxth	r3, r3
 57c:	e6bf3073 	sxth	r3, r3
 580:	e51b0034 	ldr	r0, [r11, #-52]	; 0xffffffcc
 584:	e51b1030 	ldr	r1, [r11, #-48]	; 0xffffffd0
 588:	e1a02003 	mov	r2, r3
 58c:	ebffff6b 	bl	340 <plot_pixel>
 590:	ea000006 	b	5b0 <draw_line+0x19c>
    else            plot_pixel(x0, y0, colour);
 594:	e59b3004 	ldr	r3, [r11, #4]
 598:	e6ff3073 	uxth	r3, r3
 59c:	e6bf3073 	sxth	r3, r3
 5a0:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
 5a4:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
 5a8:	e1a02003 	mov	r2, r3
 5ac:	ebffff63 	bl	340 <plot_pixel>
    // plot subsequent points
	int x = 0;
 5b0:	e3a03000 	mov	r3, #0
 5b4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    for (x = x0 + 1; x <= x1; x++) {
 5b8:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 5bc:	e2833001 	add	r3, r3, #1
 5c0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 5c4:	ea000038 	b	6ac <draw_line+0x298>
        if (error < 0) {
 5c8:	e51b3008 	ldr	r3, [r11, #-8]
 5cc:	e3530000 	cmp	r3, #0
 5d0:	aa000016 	bge	630 <draw_line+0x21c>
            if (is_steep)   plot_pixel(y, x, colour);
 5d4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 5d8:	e3530000 	cmp	r3, #0
 5dc:	0a000007 	beq	600 <draw_line+0x1ec>
 5e0:	e59b3004 	ldr	r3, [r11, #4]
 5e4:	e6ff3073 	uxth	r3, r3
 5e8:	e6bf3073 	sxth	r3, r3
 5ec:	e51b000c 	ldr	r0, [r11, #-12]
 5f0:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
 5f4:	e1a02003 	mov	r2, r3
 5f8:	ebffff50 	bl	340 <plot_pixel>
 5fc:	ea000006 	b	61c <draw_line+0x208>
            else            plot_pixel(x, y, colour);
 600:	e59b3004 	ldr	r3, [r11, #4]
 604:	e6ff3073 	uxth	r3, r3
 608:	e6bf3073 	sxth	r3, r3
 60c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
 610:	e51b100c 	ldr	r1, [r11, #-12]
 614:	e1a02003 	mov	r2, r3
 618:	ebffff48 	bl	340 <plot_pixel>
            error += dy2;
 61c:	e51b2008 	ldr	r2, [r11, #-8]
 620:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
 624:	e0823003 	add	r3, r2, r3
 628:	e50b3008 	str	r3, [r11, #-8]
            continue;
 62c:	ea00001b 	b	6a0 <draw_line+0x28c>
        }
        else {
            y += step;
 630:	e51b200c 	ldr	r2, [r11, #-12]
 634:	e51b3010 	ldr	r3, [r11, #-16]
 638:	e0823003 	add	r3, r2, r3
 63c:	e50b300c 	str	r3, [r11, #-12]
            if (is_steep)   plot_pixel(y, x, colour);
 640:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 644:	e3530000 	cmp	r3, #0
 648:	0a000007 	beq	66c <draw_line+0x258>
 64c:	e59b3004 	ldr	r3, [r11, #4]
 650:	e6ff3073 	uxth	r3, r3
 654:	e6bf3073 	sxth	r3, r3
 658:	e51b000c 	ldr	r0, [r11, #-12]
 65c:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
 660:	e1a02003 	mov	r2, r3
 664:	ebffff35 	bl	340 <plot_pixel>
 668:	ea000006 	b	688 <draw_line+0x274>
            else            plot_pixel(x, y, colour);
 66c:	e59b3004 	ldr	r3, [r11, #4]
 670:	e6ff3073 	uxth	r3, r3
 674:	e6bf3073 	sxth	r3, r3
 678:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
 67c:	e51b100c 	ldr	r1, [r11, #-12]
 680:	e1a02003 	mov	r2, r3
 684:	ebffff2d 	bl	340 <plot_pixel>
            error += dy2 - dx2;
 688:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
 68c:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
 690:	e0633002 	rsb	r3, r3, r2
 694:	e51b2008 	ldr	r2, [r11, #-8]
 698:	e0823003 	add	r3, r2, r3
 69c:	e50b3008 	str	r3, [r11, #-8]
    // plot initial point
    if (is_steep)   plot_pixel(y0, x0, colour);
    else            plot_pixel(x0, y0, colour);
    // plot subsequent points
	int x = 0;
    for (x = x0 + 1; x <= x1; x++) {
 6a0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 6a4:	e2833001 	add	r3, r3, #1
 6a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 6ac:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 6b0:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 6b4:	e1520003 	cmp	r2, r3
 6b8:	daffffc2 	ble	5c8 <draw_line+0x1b4>
            if (is_steep)   plot_pixel(y, x, colour);
            else            plot_pixel(x, y, colour);
            error += dy2 - dx2;
        }
    }
}
 6bc:	e24bd004 	sub	sp, r11, #4
 6c0:	e8bd8800 	pop	{r11, pc}

000006c4 <atexit>:
 6c4:	e1a01000 	mov	r1, r0
 6c8:	e3a00000 	mov	r0, #0
 6cc:	e92d4008 	push	{r3, lr}
 6d0:	e1a02000 	mov	r2, r0
 6d4:	e1a03000 	mov	r3, r0
 6d8:	eb00000e 	bl	718 <__register_exitproc>
 6dc:	e8bd4008 	pop	{r3, lr}
 6e0:	e12fff1e 	bx	lr

000006e4 <exit>:
 6e4:	e92d4008 	push	{r3, lr}
 6e8:	e3a01000 	mov	r1, #0
 6ec:	e1a04000 	mov	r4, r0
 6f0:	eb000045 	bl	80c <__call_exitprocs>
 6f4:	e59f3018 	ldr	r3, [pc, #24]	; 714 <exit+0x30>
 6f8:	e5930000 	ldr	r0, [r3]
 6fc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 700:	e3530000 	cmp	r3, #0
 704:	11a0e00f 	movne	lr, pc
 708:	112fff13 	bxne	r3
 70c:	e1a00004 	mov	r0, r4
 710:	eb0000c9 	bl	a3c <_exit>
 714:	00000afc 	.word	0x00000afc

00000718 <__register_exitproc>:
 718:	e59fc0e4 	ldr	r12, [pc, #228]	; 804 <__register_exitproc+0xec>
 71c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 720:	e59c4000 	ldr	r4, [r12]
 724:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 728:	e35c0000 	cmp	r12, #0
 72c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 730:	e59c5004 	ldr	r5, [r12, #4]
 734:	0584c148 	streq	r12, [r4, #328]	; 0x148
 738:	e355001f 	cmp	r5, #31
 73c:	e24dd010 	sub	sp, sp, #16
 740:	e1a06000 	mov	r6, r0
 744:	da000015 	ble	7a0 <__register_exitproc+0x88>
 748:	e59f00b8 	ldr	r0, [pc, #184]	; 808 <__register_exitproc+0xf0>
 74c:	e3500000 	cmp	r0, #0
 750:	1a000001 	bne	75c <__register_exitproc+0x44>
 754:	e3e00000 	mvn	r0, #0
 758:	ea000018 	b	7c0 <__register_exitproc+0xa8>
 75c:	e3a00e19 	mov	r0, #400	; 0x190
 760:	e58d100c 	str	r1, [sp, #12]
 764:	e58d2008 	str	r2, [sp, #8]
 768:	e58d3004 	str	r3, [sp, #4]
 76c:	e320f000 	nop	{0}
 770:	e250c000 	subs	r12, r0, #0
 774:	e59d100c 	ldr	r1, [sp, #12]
 778:	e59d2008 	ldr	r2, [sp, #8]
 77c:	e59d3004 	ldr	r3, [sp, #4]
 780:	0afffff3 	beq	754 <__register_exitproc+0x3c>
 784:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 788:	e3a00000 	mov	r0, #0
 78c:	e58c0004 	str	r0, [r12, #4]
 790:	e58c5000 	str	r5, [r12]
 794:	e584c148 	str	r12, [r4, #328]	; 0x148
 798:	e58c0188 	str	r0, [r12, #392]	; 0x188
 79c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 7a0:	e3560000 	cmp	r6, #0
 7a4:	e59c4004 	ldr	r4, [r12, #4]
 7a8:	1a000007 	bne	7cc <__register_exitproc+0xb4>
 7ac:	e2843002 	add	r3, r4, #2
 7b0:	e2844001 	add	r4, r4, #1
 7b4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7b8:	e58c4004 	str	r4, [r12, #4]
 7bc:	e3a00000 	mov	r0, #0
 7c0:	e28dd010 	add	sp, sp, #16
 7c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7c8:	e12fff1e 	bx	lr
 7cc:	e3a00001 	mov	r0, #1
 7d0:	e1a00410 	lsl	r0, r0, r4
 7d4:	e08c8104 	add	r8, r12, r4, lsl #2
 7d8:	e3560002 	cmp	r6, #2
 7dc:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 7e0:	e5883108 	str	r3, [r8, #264]	; 0x108
 7e4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 7e8:	e1877000 	orr	r7, r7, r0
 7ec:	01830000 	orreq	r0, r3, r0
 7f0:	e1a05008 	mov	r5, r8
 7f4:	e5882088 	str	r2, [r8, #136]	; 0x88
 7f8:	e58c7188 	str	r7, [r12, #392]	; 0x188
 7fc:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 800:	eaffffe9 	b	7ac <__register_exitproc+0x94>
 804:	00000afc 	.word	0x00000afc
 808:	00000000 	.word	0x00000000

0000080c <__call_exitprocs>:
 80c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 810:	e59f3168 	ldr	r3, [pc, #360]	; 980 <__call_exitprocs+0x174>
 814:	e5933000 	ldr	r3, [r3]
 818:	e24dd014 	sub	sp, sp, #20
 81c:	e58d3004 	str	r3, [sp, #4]
 820:	e2833f52 	add	r3, r3, #328	; 0x148
 824:	e58d0008 	str	r0, [sp, #8]
 828:	e58d300c 	str	r3, [sp, #12]
 82c:	e1a07001 	mov	r7, r1
 830:	e3a08001 	mov	r8, #1
 834:	e59d3004 	ldr	r3, [sp, #4]
 838:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 83c:	e3560000 	cmp	r6, #0
 840:	e59db00c 	ldr	r11, [sp, #12]
 844:	0a000033 	beq	918 <__call_exitprocs+0x10c>
 848:	e5965004 	ldr	r5, [r6, #4]
 84c:	e2554001 	subs	r4, r5, #1
 850:	5286a088 	addpl	r10, r6, #136	; 0x88
 854:	5285501f 	addpl	r5, r5, #31
 858:	508a5105 	addpl	r5, r10, r5, lsl #2
 85c:	5a000007 	bpl	880 <__call_exitprocs+0x74>
 860:	ea000029 	b	90c <__call_exitprocs+0x100>
 864:	e5953000 	ldr	r3, [r5]
 868:	e1530007 	cmp	r3, r7
 86c:	0a000005 	beq	888 <__call_exitprocs+0x7c>
 870:	e2444001 	sub	r4, r4, #1
 874:	e3740001 	cmn	r4, #1
 878:	e2455004 	sub	r5, r5, #4
 87c:	0a000022 	beq	90c <__call_exitprocs+0x100>
 880:	e3570000 	cmp	r7, #0
 884:	1afffff6 	bne	864 <__call_exitprocs+0x58>
 888:	e5963004 	ldr	r3, [r6, #4]
 88c:	e06a2005 	rsb	r2, r10, r5
 890:	e2433001 	sub	r3, r3, #1
 894:	e0862002 	add	r2, r6, r2
 898:	e1530004 	cmp	r3, r4
 89c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 8a0:	13a01000 	movne	r1, #0
 8a4:	05864004 	streq	r4, [r6, #4]
 8a8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 8ac:	e3530000 	cmp	r3, #0
 8b0:	0affffee 	beq	870 <__call_exitprocs+0x64>
 8b4:	e1a02418 	lsl	r2, r8, r4
 8b8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8bc:	e1120001 	tst	r2, r1
 8c0:	e5969004 	ldr	r9, [r6, #4]
 8c4:	0a000016 	beq	924 <__call_exitprocs+0x118>
 8c8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8cc:	e1120001 	tst	r2, r1
 8d0:	1a000016 	bne	930 <__call_exitprocs+0x124>
 8d4:	e59d0008 	ldr	r0, [sp, #8]
 8d8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 8dc:	e1a0e00f 	mov	lr, pc
 8e0:	e12fff13 	bx	r3
 8e4:	e5963004 	ldr	r3, [r6, #4]
 8e8:	e1530009 	cmp	r3, r9
 8ec:	1affffd0 	bne	834 <__call_exitprocs+0x28>
 8f0:	e59b3000 	ldr	r3, [r11]
 8f4:	e1530006 	cmp	r3, r6
 8f8:	1affffcd 	bne	834 <__call_exitprocs+0x28>
 8fc:	e2444001 	sub	r4, r4, #1
 900:	e3740001 	cmn	r4, #1
 904:	e2455004 	sub	r5, r5, #4
 908:	1affffdc 	bne	880 <__call_exitprocs+0x74>
 90c:	e59f1070 	ldr	r1, [pc, #112]	; 984 <__call_exitprocs+0x178>
 910:	e3510000 	cmp	r1, #0
 914:	1a000009 	bne	940 <__call_exitprocs+0x134>
 918:	e28dd014 	add	sp, sp, #20
 91c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 920:	e12fff1e 	bx	lr
 924:	e1a0e00f 	mov	lr, pc
 928:	e12fff13 	bx	r3
 92c:	eaffffec 	b	8e4 <__call_exitprocs+0xd8>
 930:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 934:	e1a0e00f 	mov	lr, pc
 938:	e12fff13 	bx	r3
 93c:	eaffffe8 	b	8e4 <__call_exitprocs+0xd8>
 940:	e5963004 	ldr	r3, [r6, #4]
 944:	e3530000 	cmp	r3, #0
 948:	e5963000 	ldr	r3, [r6]
 94c:	1a000008 	bne	974 <__call_exitprocs+0x168>
 950:	e3530000 	cmp	r3, #0
 954:	0a000006 	beq	974 <__call_exitprocs+0x168>
 958:	e1a00006 	mov	r0, r6
 95c:	e58b3000 	str	r3, [r11]
 960:	e320f000 	nop	{0}
 964:	e59b6000 	ldr	r6, [r11]
 968:	e3560000 	cmp	r6, #0
 96c:	1affffb5 	bne	848 <__call_exitprocs+0x3c>
 970:	eaffffe8 	b	918 <__call_exitprocs+0x10c>
 974:	e1a0b006 	mov	r11, r6
 978:	e1a06003 	mov	r6, r3
 97c:	eafffff9 	b	968 <__call_exitprocs+0x15c>
 980:	00000afc 	.word	0x00000afc
 984:	00000000 	.word	0x00000000

00000988 <register_fini>:
 988:	e92d4008 	push	{r3, lr}
 98c:	e59f3010 	ldr	r3, [pc, #16]	; 9a4 <register_fini+0x1c>
 990:	e3530000 	cmp	r3, #0
 994:	159f000c 	ldrne	r0, [pc, #12]	; 9a8 <register_fini+0x20>
 998:	1bffff49 	blne	6c4 <atexit>
 99c:	e8bd4008 	pop	{r3, lr}
 9a0:	e12fff1e 	bx	lr
 9a4:	00000b24 	.word	0x00000b24
 9a8:	000009ac 	.word	0x000009ac

000009ac <__libc_fini_array>:
 9ac:	e92d4038 	push	{r3, r4, r5, lr}
 9b0:	e59f5030 	ldr	r5, [pc, #48]	; 9e8 <__libc_fini_array+0x3c>
 9b4:	e59f4030 	ldr	r4, [pc, #48]	; 9ec <__libc_fini_array+0x40>
 9b8:	e0654004 	rsb	r4, r5, r4
 9bc:	e1b04144 	asrs	r4, r4, #2
 9c0:	10855104 	addne	r5, r5, r4, lsl #2
 9c4:	0a000004 	beq	9dc <__libc_fini_array+0x30>
 9c8:	e5353004 	ldr	r3, [r5, #-4]!
 9cc:	e1a0e00f 	mov	lr, pc
 9d0:	e12fff13 	bx	r3
 9d4:	e2544001 	subs	r4, r4, #1
 9d8:	1afffffa 	bne	9c8 <__libc_fini_array+0x1c>
 9dc:	eb000050 	bl	b24 <__libc_fini>
 9e0:	e8bd4038 	pop	{r3, r4, r5, lr}
 9e4:	e12fff1e 	bx	lr
 9e8:	00000b3c 	.word	0x00000b3c
 9ec:	00000b40 	.word	0x00000b40

000009f0 <__cs3_premain>:
 9f0:	e92d4008 	push	{r3, lr}
 9f4:	eb00001d 	bl	a70 <__libc_init_array>
 9f8:	e59f3030 	ldr	r3, [pc, #48]	; a30 <__cs3_premain+0x40>
 9fc:	e3530000 	cmp	r3, #0
 a00:	15930000 	ldrne	r0, [r3]
 a04:	01a00003 	moveq	r0, r3
 a08:	e59f3024 	ldr	r3, [pc, #36]	; a34 <__cs3_premain+0x44>
 a0c:	e3530000 	cmp	r3, #0
 a10:	15931000 	ldrne	r1, [r3]
 a14:	01a01003 	moveq	r1, r3
 a18:	e3a02000 	mov	r2, #0
 a1c:	ebfffe0e 	bl	25c <main>
 a20:	e59f3010 	ldr	r3, [pc, #16]	; a38 <__cs3_premain+0x48>
 a24:	e3530000 	cmp	r3, #0
 a28:	1bffff2d 	blne	6e4 <exit>
 a2c:	eafffffe 	b	a2c <__cs3_premain+0x3c>
	...
 a38:	000006e4 	.word	0x000006e4

00000a3c <_exit>:
 a3c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a40:	e3a00018 	mov	r0, #24
 a44:	e59f1004 	ldr	r1, [pc, #4]	; a50 <_exit+0x14>
 a48:	ef123456 	svc	0x00123456
 a4c:	eafffffe 	b	a4c <_exit+0x10>
 a50:	00020026 	.word	0x00020026

00000a54 <__cs3_isr_interrupt>:
 a54:	eafffffe 	b	a54 <__cs3_isr_interrupt>

00000a58 <__cs3_isr_undef>:
 a58:	eafffffe 	b	a58 <__cs3_isr_undef>

00000a5c <__cs3_isr_swi>:
 a5c:	eafffffe 	b	a5c <__cs3_isr_swi>

00000a60 <__cs3_isr_pabort>:
 a60:	eafffffe 	b	a60 <__cs3_isr_pabort>

00000a64 <__cs3_isr_dabort>:
 a64:	eafffffe 	b	a64 <__cs3_isr_dabort>

00000a68 <__cs3_isr_irq>:
 a68:	eafffffe 	b	a68 <__cs3_isr_irq>

00000a6c <__cs3_isr_fiq>:
 a6c:	eafffffe 	b	a6c <__cs3_isr_fiq>

00000a70 <__libc_init_array>:
 a70:	e92d4070 	push	{r4, r5, r6, lr}
 a74:	e59f506c 	ldr	r5, [pc, #108]	; ae8 <__libc_init_array+0x78>
 a78:	e59f606c 	ldr	r6, [pc, #108]	; aec <__libc_init_array+0x7c>
 a7c:	e0656006 	rsb	r6, r5, r6
 a80:	e1b06146 	asrs	r6, r6, #2
 a84:	12455004 	subne	r5, r5, #4
 a88:	13a04000 	movne	r4, #0
 a8c:	0a000005 	beq	aa8 <__libc_init_array+0x38>
 a90:	e5b53004 	ldr	r3, [r5, #4]!
 a94:	e2844001 	add	r4, r4, #1
 a98:	e1a0e00f 	mov	lr, pc
 a9c:	e12fff13 	bx	r3
 aa0:	e1560004 	cmp	r6, r4
 aa4:	1afffff9 	bne	a90 <__libc_init_array+0x20>
 aa8:	e59f5040 	ldr	r5, [pc, #64]	; af0 <__libc_init_array+0x80>
 aac:	e59f6040 	ldr	r6, [pc, #64]	; af4 <__libc_init_array+0x84>
 ab0:	e0656006 	rsb	r6, r5, r6
 ab4:	eb000012 	bl	b04 <_init>
 ab8:	e1b06146 	asrs	r6, r6, #2
 abc:	12455004 	subne	r5, r5, #4
 ac0:	13a04000 	movne	r4, #0
 ac4:	0a000005 	beq	ae0 <__libc_init_array+0x70>
 ac8:	e5b53004 	ldr	r3, [r5, #4]!
 acc:	e2844001 	add	r4, r4, #1
 ad0:	e1a0e00f 	mov	lr, pc
 ad4:	e12fff13 	bx	r3
 ad8:	e1560004 	cmp	r6, r4
 adc:	1afffff9 	bne	ac8 <__libc_init_array+0x58>
 ae0:	e8bd4070 	pop	{r4, r5, r6, lr}
 ae4:	e12fff1e 	bx	lr
 ae8:	00000b1c 	.word	0x00000b1c
 aec:	00000b1c 	.word	0x00000b1c
 af0:	00000b1c 	.word	0x00000b1c
 af4:	00000b24 	.word	0x00000b24

Disassembly of section .rodata:

00000afc <_global_impure_ptr>:
 afc:	00000b68 00000043                       h...C...

00000b04 <_init>:
 b04:	e1a0c00d 	mov	r12, sp
 b08:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b0c:	e24cb004 	sub	r11, r12, #4
 b10:	e24bd028 	sub	sp, r11, #40	; 0x28
 b14:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b18:	e12fff1e 	bx	lr

00000b1c <__init_array_start>:
 b1c:	00000988 	.word	0x00000988

00000b20 <__frame_dummy_init_array_entry>:
 b20:	00000208                                ....

00000b24 <__libc_fini>:
 b24:	e1a0c00d 	mov	r12, sp
 b28:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b2c:	e24cb004 	sub	r11, r12, #4
 b30:	e24bd028 	sub	sp, r11, #40	; 0x28
 b34:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b38:	e12fff1e 	bx	lr

00000b3c <__fini_array_start>:
 b3c:	000001c4 	.word	0x000001c4

00000b40 <__cs3_regions>:
	...
 b4c:	00000f98 	.word	0x00000f98
 b50:	00000020 	.word	0x00000020

00000b54 <__cs3_regions_end>:
 b54:	00000000 	.word	0x00000000
