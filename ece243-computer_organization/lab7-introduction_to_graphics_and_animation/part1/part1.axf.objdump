
D:/Barney/OneDrive - University of Toronto/2. Homework/10. Computer Organization (ECE243)/Labs/Lab 7; Introduction to Graphics and Animation/part1/part1.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 9c 09 00 00 a0 09 00 00 a4 09 00 00     @...............
  30:	a8 09 00 00 98 09 00 00 ac 09 00 00 b0 09 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000216 	bl	934 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000a98 	.word	0x00000a98

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000ed0 	.word	0x00000ed0

00000124 <__cs3_heap_start_ptr>:
 124:	00000ef8 	.word	0x00000ef8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000ed8 	.word	0x00000ed8
 170:	00000edb 	.word	0x00000edb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000ed8 	.word	0x00000ed8
 1bc:	00000ed8 	.word	0x00000ed8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000ed8 	.word	0x00000ed8
 200:	00000000 	.word	0x00000000
 204:	00000a3c 	.word	0x00000a3c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a3c 	.word	0x00000a3c
 250:	00000edc 	.word	0x00000edc
 254:	00000a98 	.word	0x00000a98
 258:	00000000 	.word	0x00000000

0000025c <main>:
void draw_line(int x0, int y0, int x1, int y1, int colour);

volatile int pixel_buffer_start; // global variable

int main(void)
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
 268:	e3033020 	movw	r3, #12320	; 0x3020
 26c:	e34f3f20 	movt	r3, #65312	; 0xff20
 270:	e50b3008 	str	r3, [r11, #-8]
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_buffer_start = *pixel_ctrl_ptr;
 274:	e51b3008 	ldr	r3, [r11, #-8]
 278:	e5932000 	ldr	r2, [r3]
 27c:	e3003ef4 	movw	r3, #3828	; 0xef4
 280:	e3403000 	movt	r3, #0
 284:	e5832000 	str	r2, [r3]

    clear_screen();
 288:	eb000033 	bl	35c <clear_screen>
    draw_line(0, 0, 150, 150, 0x001F);   // this line is blue
 28c:	e3a0301f 	mov	r3, #31
 290:	e58d3000 	str	r3, [sp]
 294:	e3a00000 	mov	r0, #0
 298:	e3a01000 	mov	r1, #0
 29c:	e3a02096 	mov	r2, #150	; 0x96
 2a0:	e3a03096 	mov	r3, #150	; 0x96
 2a4:	eb00004c 	bl	3dc <draw_line>
    draw_line(150, 150, 319, 0, 0x07E0); // this line is green
 2a8:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 2ac:	e58d3000 	str	r3, [sp]
 2b0:	e3a00096 	mov	r0, #150	; 0x96
 2b4:	e3a01096 	mov	r1, #150	; 0x96
 2b8:	e300213f 	movw	r2, #319	; 0x13f
 2bc:	e3a03000 	mov	r3, #0
 2c0:	eb000045 	bl	3dc <draw_line>
    draw_line(0, 239, 319, 239, 0xF800); // this line is red
 2c4:	e3a03b3e 	mov	r3, #63488	; 0xf800
 2c8:	e58d3000 	str	r3, [sp]
 2cc:	e3a00000 	mov	r0, #0
 2d0:	e3a010ef 	mov	r1, #239	; 0xef
 2d4:	e300213f 	movw	r2, #319	; 0x13f
 2d8:	e3a030ef 	mov	r3, #239	; 0xef
 2dc:	eb00003e 	bl	3dc <draw_line>
    draw_line(230, 10, 100, 50, 0xF81F); // this line is a pink color
 2e0:	e30f381f 	movw	r3, #63519	; 0xf81f
 2e4:	e58d3000 	str	r3, [sp]
 2e8:	e3a000e6 	mov	r0, #230	; 0xe6
 2ec:	e3a0100a 	mov	r1, #10
 2f0:	e3a02064 	mov	r2, #100	; 0x64
 2f4:	e3a03032 	mov	r3, #50	; 0x32
 2f8:	eb000037 	bl	3dc <draw_line>
}
 2fc:	e1a00003 	mov	r0, r3
 300:	e24bd004 	sub	sp, r11, #4
 304:	e8bd8800 	pop	{r11, pc}

00000308 <plot_pixel>:

// code not shown for clear_screen() and draw_line() subroutines

void plot_pixel(int x, int y, short int line_color) {
 308:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 30c:	e28db000 	add	r11, sp, #0
 310:	e24dd014 	sub	sp, sp, #20
 314:	e50b0008 	str	r0, [r11, #-8]
 318:	e50b100c 	str	r1, [r11, #-12]
 31c:	e1a03002 	mov	r3, r2
 320:	e14b30be 	strh	r3, [r11, #-14]
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 324:	e51b300c 	ldr	r3, [r11, #-12]
 328:	e1a02503 	lsl	r2, r3, #10
 32c:	e3003ef4 	movw	r3, #3828	; 0xef4
 330:	e3403000 	movt	r3, #0
 334:	e5933000 	ldr	r3, [r3]
 338:	e0822003 	add	r2, r2, r3
 33c:	e51b3008 	ldr	r3, [r11, #-8]
 340:	e1a03083 	lsl	r3, r3, #1
 344:	e0823003 	add	r3, r2, r3
 348:	e15b20be 	ldrh	r2, [r11, #-14]
 34c:	e1c320b0 	strh	r2, [r3]
}
 350:	e28bd000 	add	sp, r11, #0
 354:	e8bd0800 	ldmfd	sp!, {r11}
 358:	e12fff1e 	bx	lr

0000035c <clear_screen>:

void clear_screen() {
 35c:	e92d4800 	push	{r11, lr}
 360:	e28db004 	add	r11, sp, #4
 364:	e24dd008 	sub	sp, sp, #8
	int x = 0;
 368:	e3a03000 	mov	r3, #0
 36c:	e50b3008 	str	r3, [r11, #-8]
	int y = 0;
 370:	e3a03000 	mov	r3, #0
 374:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < 320; x++)
 378:	e3a03000 	mov	r3, #0
 37c:	e50b3008 	str	r3, [r11, #-8]
 380:	ea00000f 	b	3c4 <clear_screen+0x68>
        for (y = 0; y < 240; y++)
 384:	e3a03000 	mov	r3, #0
 388:	e50b300c 	str	r3, [r11, #-12]
 38c:	ea000006 	b	3ac <clear_screen+0x50>
            plot_pixel(x, y, 0x0);
 390:	e51b0008 	ldr	r0, [r11, #-8]
 394:	e51b100c 	ldr	r1, [r11, #-12]
 398:	e3a02000 	mov	r2, #0
 39c:	ebffffd9 	bl	308 <plot_pixel>

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
        for (y = 0; y < 240; y++)
 3a0:	e51b300c 	ldr	r3, [r11, #-12]
 3a4:	e2833001 	add	r3, r3, #1
 3a8:	e50b300c 	str	r3, [r11, #-12]
 3ac:	e51b300c 	ldr	r3, [r11, #-12]
 3b0:	e35300ef 	cmp	r3, #239	; 0xef
 3b4:	dafffff5 	ble	390 <clear_screen+0x34>
}

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
 3b8:	e51b3008 	ldr	r3, [r11, #-8]
 3bc:	e2833001 	add	r3, r3, #1
 3c0:	e50b3008 	str	r3, [r11, #-8]
 3c4:	e51b2008 	ldr	r2, [r11, #-8]
 3c8:	e300313f 	movw	r3, #319	; 0x13f
 3cc:	e1520003 	cmp	r2, r3
 3d0:	daffffeb 	ble	384 <clear_screen+0x28>
        for (y = 0; y < 240; y++)
            plot_pixel(x, y, 0x0);
}
 3d4:	e24bd004 	sub	sp, r11, #4
 3d8:	e8bd8800 	pop	{r11, pc}

000003dc <draw_line>:

void draw_line(int x0, int y0, int x1, int y1, int colour) {
 3dc:	e92d4800 	push	{r11, lr}
 3e0:	e28db004 	add	r11, sp, #4
 3e4:	e24dd038 	sub	sp, sp, #56	; 0x38
 3e8:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
 3ec:	e50b1034 	str	r1, [r11, #-52]	; 0xffffffcc
 3f0:	e50b2038 	str	r2, [r11, #-56]	; 0xffffffc8
 3f4:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
 3f8:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 3fc:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 400:	e0633002 	rsb	r3, r3, r2
 404:	e0232fc3 	eor	r2, r3, r3, asr #31
 408:	e0422fc3 	sub	r2, r2, r3, asr #31
 40c:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
 410:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 414:	e0633001 	rsb	r3, r3, r1
 418:	e3530000 	cmp	r3, #0
 41c:	b2633000 	rsblt	r3, r3, #0
 420:	e1520003 	cmp	r2, r3
 424:	d3a03000 	movle	r3, #0
 428:	c3a03001 	movgt	r3, #1
 42c:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	int temp = 0;
 430:	e3a03000 	mov	r3, #0
 434:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    // if slope is greater than 1, set pivot to y instead of x
    if (is_steep) {
 438:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 43c:	e3530000 	cmp	r3, #0
 440:	0a00000b 	beq	474 <draw_line+0x98>
		// swap x0, y0
		temp = x0;
 444:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 448:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = y0;
 44c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 450:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		y0 = temp;
 454:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 458:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		// swap x1, y1
		temp = x1;
 45c:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 460:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x1 = y1;
 464:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
 468:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		y1 = temp;
 46c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 470:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // start at the lowest pivot position with x0
    if (x0 > x1) {
 474:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
 478:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 47c:	e1520003 	cmp	r2, r3
 480:	da00000b 	ble	4b4 <draw_line+0xd8>
		// swap x0, x1
		temp = x0;
 484:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 488:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = x1;
 48c:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 490:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		x1 = temp;
 494:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 498:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		// swap y0, y1
		temp = y0;
 49c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 4a0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		y0 = y1;
 4a4:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
 4a8:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		y1 = temp;
 4ac:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
 4b0:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // declare variables
    int dx = x1 - x0;
 4b4:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
 4b8:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 4bc:	e0633002 	rsb	r3, r3, r2
 4c0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int dy = abs(y1 - y0);
 4c4:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 4c8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 4cc:	e0633002 	rsb	r3, r3, r2
 4d0:	e3530000 	cmp	r3, #0
 4d4:	b2633000 	rsblt	r3, r3, #0
 4d8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int dx2 = 2 * dx;
 4dc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 4e0:	e1a03083 	lsl	r3, r3, #1
 4e4:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int dy2 = 2 * dy;
 4e8:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
 4ec:	e1a03083 	lsl	r3, r3, #1
 4f0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    int error = dy2 - dx;
 4f4:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
 4f8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 4fc:	e0633002 	rsb	r3, r3, r2
 500:	e50b3008 	str	r3, [r11, #-8]
    int y = y0;
 504:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 508:	e50b300c 	str	r3, [r11, #-12]
    // determine step value
    int step = 1;
 50c:	e3a03001 	mov	r3, #1
 510:	e50b3010 	str	r3, [r11, #-16]
    if (y1 - y0 < 0)    step = -1;
 514:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
 518:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
 51c:	e0633002 	rsb	r3, r3, r2
 520:	e3530000 	cmp	r3, #0
 524:	aa000001 	bge	530 <draw_line+0x154>
 528:	e3e03000 	mvn	r3, #0
 52c:	e50b3010 	str	r3, [r11, #-16]
    // plot initial point
    plot_pixel(x0, y0, colour);
 530:	e59b3004 	ldr	r3, [r11, #4]
 534:	e6ff3073 	uxth	r3, r3
 538:	e6bf3073 	sxth	r3, r3
 53c:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
 540:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
 544:	e1a02003 	mov	r2, r3
 548:	ebffff6e 	bl	308 <plot_pixel>
    // plot subsequent points
	int x = 0;
 54c:	e3a03000 	mov	r3, #0
 550:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    for (x = x0 + 1; x < x1; x++) {
 554:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
 558:	e2833001 	add	r3, r3, #1
 55c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 560:	ea000022 	b	5f0 <draw_line+0x214>
        if (error < 0) {
 564:	e51b3008 	ldr	r3, [r11, #-8]
 568:	e3530000 	cmp	r3, #0
 56c:	aa00000b 	bge	5a0 <draw_line+0x1c4>
            plot_pixel(x, y, colour);
 570:	e59b3004 	ldr	r3, [r11, #4]
 574:	e6ff3073 	uxth	r3, r3
 578:	e6bf3073 	sxth	r3, r3
 57c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
 580:	e51b100c 	ldr	r1, [r11, #-12]
 584:	e1a02003 	mov	r2, r3
 588:	ebffff5e 	bl	308 <plot_pixel>
            error += dy2;
 58c:	e51b2008 	ldr	r2, [r11, #-8]
 590:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
 594:	e0823003 	add	r3, r2, r3
 598:	e50b3008 	str	r3, [r11, #-8]
            continue;
 59c:	ea000010 	b	5e4 <draw_line+0x208>
        }
        else {
            y += step;
 5a0:	e51b200c 	ldr	r2, [r11, #-12]
 5a4:	e51b3010 	ldr	r3, [r11, #-16]
 5a8:	e0823003 	add	r3, r2, r3
 5ac:	e50b300c 	str	r3, [r11, #-12]
            plot_pixel(x, y, colour);
 5b0:	e59b3004 	ldr	r3, [r11, #4]
 5b4:	e6ff3073 	uxth	r3, r3
 5b8:	e6bf3073 	sxth	r3, r3
 5bc:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
 5c0:	e51b100c 	ldr	r1, [r11, #-12]
 5c4:	e1a02003 	mov	r2, r3
 5c8:	ebffff4e 	bl	308 <plot_pixel>
            error += dy2 - dx2;
 5cc:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
 5d0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
 5d4:	e0633002 	rsb	r3, r3, r2
 5d8:	e51b2008 	ldr	r2, [r11, #-8]
 5dc:	e0823003 	add	r3, r2, r3
 5e0:	e50b3008 	str	r3, [r11, #-8]
    if (y1 - y0 < 0)    step = -1;
    // plot initial point
    plot_pixel(x0, y0, colour);
    // plot subsequent points
	int x = 0;
    for (x = x0 + 1; x < x1; x++) {
 5e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 5e8:	e2833001 	add	r3, r3, #1
 5ec:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
 5f0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 5f4:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
 5f8:	e1520003 	cmp	r2, r3
 5fc:	baffffd8 	blt	564 <draw_line+0x188>
            y += step;
            plot_pixel(x, y, colour);
            error += dy2 - dx2;
        }
    }
}
 600:	e24bd004 	sub	sp, r11, #4
 604:	e8bd8800 	pop	{r11, pc}

00000608 <atexit>:
 608:	e1a01000 	mov	r1, r0
 60c:	e3a00000 	mov	r0, #0
 610:	e92d4008 	push	{r3, lr}
 614:	e1a02000 	mov	r2, r0
 618:	e1a03000 	mov	r3, r0
 61c:	eb00000e 	bl	65c <__register_exitproc>
 620:	e8bd4008 	pop	{r3, lr}
 624:	e12fff1e 	bx	lr

00000628 <exit>:
 628:	e92d4008 	push	{r3, lr}
 62c:	e3a01000 	mov	r1, #0
 630:	e1a04000 	mov	r4, r0
 634:	eb000045 	bl	750 <__call_exitprocs>
 638:	e59f3018 	ldr	r3, [pc, #24]	; 658 <exit+0x30>
 63c:	e5930000 	ldr	r0, [r3]
 640:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 644:	e3530000 	cmp	r3, #0
 648:	11a0e00f 	movne	lr, pc
 64c:	112fff13 	bxne	r3
 650:	e1a00004 	mov	r0, r4
 654:	eb0000c9 	bl	980 <_exit>
 658:	00000a40 	.word	0x00000a40

0000065c <__register_exitproc>:
 65c:	e59fc0e4 	ldr	r12, [pc, #228]	; 748 <__register_exitproc+0xec>
 660:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 664:	e59c4000 	ldr	r4, [r12]
 668:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 66c:	e35c0000 	cmp	r12, #0
 670:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 674:	e59c5004 	ldr	r5, [r12, #4]
 678:	0584c148 	streq	r12, [r4, #328]	; 0x148
 67c:	e355001f 	cmp	r5, #31
 680:	e24dd010 	sub	sp, sp, #16
 684:	e1a06000 	mov	r6, r0
 688:	da000015 	ble	6e4 <__register_exitproc+0x88>
 68c:	e59f00b8 	ldr	r0, [pc, #184]	; 74c <__register_exitproc+0xf0>
 690:	e3500000 	cmp	r0, #0
 694:	1a000001 	bne	6a0 <__register_exitproc+0x44>
 698:	e3e00000 	mvn	r0, #0
 69c:	ea000018 	b	704 <__register_exitproc+0xa8>
 6a0:	e3a00e19 	mov	r0, #400	; 0x190
 6a4:	e58d100c 	str	r1, [sp, #12]
 6a8:	e58d2008 	str	r2, [sp, #8]
 6ac:	e58d3004 	str	r3, [sp, #4]
 6b0:	e320f000 	nop	{0}
 6b4:	e250c000 	subs	r12, r0, #0
 6b8:	e59d100c 	ldr	r1, [sp, #12]
 6bc:	e59d2008 	ldr	r2, [sp, #8]
 6c0:	e59d3004 	ldr	r3, [sp, #4]
 6c4:	0afffff3 	beq	698 <__register_exitproc+0x3c>
 6c8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 6cc:	e3a00000 	mov	r0, #0
 6d0:	e58c0004 	str	r0, [r12, #4]
 6d4:	e58c5000 	str	r5, [r12]
 6d8:	e584c148 	str	r12, [r4, #328]	; 0x148
 6dc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 6e0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 6e4:	e3560000 	cmp	r6, #0
 6e8:	e59c4004 	ldr	r4, [r12, #4]
 6ec:	1a000007 	bne	710 <__register_exitproc+0xb4>
 6f0:	e2843002 	add	r3, r4, #2
 6f4:	e2844001 	add	r4, r4, #1
 6f8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 6fc:	e58c4004 	str	r4, [r12, #4]
 700:	e3a00000 	mov	r0, #0
 704:	e28dd010 	add	sp, sp, #16
 708:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 70c:	e12fff1e 	bx	lr
 710:	e3a00001 	mov	r0, #1
 714:	e1a00410 	lsl	r0, r0, r4
 718:	e08c8104 	add	r8, r12, r4, lsl #2
 71c:	e3560002 	cmp	r6, #2
 720:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 724:	e5883108 	str	r3, [r8, #264]	; 0x108
 728:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 72c:	e1877000 	orr	r7, r7, r0
 730:	01830000 	orreq	r0, r3, r0
 734:	e1a05008 	mov	r5, r8
 738:	e5882088 	str	r2, [r8, #136]	; 0x88
 73c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 740:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 744:	eaffffe9 	b	6f0 <__register_exitproc+0x94>
 748:	00000a40 	.word	0x00000a40
 74c:	00000000 	.word	0x00000000

00000750 <__call_exitprocs>:
 750:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 754:	e59f3168 	ldr	r3, [pc, #360]	; 8c4 <__call_exitprocs+0x174>
 758:	e5933000 	ldr	r3, [r3]
 75c:	e24dd014 	sub	sp, sp, #20
 760:	e58d3004 	str	r3, [sp, #4]
 764:	e2833f52 	add	r3, r3, #328	; 0x148
 768:	e58d0008 	str	r0, [sp, #8]
 76c:	e58d300c 	str	r3, [sp, #12]
 770:	e1a07001 	mov	r7, r1
 774:	e3a08001 	mov	r8, #1
 778:	e59d3004 	ldr	r3, [sp, #4]
 77c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 780:	e3560000 	cmp	r6, #0
 784:	e59db00c 	ldr	r11, [sp, #12]
 788:	0a000033 	beq	85c <__call_exitprocs+0x10c>
 78c:	e5965004 	ldr	r5, [r6, #4]
 790:	e2554001 	subs	r4, r5, #1
 794:	5286a088 	addpl	r10, r6, #136	; 0x88
 798:	5285501f 	addpl	r5, r5, #31
 79c:	508a5105 	addpl	r5, r10, r5, lsl #2
 7a0:	5a000007 	bpl	7c4 <__call_exitprocs+0x74>
 7a4:	ea000029 	b	850 <__call_exitprocs+0x100>
 7a8:	e5953000 	ldr	r3, [r5]
 7ac:	e1530007 	cmp	r3, r7
 7b0:	0a000005 	beq	7cc <__call_exitprocs+0x7c>
 7b4:	e2444001 	sub	r4, r4, #1
 7b8:	e3740001 	cmn	r4, #1
 7bc:	e2455004 	sub	r5, r5, #4
 7c0:	0a000022 	beq	850 <__call_exitprocs+0x100>
 7c4:	e3570000 	cmp	r7, #0
 7c8:	1afffff6 	bne	7a8 <__call_exitprocs+0x58>
 7cc:	e5963004 	ldr	r3, [r6, #4]
 7d0:	e06a2005 	rsb	r2, r10, r5
 7d4:	e2433001 	sub	r3, r3, #1
 7d8:	e0862002 	add	r2, r6, r2
 7dc:	e1530004 	cmp	r3, r4
 7e0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 7e4:	13a01000 	movne	r1, #0
 7e8:	05864004 	streq	r4, [r6, #4]
 7ec:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 7f0:	e3530000 	cmp	r3, #0
 7f4:	0affffee 	beq	7b4 <__call_exitprocs+0x64>
 7f8:	e1a02418 	lsl	r2, r8, r4
 7fc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 800:	e1120001 	tst	r2, r1
 804:	e5969004 	ldr	r9, [r6, #4]
 808:	0a000016 	beq	868 <__call_exitprocs+0x118>
 80c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 810:	e1120001 	tst	r2, r1
 814:	1a000016 	bne	874 <__call_exitprocs+0x124>
 818:	e59d0008 	ldr	r0, [sp, #8]
 81c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 820:	e1a0e00f 	mov	lr, pc
 824:	e12fff13 	bx	r3
 828:	e5963004 	ldr	r3, [r6, #4]
 82c:	e1530009 	cmp	r3, r9
 830:	1affffd0 	bne	778 <__call_exitprocs+0x28>
 834:	e59b3000 	ldr	r3, [r11]
 838:	e1530006 	cmp	r3, r6
 83c:	1affffcd 	bne	778 <__call_exitprocs+0x28>
 840:	e2444001 	sub	r4, r4, #1
 844:	e3740001 	cmn	r4, #1
 848:	e2455004 	sub	r5, r5, #4
 84c:	1affffdc 	bne	7c4 <__call_exitprocs+0x74>
 850:	e59f1070 	ldr	r1, [pc, #112]	; 8c8 <__call_exitprocs+0x178>
 854:	e3510000 	cmp	r1, #0
 858:	1a000009 	bne	884 <__call_exitprocs+0x134>
 85c:	e28dd014 	add	sp, sp, #20
 860:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 864:	e12fff1e 	bx	lr
 868:	e1a0e00f 	mov	lr, pc
 86c:	e12fff13 	bx	r3
 870:	eaffffec 	b	828 <__call_exitprocs+0xd8>
 874:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 878:	e1a0e00f 	mov	lr, pc
 87c:	e12fff13 	bx	r3
 880:	eaffffe8 	b	828 <__call_exitprocs+0xd8>
 884:	e5963004 	ldr	r3, [r6, #4]
 888:	e3530000 	cmp	r3, #0
 88c:	e5963000 	ldr	r3, [r6]
 890:	1a000008 	bne	8b8 <__call_exitprocs+0x168>
 894:	e3530000 	cmp	r3, #0
 898:	0a000006 	beq	8b8 <__call_exitprocs+0x168>
 89c:	e1a00006 	mov	r0, r6
 8a0:	e58b3000 	str	r3, [r11]
 8a4:	e320f000 	nop	{0}
 8a8:	e59b6000 	ldr	r6, [r11]
 8ac:	e3560000 	cmp	r6, #0
 8b0:	1affffb5 	bne	78c <__call_exitprocs+0x3c>
 8b4:	eaffffe8 	b	85c <__call_exitprocs+0x10c>
 8b8:	e1a0b006 	mov	r11, r6
 8bc:	e1a06003 	mov	r6, r3
 8c0:	eafffff9 	b	8ac <__call_exitprocs+0x15c>
 8c4:	00000a40 	.word	0x00000a40
 8c8:	00000000 	.word	0x00000000

000008cc <register_fini>:
 8cc:	e92d4008 	push	{r3, lr}
 8d0:	e59f3010 	ldr	r3, [pc, #16]	; 8e8 <register_fini+0x1c>
 8d4:	e3530000 	cmp	r3, #0
 8d8:	159f000c 	ldrne	r0, [pc, #12]	; 8ec <register_fini+0x20>
 8dc:	1bffff49 	blne	608 <atexit>
 8e0:	e8bd4008 	pop	{r3, lr}
 8e4:	e12fff1e 	bx	lr
 8e8:	00000a68 	.word	0x00000a68
 8ec:	000008f0 	.word	0x000008f0

000008f0 <__libc_fini_array>:
 8f0:	e92d4038 	push	{r3, r4, r5, lr}
 8f4:	e59f5030 	ldr	r5, [pc, #48]	; 92c <__libc_fini_array+0x3c>
 8f8:	e59f4030 	ldr	r4, [pc, #48]	; 930 <__libc_fini_array+0x40>
 8fc:	e0654004 	rsb	r4, r5, r4
 900:	e1b04144 	asrs	r4, r4, #2
 904:	10855104 	addne	r5, r5, r4, lsl #2
 908:	0a000004 	beq	920 <__libc_fini_array+0x30>
 90c:	e5353004 	ldr	r3, [r5, #-4]!
 910:	e1a0e00f 	mov	lr, pc
 914:	e12fff13 	bx	r3
 918:	e2544001 	subs	r4, r4, #1
 91c:	1afffffa 	bne	90c <__libc_fini_array+0x1c>
 920:	eb000050 	bl	a68 <__libc_fini>
 924:	e8bd4038 	pop	{r3, r4, r5, lr}
 928:	e12fff1e 	bx	lr
 92c:	00000a80 	.word	0x00000a80
 930:	00000a84 	.word	0x00000a84

00000934 <__cs3_premain>:
 934:	e92d4008 	push	{r3, lr}
 938:	eb00001d 	bl	9b4 <__libc_init_array>
 93c:	e59f3030 	ldr	r3, [pc, #48]	; 974 <__cs3_premain+0x40>
 940:	e3530000 	cmp	r3, #0
 944:	15930000 	ldrne	r0, [r3]
 948:	01a00003 	moveq	r0, r3
 94c:	e59f3024 	ldr	r3, [pc, #36]	; 978 <__cs3_premain+0x44>
 950:	e3530000 	cmp	r3, #0
 954:	15931000 	ldrne	r1, [r3]
 958:	01a01003 	moveq	r1, r3
 95c:	e3a02000 	mov	r2, #0
 960:	ebfffe3d 	bl	25c <main>
 964:	e59f3010 	ldr	r3, [pc, #16]	; 97c <__cs3_premain+0x48>
 968:	e3530000 	cmp	r3, #0
 96c:	1bffff2d 	blne	628 <exit>
 970:	eafffffe 	b	970 <__cs3_premain+0x3c>
	...
 97c:	00000628 	.word	0x00000628

00000980 <_exit>:
 980:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 984:	e3a00018 	mov	r0, #24
 988:	e59f1004 	ldr	r1, [pc, #4]	; 994 <_exit+0x14>
 98c:	ef123456 	svc	0x00123456
 990:	eafffffe 	b	990 <_exit+0x10>
 994:	00020026 	.word	0x00020026

00000998 <__cs3_isr_interrupt>:
 998:	eafffffe 	b	998 <__cs3_isr_interrupt>

0000099c <__cs3_isr_undef>:
 99c:	eafffffe 	b	99c <__cs3_isr_undef>

000009a0 <__cs3_isr_swi>:
 9a0:	eafffffe 	b	9a0 <__cs3_isr_swi>

000009a4 <__cs3_isr_pabort>:
 9a4:	eafffffe 	b	9a4 <__cs3_isr_pabort>

000009a8 <__cs3_isr_dabort>:
 9a8:	eafffffe 	b	9a8 <__cs3_isr_dabort>

000009ac <__cs3_isr_irq>:
 9ac:	eafffffe 	b	9ac <__cs3_isr_irq>

000009b0 <__cs3_isr_fiq>:
 9b0:	eafffffe 	b	9b0 <__cs3_isr_fiq>

000009b4 <__libc_init_array>:
 9b4:	e92d4070 	push	{r4, r5, r6, lr}
 9b8:	e59f506c 	ldr	r5, [pc, #108]	; a2c <__libc_init_array+0x78>
 9bc:	e59f606c 	ldr	r6, [pc, #108]	; a30 <__libc_init_array+0x7c>
 9c0:	e0656006 	rsb	r6, r5, r6
 9c4:	e1b06146 	asrs	r6, r6, #2
 9c8:	12455004 	subne	r5, r5, #4
 9cc:	13a04000 	movne	r4, #0
 9d0:	0a000005 	beq	9ec <__libc_init_array+0x38>
 9d4:	e5b53004 	ldr	r3, [r5, #4]!
 9d8:	e2844001 	add	r4, r4, #1
 9dc:	e1a0e00f 	mov	lr, pc
 9e0:	e12fff13 	bx	r3
 9e4:	e1560004 	cmp	r6, r4
 9e8:	1afffff9 	bne	9d4 <__libc_init_array+0x20>
 9ec:	e59f5040 	ldr	r5, [pc, #64]	; a34 <__libc_init_array+0x80>
 9f0:	e59f6040 	ldr	r6, [pc, #64]	; a38 <__libc_init_array+0x84>
 9f4:	e0656006 	rsb	r6, r5, r6
 9f8:	eb000012 	bl	a48 <_init>
 9fc:	e1b06146 	asrs	r6, r6, #2
 a00:	12455004 	subne	r5, r5, #4
 a04:	13a04000 	movne	r4, #0
 a08:	0a000005 	beq	a24 <__libc_init_array+0x70>
 a0c:	e5b53004 	ldr	r3, [r5, #4]!
 a10:	e2844001 	add	r4, r4, #1
 a14:	e1a0e00f 	mov	lr, pc
 a18:	e12fff13 	bx	r3
 a1c:	e1560004 	cmp	r6, r4
 a20:	1afffff9 	bne	a0c <__libc_init_array+0x58>
 a24:	e8bd4070 	pop	{r4, r5, r6, lr}
 a28:	e12fff1e 	bx	lr
 a2c:	00000a60 	.word	0x00000a60
 a30:	00000a60 	.word	0x00000a60
 a34:	00000a60 	.word	0x00000a60
 a38:	00000a68 	.word	0x00000a68

Disassembly of section .rodata:

00000a40 <_global_impure_ptr>:
 a40:	00000aa8 00000043                       ....C...

00000a48 <_init>:
 a48:	e1a0c00d 	mov	r12, sp
 a4c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a50:	e24cb004 	sub	r11, r12, #4
 a54:	e24bd028 	sub	sp, r11, #40	; 0x28
 a58:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a5c:	e12fff1e 	bx	lr

00000a60 <__init_array_start>:
 a60:	000008cc 	.word	0x000008cc

00000a64 <__frame_dummy_init_array_entry>:
 a64:	00000208                                ....

00000a68 <__libc_fini>:
 a68:	e1a0c00d 	mov	r12, sp
 a6c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a70:	e24cb004 	sub	r11, r12, #4
 a74:	e24bd028 	sub	sp, r11, #40	; 0x28
 a78:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a7c:	e12fff1e 	bx	lr

00000a80 <__fini_array_start>:
 a80:	000001c4 	.word	0x000001c4

00000a84 <__cs3_regions>:
	...
 a90:	00000ed8 	.word	0x00000ed8
 a94:	00000020 	.word	0x00000020
