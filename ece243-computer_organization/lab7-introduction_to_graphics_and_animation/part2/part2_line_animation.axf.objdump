
D:/Barney/OneDrive - University of Toronto/2. Homework/10. Computer Organization (ECE243)/Labs/Lab 7; Introduction to Graphics and Animation/part2/part2_line_animation.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 e0 1a 00 00 e4 1a 00 00 e8 1a 00 00     @...............
      30:	ec 1a 00 00 dc 1a 00 00 f0 1a 00 00 f4 1a 00 00     ................

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x78>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x74>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x7c>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x44>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x44>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x2c>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x64>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x54>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x4>
      d4:	eb000638 	bl	19bc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001bec 	.word	0x00001bec

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002438 	.word	0x00002438

00000124 <__cs3_heap_start_ptr>:
     124:	000024a0 	.word	0x000024a0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002440 	.word	0x00002440
     170:	00002443 	.word	0x00002443
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002440 	.word	0x00002440
     1bc:	00002440 	.word	0x00002440
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002440 	.word	0x00002440
     200:	00000000 	.word	0x00000000
     204:	00001b90 	.word	0x00001b90

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001b90 	.word	0x00001b90
     250:	00002444 	.word	0x00002444
     254:	00001bf0 	.word	0x00001bf0
     258:	00000000 	.word	0x00000000

0000025c <main>:
void draw_line(int x0, int y0, int x1, int y1, int colour);

volatile int pixel_buffer_start; // global variable
volatile int* pixel_ctrl_ptr;

int main(void) {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd048 	sub	sp, sp, #72	; 0x48
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_ctrl_ptr = (int*)0xFF203020;
     268:	e3023460 	movw	r3, #9312	; 0x2460
     26c:	e3403000 	movt	r3, #0
     270:	e3032020 	movw	r2, #12320	; 0x3020
     274:	e34f2f20 	movt	r2, #65312	; 0xff20
     278:	e5832000 	str	r2, [r3]
    pixel_buffer_start = *pixel_ctrl_ptr;
     27c:	e3023460 	movw	r3, #9312	; 0x2460
     280:	e3403000 	movt	r3, #0
     284:	e5933000 	ldr	r3, [r3]
     288:	e5932000 	ldr	r2, [r3]
     28c:	e302345c 	movw	r3, #9308	; 0x245c
     290:	e3403000 	movt	r3, #0
     294:	e5832000 	str	r2, [r3]
    // Initialize variables
    srand(time(NULL));
     298:	e3a00000 	mov	r0, #0
     29c:	eb0001d3 	bl	9f0 <time>
     2a0:	e1a03000 	mov	r3, r0
     2a4:	e1a00003 	mov	r0, r3
     2a8:	eb0001b2 	bl	978 <srand>
    int x0 = rand() % 320;
     2ac:	eb0001b8 	bl	994 <rand>
     2b0:	e1a02000 	mov	r2, r0
     2b4:	e3063667 	movw	r3, #26215	; 0x6667
     2b8:	e3463666 	movt	r3, #26214	; 0x6666
     2bc:	e0c31293 	smull	r1, r3, r3, r2
     2c0:	e1a013c3 	asr	r1, r3, #7
     2c4:	e1a03fc2 	asr	r3, r2, #31
     2c8:	e0631001 	rsb	r1, r3, r1
     2cc:	e1a03001 	mov	r3, r1
     2d0:	e1a03103 	lsl	r3, r3, #2
     2d4:	e0833001 	add	r3, r3, r1
     2d8:	e1a03303 	lsl	r3, r3, #6
     2dc:	e0633002 	rsb	r3, r3, r2
     2e0:	e50b3008 	str	r3, [r11, #-8]
    int x1 = rand() % 320;
     2e4:	eb0001aa 	bl	994 <rand>
     2e8:	e1a02000 	mov	r2, r0
     2ec:	e3063667 	movw	r3, #26215	; 0x6667
     2f0:	e3463666 	movt	r3, #26214	; 0x6666
     2f4:	e0c31293 	smull	r1, r3, r3, r2
     2f8:	e1a013c3 	asr	r1, r3, #7
     2fc:	e1a03fc2 	asr	r3, r2, #31
     300:	e0631001 	rsb	r1, r3, r1
     304:	e1a03001 	mov	r3, r1
     308:	e1a03103 	lsl	r3, r3, #2
     30c:	e0833001 	add	r3, r3, r1
     310:	e1a03303 	lsl	r3, r3, #6
     314:	e0633002 	rsb	r3, r3, r2
     318:	e50b300c 	str	r3, [r11, #-12]
    int y0 = rand() % 240;
     31c:	eb00019c 	bl	994 <rand>
     320:	e1a02000 	mov	r2, r0
     324:	e3083889 	movw	r3, #34953	; 0x8889
     328:	e3483888 	movt	r3, #34952	; 0x8888
     32c:	e0c31293 	smull	r1, r3, r3, r2
     330:	e0833002 	add	r3, r3, r2
     334:	e1a013c3 	asr	r1, r3, #7
     338:	e1a03fc2 	asr	r3, r2, #31
     33c:	e0631001 	rsb	r1, r3, r1
     340:	e1a03001 	mov	r3, r1
     344:	e1a03203 	lsl	r3, r3, #4
     348:	e0613003 	rsb	r3, r1, r3
     34c:	e1a03203 	lsl	r3, r3, #4
     350:	e0633002 	rsb	r3, r3, r2
     354:	e50b3010 	str	r3, [r11, #-16]
    int y1 = rand() % 240;
     358:	eb00018d 	bl	994 <rand>
     35c:	e1a02000 	mov	r2, r0
     360:	e3083889 	movw	r3, #34953	; 0x8889
     364:	e3483888 	movt	r3, #34952	; 0x8888
     368:	e0c31293 	smull	r1, r3, r3, r2
     36c:	e0833002 	add	r3, r3, r2
     370:	e1a013c3 	asr	r1, r3, #7
     374:	e1a03fc2 	asr	r3, r2, #31
     378:	e0631001 	rsb	r1, r3, r1
     37c:	e1a03001 	mov	r3, r1
     380:	e1a03203 	lsl	r3, r3, #4
     384:	e0613003 	rsb	r3, r1, r3
     388:	e1a03203 	lsl	r3, r3, #4
     38c:	e0633002 	rsb	r3, r3, r2
     390:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    int x0_prev = -1;
     394:	e3e03000 	mvn	r3, #0
     398:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
    int x1_prev = -1;
     39c:	e3e03000 	mvn	r3, #0
     3a0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    int y0_prev = -1;
     3a4:	e3e03000 	mvn	r3, #0
     3a8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int y1_prev = -1;
     3ac:	e3e03000 	mvn	r3, #0
     3b0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int colour = rand() % 55535 + 10000;
     3b4:	eb000176 	bl	994 <rand>
     3b8:	e1a02000 	mov	r2, r0
     3bc:	e30831b1 	movw	r3, #33201	; 0x81b1
     3c0:	e3443b86 	movt	r3, #19334	; 0x4b86
     3c4:	e0c31293 	smull	r1, r3, r3, r2
     3c8:	e1a01743 	asr	r1, r3, #14
     3cc:	e1a03fc2 	asr	r3, r2, #31
     3d0:	e0633001 	rsb	r3, r3, r1
     3d4:	e30d18ef 	movw	r1, #55535	; 0xd8ef
     3d8:	e0030391 	mul	r3, r1, r3
     3dc:	e0633002 	rsb	r3, r3, r2
     3e0:	e2833c27 	add	r3, r3, #9984	; 0x2700
     3e4:	e2833010 	add	r3, r3, #16
     3e8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    int x_min = 0;
     3ec:	e3a03000 	mov	r3, #0
     3f0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
    int x_max = 319;
     3f4:	e300313f 	movw	r3, #319	; 0x13f
     3f8:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
    int y_min = 0;
     3fc:	e3a03000 	mov	r3, #0
     400:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    int y_max = 239;
     404:	e3a030ef 	mov	r3, #239	; 0xef
     408:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
    int mov_inc_x = rand() % 2;
     40c:	eb000160 	bl	994 <rand>
     410:	e1a02000 	mov	r2, r0
     414:	e1a03fc2 	asr	r3, r2, #31
     418:	e1a03fa3 	lsr	r3, r3, #31
     41c:	e0822003 	add	r2, r2, r3
     420:	e2022001 	and	r2, r2, #1
     424:	e0633002 	rsb	r3, r3, r2
     428:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    if (mov_inc_x == 0)   mov_inc_x = -1;
     42c:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     430:	e3530000 	cmp	r3, #0
     434:	1a000001 	bne	440 <main+0x1e4>
     438:	e3e03000 	mvn	r3, #0
     43c:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int mov_inc_y = rand() % 2;
     440:	eb000153 	bl	994 <rand>
     444:	e1a02000 	mov	r2, r0
     448:	e1a03fc2 	asr	r3, r2, #31
     44c:	e1a03fa3 	lsr	r3, r3, #31
     450:	e0822003 	add	r2, r2, r3
     454:	e2022001 	and	r2, r2, #1
     458:	e0633002 	rsb	r3, r3, r2
     45c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    if (mov_inc_y == 0)   mov_inc_y = -1;
     460:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     464:	e3530000 	cmp	r3, #0
     468:	1a000001 	bne	474 <main+0x218>
     46c:	e3e03000 	mvn	r3, #0
     470:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    // Clear screen
    clear_screen();
     474:	eb000068 	bl	61c <clear_screen>
     478:	ea000000 	b	480 <main+0x224>
        y0 += mov_inc_y;
        y1 += mov_inc_y;
        // if position is outside screen, reverse move increment value
        if (x0 >= x_max || x0 <= x_min || x1 >= x_max || x1 <= x_min) mov_inc_x = -1 * mov_inc_x;
        if (y0 >= y_max || y0 <= y_min || y1 >= y_max || y1 <= y_min) mov_inc_y = -1 * mov_inc_y;
    }
     47c:	e1a00000 	nop			; (mov r0, r0)
    // Clear screen
    clear_screen();
    // Loop to draw animation
    while (true) {
        // erase previous line
        if (x0_prev != -1) {
     480:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     484:	e3730001 	cmn	r3, #1
     488:	0a000007 	beq	4ac <main+0x250>
            draw_line(x0_prev, y0_prev, x1_prev, y1_prev, 0x0);
     48c:	e3a03000 	mov	r3, #0
     490:	e58d3000 	str	r3, [sp]
     494:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     498:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     49c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     4a0:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     4a4:	eb000093 	bl	6f8 <draw_line>
            wait_for_vsync();
     4a8:	eb00007b 	bl	69c <wait_for_vsync>
        }
        x0_prev = x0;
     4ac:	e51b3008 	ldr	r3, [r11, #-8]
     4b0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
        x1_prev = x1;
     4b4:	e51b300c 	ldr	r3, [r11, #-12]
     4b8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
        y0_prev = y0;
     4bc:	e51b3010 	ldr	r3, [r11, #-16]
     4c0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
        y1_prev = y1;
     4c4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4c8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
        // draw line
        draw_line(x0, y0, x1, y1, colour);
     4cc:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     4d0:	e58d3000 	str	r3, [sp]
     4d4:	e51b0008 	ldr	r0, [r11, #-8]
     4d8:	e51b1010 	ldr	r1, [r11, #-16]
     4dc:	e51b200c 	ldr	r2, [r11, #-12]
     4e0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4e4:	eb000083 	bl	6f8 <draw_line>
        // wait for V-sync
        wait_for_vsync();
     4e8:	eb00006b 	bl	69c <wait_for_vsync>
        // update line position
        x0 += mov_inc_x;
     4ec:	e51b2008 	ldr	r2, [r11, #-8]
     4f0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     4f4:	e0823003 	add	r3, r2, r3
     4f8:	e50b3008 	str	r3, [r11, #-8]
        x1 += mov_inc_x;
     4fc:	e51b200c 	ldr	r2, [r11, #-12]
     500:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     504:	e0823003 	add	r3, r2, r3
     508:	e50b300c 	str	r3, [r11, #-12]
        y0 += mov_inc_y;
     50c:	e51b2010 	ldr	r2, [r11, #-16]
     510:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     514:	e0823003 	add	r3, r2, r3
     518:	e50b3010 	str	r3, [r11, #-16]
        y1 += mov_inc_y;
     51c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     520:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     524:	e0823003 	add	r3, r2, r3
     528:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
        // if position is outside screen, reverse move increment value
        if (x0 >= x_max || x0 <= x_min || x1 >= x_max || x1 <= x_min) mov_inc_x = -1 * mov_inc_x;
     52c:	e51b2008 	ldr	r2, [r11, #-8]
     530:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     534:	e1520003 	cmp	r2, r3
     538:	aa00000b 	bge	56c <main+0x310>
     53c:	e51b2008 	ldr	r2, [r11, #-8]
     540:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     544:	e1520003 	cmp	r2, r3
     548:	da000007 	ble	56c <main+0x310>
     54c:	e51b200c 	ldr	r2, [r11, #-12]
     550:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     554:	e1520003 	cmp	r2, r3
     558:	aa000003 	bge	56c <main+0x310>
     55c:	e51b200c 	ldr	r2, [r11, #-12]
     560:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     564:	e1520003 	cmp	r2, r3
     568:	ca000002 	bgt	578 <main+0x31c>
     56c:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     570:	e2633000 	rsb	r3, r3, #0
     574:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
        if (y0 >= y_max || y0 <= y_min || y1 >= y_max || y1 <= y_min) mov_inc_y = -1 * mov_inc_y;
     578:	e51b2010 	ldr	r2, [r11, #-16]
     57c:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
     580:	e1520003 	cmp	r2, r3
     584:	aa00000b 	bge	5b8 <main+0x35c>
     588:	e51b2010 	ldr	r2, [r11, #-16]
     58c:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     590:	e1520003 	cmp	r2, r3
     594:	da000007 	ble	5b8 <main+0x35c>
     598:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     59c:	e51b3040 	ldr	r3, [r11, #-64]	; 0xffffffc0
     5a0:	e1520003 	cmp	r2, r3
     5a4:	aa000003 	bge	5b8 <main+0x35c>
     5a8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     5ac:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     5b0:	e1520003 	cmp	r2, r3
     5b4:	caffffb0 	bgt	47c <main+0x220>
     5b8:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     5bc:	e2633000 	rsb	r3, r3, #0
     5c0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    }
     5c4:	eaffffac 	b	47c <main+0x220>

000005c8 <plot_pixel>:
}

// code not shown for clear_screen() and draw_line() subroutines

void plot_pixel(int x, int y, short int line_color) {
     5c8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     5cc:	e28db000 	add	r11, sp, #0
     5d0:	e24dd014 	sub	sp, sp, #20
     5d4:	e50b0008 	str	r0, [r11, #-8]
     5d8:	e50b100c 	str	r1, [r11, #-12]
     5dc:	e1a03002 	mov	r3, r2
     5e0:	e14b30be 	strh	r3, [r11, #-14]
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     5e4:	e51b300c 	ldr	r3, [r11, #-12]
     5e8:	e1a02503 	lsl	r2, r3, #10
     5ec:	e302345c 	movw	r3, #9308	; 0x245c
     5f0:	e3403000 	movt	r3, #0
     5f4:	e5933000 	ldr	r3, [r3]
     5f8:	e0822003 	add	r2, r2, r3
     5fc:	e51b3008 	ldr	r3, [r11, #-8]
     600:	e1a03083 	lsl	r3, r3, #1
     604:	e0823003 	add	r3, r2, r3
     608:	e15b20be 	ldrh	r2, [r11, #-14]
     60c:	e1c320b0 	strh	r2, [r3]
}
     610:	e28bd000 	add	sp, r11, #0
     614:	e8bd0800 	ldmfd	sp!, {r11}
     618:	e12fff1e 	bx	lr

0000061c <clear_screen>:

void clear_screen() {
     61c:	e92d4800 	push	{r11, lr}
     620:	e28db004 	add	r11, sp, #4
     624:	e24dd008 	sub	sp, sp, #8
	int x = 0;
     628:	e3a03000 	mov	r3, #0
     62c:	e50b3008 	str	r3, [r11, #-8]
	int y = 0;
     630:	e3a03000 	mov	r3, #0
     634:	e50b300c 	str	r3, [r11, #-12]
    for (x = 0; x < 320; x++)
     638:	e3a03000 	mov	r3, #0
     63c:	e50b3008 	str	r3, [r11, #-8]
     640:	ea00000f 	b	684 <clear_screen+0x68>
        for (y = 0; y < 240; y++)
     644:	e3a03000 	mov	r3, #0
     648:	e50b300c 	str	r3, [r11, #-12]
     64c:	ea000006 	b	66c <clear_screen+0x50>
            plot_pixel(x, y, 0x0);
     650:	e51b0008 	ldr	r0, [r11, #-8]
     654:	e51b100c 	ldr	r1, [r11, #-12]
     658:	e3a02000 	mov	r2, #0
     65c:	ebffffd9 	bl	5c8 <plot_pixel>

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
        for (y = 0; y < 240; y++)
     660:	e51b300c 	ldr	r3, [r11, #-12]
     664:	e2833001 	add	r3, r3, #1
     668:	e50b300c 	str	r3, [r11, #-12]
     66c:	e51b300c 	ldr	r3, [r11, #-12]
     670:	e35300ef 	cmp	r3, #239	; 0xef
     674:	dafffff5 	ble	650 <clear_screen+0x34>
}

void clear_screen() {
	int x = 0;
	int y = 0;
    for (x = 0; x < 320; x++)
     678:	e51b3008 	ldr	r3, [r11, #-8]
     67c:	e2833001 	add	r3, r3, #1
     680:	e50b3008 	str	r3, [r11, #-8]
     684:	e51b2008 	ldr	r2, [r11, #-8]
     688:	e300313f 	movw	r3, #319	; 0x13f
     68c:	e1520003 	cmp	r2, r3
     690:	daffffeb 	ble	644 <clear_screen+0x28>
        for (y = 0; y < 240; y++)
            plot_pixel(x, y, 0x0);
}
     694:	e24bd004 	sub	sp, r11, #4
     698:	e8bd8800 	pop	{r11, pc}

0000069c <wait_for_vsync>:

void wait_for_vsync() {
     69c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     6a0:	e28db000 	add	r11, sp, #0
     6a4:	e24dd00c 	sub	sp, sp, #12
    volatile int* pixel_status_reg_ptr = (int*)0xFF203020;
     6a8:	e3033020 	movw	r3, #12320	; 0x3020
     6ac:	e34f3f20 	movt	r3, #65312	; 0xff20
     6b0:	e50b300c 	str	r3, [r11, #-12]
    int status;
    *pixel_status_reg_ptr = 1;              // start the synchronization process
     6b4:	e51b300c 	ldr	r3, [r11, #-12]
     6b8:	e3a02001 	mov	r2, #1
     6bc:	e5832000 	str	r2, [r3]
    status = *(pixel_status_reg_ptr + 3);   // get status register
     6c0:	e51b300c 	ldr	r3, [r11, #-12]
     6c4:	e593300c 	ldr	r3, [r3, #12]
     6c8:	e50b3008 	str	r3, [r11, #-8]
    while ((status & 0x01) != 0)        status = *(pixel_status_reg_ptr + 3);
     6cc:	ea000002 	b	6dc <wait_for_vsync+0x40>
     6d0:	e51b300c 	ldr	r3, [r11, #-12]
     6d4:	e593300c 	ldr	r3, [r3, #12]
     6d8:	e50b3008 	str	r3, [r11, #-8]
     6dc:	e51b3008 	ldr	r3, [r11, #-8]
     6e0:	e2033001 	and	r3, r3, #1
     6e4:	e3530000 	cmp	r3, #0
     6e8:	1afffff8 	bne	6d0 <wait_for_vsync+0x34>
}
     6ec:	e28bd000 	add	sp, r11, #0
     6f0:	e8bd0800 	ldmfd	sp!, {r11}
     6f4:	e12fff1e 	bx	lr

000006f8 <draw_line>:

void draw_line(int x0, int y0, int x1, int y1, int colour) {
     6f8:	e92d4800 	push	{r11, lr}
     6fc:	e28db004 	add	r11, sp, #4
     700:	e24dd038 	sub	sp, sp, #56	; 0x38
     704:	e50b0030 	str	r0, [r11, #-48]	; 0xffffffd0
     708:	e50b1034 	str	r1, [r11, #-52]	; 0xffffffcc
     70c:	e50b2038 	str	r2, [r11, #-56]	; 0xffffffc8
     710:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     714:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
     718:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     71c:	e0633002 	rsb	r3, r3, r2
     720:	e0232fc3 	eor	r2, r3, r3, asr #31
     724:	e0422fc3 	sub	r2, r2, r3, asr #31
     728:	e51b1038 	ldr	r1, [r11, #-56]	; 0xffffffc8
     72c:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     730:	e0633001 	rsb	r3, r3, r1
     734:	e3530000 	cmp	r3, #0
     738:	b2633000 	rsblt	r3, r3, #0
     73c:	e1520003 	cmp	r2, r3
     740:	d3a03000 	movle	r3, #0
     744:	c3a03001 	movgt	r3, #1
     748:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	int temp = 0;
     74c:	e3a03000 	mov	r3, #0
     750:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
    // if slope is greater than 1, set pivot to y instead of x
    if (is_steep) {
     754:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     758:	e3530000 	cmp	r3, #0
     75c:	0a00000b 	beq	790 <draw_line+0x98>
		// swap x0, y0
		temp = x0;
     760:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     764:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = y0;
     768:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     76c:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		y0 = temp;
     770:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     774:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		// swap x1, y1
		temp = x1;
     778:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     77c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x1 = y1;
     780:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     784:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		y1 = temp;
     788:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     78c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // start at the lowest pivot position with x0
    if (x0 > x1) {
     790:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
     794:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     798:	e1520003 	cmp	r2, r3
     79c:	da00000b 	ble	7d0 <draw_line+0xd8>
		// swap x0, x1
		temp = x0;
     7a0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     7a4:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		x0 = x1;
     7a8:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     7ac:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		x1 = temp;
     7b0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     7b4:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		// swap y0, y1
		temp = y0;
     7b8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     7bc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
		y0 = y1;
     7c0:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     7c4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		y1 = temp;
     7c8:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     7cc:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
    }
    // declare variables
    int dx = x1 - x0;
     7d0:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     7d4:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     7d8:	e0633002 	rsb	r3, r3, r2
     7dc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
    int dy = abs(y1 - y0);
     7e0:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
     7e4:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     7e8:	e0633002 	rsb	r3, r3, r2
     7ec:	e3530000 	cmp	r3, #0
     7f0:	b2633000 	rsblt	r3, r3, #0
     7f4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
    int dx2 = 2 * dx;
     7f8:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     7fc:	e1a03083 	lsl	r3, r3, #1
     800:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
    int dy2 = 2 * dy;
     804:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     808:	e1a03083 	lsl	r3, r3, #1
     80c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    int error = dy2 - dx;
     810:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     814:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     818:	e0633002 	rsb	r3, r3, r2
     81c:	e50b3008 	str	r3, [r11, #-8]
    int y = y0;
     820:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     824:	e50b300c 	str	r3, [r11, #-12]
    // determine step value
    int step = 1;
     828:	e3a03001 	mov	r3, #1
     82c:	e50b3010 	str	r3, [r11, #-16]
    if (y1 - y0 < 0)    step = -1;
     830:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
     834:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     838:	e0633002 	rsb	r3, r3, r2
     83c:	e3530000 	cmp	r3, #0
     840:	aa000001 	bge	84c <draw_line+0x154>
     844:	e3e03000 	mvn	r3, #0
     848:	e50b3010 	str	r3, [r11, #-16]
    // plot initial point
    plot_pixel(x0, y0, colour);
     84c:	e59b3004 	ldr	r3, [r11, #4]
     850:	e6ff3073 	uxth	r3, r3
     854:	e6bf3073 	sxth	r3, r3
     858:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     85c:	e51b1034 	ldr	r1, [r11, #-52]	; 0xffffffcc
     860:	e1a02003 	mov	r2, r3
     864:	ebffff57 	bl	5c8 <plot_pixel>
    // plot subsequent points
	int x = 0;
     868:	e3a03000 	mov	r3, #0
     86c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
    for (x = x0 + 1; x < x1; x++) {
     870:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
     874:	e2833001 	add	r3, r3, #1
     878:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     87c:	ea000022 	b	90c <draw_line+0x214>
        if (error < 0) {
     880:	e51b3008 	ldr	r3, [r11, #-8]
     884:	e3530000 	cmp	r3, #0
     888:	aa00000b 	bge	8bc <draw_line+0x1c4>
            plot_pixel(x, y, colour);
     88c:	e59b3004 	ldr	r3, [r11, #4]
     890:	e6ff3073 	uxth	r3, r3
     894:	e6bf3073 	sxth	r3, r3
     898:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     89c:	e51b100c 	ldr	r1, [r11, #-12]
     8a0:	e1a02003 	mov	r2, r3
     8a4:	ebffff47 	bl	5c8 <plot_pixel>
            error += dy2;
     8a8:	e51b2008 	ldr	r2, [r11, #-8]
     8ac:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     8b0:	e0823003 	add	r3, r2, r3
     8b4:	e50b3008 	str	r3, [r11, #-8]
            continue;
     8b8:	ea000010 	b	900 <draw_line+0x208>
        }
        else {
            y += step;
     8bc:	e51b200c 	ldr	r2, [r11, #-12]
     8c0:	e51b3010 	ldr	r3, [r11, #-16]
     8c4:	e0823003 	add	r3, r2, r3
     8c8:	e50b300c 	str	r3, [r11, #-12]
            plot_pixel(x, y, colour);
     8cc:	e59b3004 	ldr	r3, [r11, #4]
     8d0:	e6ff3073 	uxth	r3, r3
     8d4:	e6bf3073 	sxth	r3, r3
     8d8:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     8dc:	e51b100c 	ldr	r1, [r11, #-12]
     8e0:	e1a02003 	mov	r2, r3
     8e4:	ebffff37 	bl	5c8 <plot_pixel>
            error += dy2 - dx2;
     8e8:	e51b202c 	ldr	r2, [r11, #-44]	; 0xffffffd4
     8ec:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     8f0:	e0633002 	rsb	r3, r3, r2
     8f4:	e51b2008 	ldr	r2, [r11, #-8]
     8f8:	e0823003 	add	r3, r2, r3
     8fc:	e50b3008 	str	r3, [r11, #-8]
    if (y1 - y0 < 0)    step = -1;
    // plot initial point
    plot_pixel(x0, y0, colour);
    // plot subsequent points
	int x = 0;
    for (x = x0 + 1; x < x1; x++) {
     900:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     904:	e2833001 	add	r3, r3, #1
     908:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     90c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     910:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     914:	e1520003 	cmp	r2, r3
     918:	baffffd8 	blt	880 <draw_line+0x188>
            y += step;
            plot_pixel(x, y, colour);
            error += dy2 - dx2;
        }
    }
}
     91c:	e24bd004 	sub	sp, r11, #4
     920:	e8bd8800 	pop	{r11, pc}

00000924 <atexit>:
     924:	e1a01000 	mov	r1, r0
     928:	e3a00000 	mov	r0, #0
     92c:	e92d4008 	push	{r3, lr}
     930:	e1a02000 	mov	r2, r0
     934:	e1a03000 	mov	r3, r0
     938:	eb00003f 	bl	a3c <__register_exitproc>
     93c:	e8bd4008 	pop	{r3, lr}
     940:	e12fff1e 	bx	lr

00000944 <exit>:
     944:	e92d4008 	push	{r3, lr}
     948:	e3a01000 	mov	r1, #0
     94c:	e1a04000 	mov	r4, r0
     950:	eb000076 	bl	b30 <__call_exitprocs>
     954:	e59f3018 	ldr	r3, [pc, #24]	; 974 <exit+0x30>
     958:	e5930000 	ldr	r0, [r3]
     95c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     960:	e3530000 	cmp	r3, #0
     964:	11a0e00f 	movne	lr, pc
     968:	112fff13 	bxne	r3
     96c:	e1a00004 	mov	r0, r4
     970:	eb000424 	bl	1a08 <_exit>
     974:	00001b94 	.word	0x00001b94

00000978 <srand>:
     978:	e59f3010 	ldr	r3, [pc, #16]	; 990 <srand+0x18>
     97c:	e5933000 	ldr	r3, [r3]
     980:	e3a02000 	mov	r2, #0
     984:	e58300a8 	str	r0, [r3, #168]	; 0xa8
     988:	e58320ac 	str	r2, [r3, #172]	; 0xac
     98c:	e12fff1e 	bx	lr
     990:	00001bf8 	.word	0x00001bf8

00000994 <rand>:
     994:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     998:	e59f3044 	ldr	r3, [pc, #68]	; 9e4 <rand+0x50>
     99c:	e593c000 	ldr	r12, [r3]
     9a0:	e59f4040 	ldr	r4, [pc, #64]	; 9e8 <rand+0x54>
     9a4:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
     9a8:	e0040492 	mul	r4, r2, r4
     9ac:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
     9b0:	e59f3034 	ldr	r3, [pc, #52]	; 9ec <rand+0x58>
     9b4:	e0244193 	mla	r4, r3, r1, r4
     9b8:	e0810392 	umull	r0, r1, r2, r3
     9bc:	e3a02001 	mov	r2, #1
     9c0:	e0922000 	adds	r2, r2, r0
     9c4:	e0841001 	add	r1, r4, r1
     9c8:	e3a03000 	mov	r3, #0
     9cc:	e0a33001 	adc	r3, r3, r1
     9d0:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
     9d4:	e58c30ac 	str	r3, [r12, #172]	; 0xac
     9d8:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
     9dc:	e8bd0010 	ldmfd	sp!, {r4}
     9e0:	e12fff1e 	bx	lr
     9e4:	00001bf8 	.word	0x00001bf8
     9e8:	5851f42d 	.word	0x5851f42d
     9ec:	4c957f2d 	.word	0x4c957f2d

000009f0 <time>:
     9f0:	e92d4010 	push	{r4, lr}
     9f4:	e59f303c 	ldr	r3, [pc, #60]	; a38 <time+0x48>
     9f8:	e24dd008 	sub	sp, sp, #8
     9fc:	e1a04000 	mov	r4, r0
     a00:	e1a0100d 	mov	r1, sp
     a04:	e5930000 	ldr	r0, [r3]
     a08:	e3a02000 	mov	r2, #0
     a0c:	eb0000c0 	bl	d14 <_gettimeofday_r>
     a10:	e3500000 	cmp	r0, #0
     a14:	ba000005 	blt	a30 <time+0x40>
     a18:	e59d0000 	ldr	r0, [sp]
     a1c:	e3540000 	cmp	r4, #0
     a20:	15840000 	strne	r0, [r4]
     a24:	e28dd008 	add	sp, sp, #8
     a28:	e8bd4010 	pop	{r4, lr}
     a2c:	e12fff1e 	bx	lr
     a30:	e3e00000 	mvn	r0, #0
     a34:	eafffffa 	b	a24 <time+0x34>
     a38:	00001bf8 	.word	0x00001bf8

00000a3c <__register_exitproc>:
     a3c:	e59fc0e4 	ldr	r12, [pc, #228]	; b28 <__register_exitproc+0xec>
     a40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     a44:	e59c4000 	ldr	r4, [r12]
     a48:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     a4c:	e35c0000 	cmp	r12, #0
     a50:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     a54:	e59c5004 	ldr	r5, [r12, #4]
     a58:	0584c148 	streq	r12, [r4, #328]	; 0x148
     a5c:	e355001f 	cmp	r5, #31
     a60:	e24dd010 	sub	sp, sp, #16
     a64:	e1a06000 	mov	r6, r0
     a68:	da000015 	ble	ac4 <__register_exitproc+0x88>
     a6c:	e59f00b8 	ldr	r0, [pc, #184]	; b2c <__register_exitproc+0xf0>
     a70:	e3500000 	cmp	r0, #0
     a74:	1a000001 	bne	a80 <__register_exitproc+0x44>
     a78:	e3e00000 	mvn	r0, #0
     a7c:	ea000018 	b	ae4 <__register_exitproc+0xa8>
     a80:	e3a00e19 	mov	r0, #400	; 0x190
     a84:	e58d100c 	str	r1, [sp, #12]
     a88:	e58d2008 	str	r2, [sp, #8]
     a8c:	e58d3004 	str	r3, [sp, #4]
     a90:	e320f000 	nop	{0}
     a94:	e250c000 	subs	r12, r0, #0
     a98:	e59d100c 	ldr	r1, [sp, #12]
     a9c:	e59d2008 	ldr	r2, [sp, #8]
     aa0:	e59d3004 	ldr	r3, [sp, #4]
     aa4:	0afffff3 	beq	a78 <__register_exitproc+0x3c>
     aa8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     aac:	e3a00000 	mov	r0, #0
     ab0:	e58c0004 	str	r0, [r12, #4]
     ab4:	e58c5000 	str	r5, [r12]
     ab8:	e584c148 	str	r12, [r4, #328]	; 0x148
     abc:	e58c0188 	str	r0, [r12, #392]	; 0x188
     ac0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     ac4:	e3560000 	cmp	r6, #0
     ac8:	e59c4004 	ldr	r4, [r12, #4]
     acc:	1a000007 	bne	af0 <__register_exitproc+0xb4>
     ad0:	e2843002 	add	r3, r4, #2
     ad4:	e2844001 	add	r4, r4, #1
     ad8:	e78c1103 	str	r1, [r12, r3, lsl #2]
     adc:	e58c4004 	str	r4, [r12, #4]
     ae0:	e3a00000 	mov	r0, #0
     ae4:	e28dd010 	add	sp, sp, #16
     ae8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     aec:	e12fff1e 	bx	lr
     af0:	e3a00001 	mov	r0, #1
     af4:	e1a00410 	lsl	r0, r0, r4
     af8:	e08c8104 	add	r8, r12, r4, lsl #2
     afc:	e3560002 	cmp	r6, #2
     b00:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     b04:	e5883108 	str	r3, [r8, #264]	; 0x108
     b08:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     b0c:	e1877000 	orr	r7, r7, r0
     b10:	01830000 	orreq	r0, r3, r0
     b14:	e1a05008 	mov	r5, r8
     b18:	e5882088 	str	r2, [r8, #136]	; 0x88
     b1c:	e58c7188 	str	r7, [r12, #392]	; 0x188
     b20:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     b24:	eaffffe9 	b	ad0 <__register_exitproc+0x94>
     b28:	00001b94 	.word	0x00001b94
     b2c:	00000000 	.word	0x00000000

00000b30 <__call_exitprocs>:
     b30:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     b34:	e59f3168 	ldr	r3, [pc, #360]	; ca4 <__call_exitprocs+0x174>
     b38:	e5933000 	ldr	r3, [r3]
     b3c:	e24dd014 	sub	sp, sp, #20
     b40:	e58d3004 	str	r3, [sp, #4]
     b44:	e2833f52 	add	r3, r3, #328	; 0x148
     b48:	e58d0008 	str	r0, [sp, #8]
     b4c:	e58d300c 	str	r3, [sp, #12]
     b50:	e1a07001 	mov	r7, r1
     b54:	e3a08001 	mov	r8, #1
     b58:	e59d3004 	ldr	r3, [sp, #4]
     b5c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     b60:	e3560000 	cmp	r6, #0
     b64:	e59db00c 	ldr	r11, [sp, #12]
     b68:	0a000033 	beq	c3c <__call_exitprocs+0x10c>
     b6c:	e5965004 	ldr	r5, [r6, #4]
     b70:	e2554001 	subs	r4, r5, #1
     b74:	5286a088 	addpl	r10, r6, #136	; 0x88
     b78:	5285501f 	addpl	r5, r5, #31
     b7c:	508a5105 	addpl	r5, r10, r5, lsl #2
     b80:	5a000007 	bpl	ba4 <__call_exitprocs+0x74>
     b84:	ea000029 	b	c30 <__call_exitprocs+0x100>
     b88:	e5953000 	ldr	r3, [r5]
     b8c:	e1530007 	cmp	r3, r7
     b90:	0a000005 	beq	bac <__call_exitprocs+0x7c>
     b94:	e2444001 	sub	r4, r4, #1
     b98:	e3740001 	cmn	r4, #1
     b9c:	e2455004 	sub	r5, r5, #4
     ba0:	0a000022 	beq	c30 <__call_exitprocs+0x100>
     ba4:	e3570000 	cmp	r7, #0
     ba8:	1afffff6 	bne	b88 <__call_exitprocs+0x58>
     bac:	e5963004 	ldr	r3, [r6, #4]
     bb0:	e06a2005 	rsb	r2, r10, r5
     bb4:	e2433001 	sub	r3, r3, #1
     bb8:	e0862002 	add	r2, r6, r2
     bbc:	e1530004 	cmp	r3, r4
     bc0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     bc4:	13a01000 	movne	r1, #0
     bc8:	05864004 	streq	r4, [r6, #4]
     bcc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     bd0:	e3530000 	cmp	r3, #0
     bd4:	0affffee 	beq	b94 <__call_exitprocs+0x64>
     bd8:	e1a02418 	lsl	r2, r8, r4
     bdc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     be0:	e1120001 	tst	r2, r1
     be4:	e5969004 	ldr	r9, [r6, #4]
     be8:	0a000016 	beq	c48 <__call_exitprocs+0x118>
     bec:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     bf0:	e1120001 	tst	r2, r1
     bf4:	1a000016 	bne	c54 <__call_exitprocs+0x124>
     bf8:	e59d0008 	ldr	r0, [sp, #8]
     bfc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     c00:	e1a0e00f 	mov	lr, pc
     c04:	e12fff13 	bx	r3
     c08:	e5963004 	ldr	r3, [r6, #4]
     c0c:	e1530009 	cmp	r3, r9
     c10:	1affffd0 	bne	b58 <__call_exitprocs+0x28>
     c14:	e59b3000 	ldr	r3, [r11]
     c18:	e1530006 	cmp	r3, r6
     c1c:	1affffcd 	bne	b58 <__call_exitprocs+0x28>
     c20:	e2444001 	sub	r4, r4, #1
     c24:	e3740001 	cmn	r4, #1
     c28:	e2455004 	sub	r5, r5, #4
     c2c:	1affffdc 	bne	ba4 <__call_exitprocs+0x74>
     c30:	e59f1070 	ldr	r1, [pc, #112]	; ca8 <__call_exitprocs+0x178>
     c34:	e3510000 	cmp	r1, #0
     c38:	1a000009 	bne	c64 <__call_exitprocs+0x134>
     c3c:	e28dd014 	add	sp, sp, #20
     c40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     c44:	e12fff1e 	bx	lr
     c48:	e1a0e00f 	mov	lr, pc
     c4c:	e12fff13 	bx	r3
     c50:	eaffffec 	b	c08 <__call_exitprocs+0xd8>
     c54:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     c58:	e1a0e00f 	mov	lr, pc
     c5c:	e12fff13 	bx	r3
     c60:	eaffffe8 	b	c08 <__call_exitprocs+0xd8>
     c64:	e5963004 	ldr	r3, [r6, #4]
     c68:	e3530000 	cmp	r3, #0
     c6c:	e5963000 	ldr	r3, [r6]
     c70:	1a000008 	bne	c98 <__call_exitprocs+0x168>
     c74:	e3530000 	cmp	r3, #0
     c78:	0a000006 	beq	c98 <__call_exitprocs+0x168>
     c7c:	e1a00006 	mov	r0, r6
     c80:	e58b3000 	str	r3, [r11]
     c84:	e320f000 	nop	{0}
     c88:	e59b6000 	ldr	r6, [r11]
     c8c:	e3560000 	cmp	r6, #0
     c90:	1affffb5 	bne	b6c <__call_exitprocs+0x3c>
     c94:	eaffffe8 	b	c3c <__call_exitprocs+0x10c>
     c98:	e1a0b006 	mov	r11, r6
     c9c:	e1a06003 	mov	r6, r3
     ca0:	eafffff9 	b	c8c <__call_exitprocs+0x15c>
     ca4:	00001b94 	.word	0x00001b94
     ca8:	00000000 	.word	0x00000000

00000cac <register_fini>:
     cac:	e92d4008 	push	{r3, lr}
     cb0:	e59f3010 	ldr	r3, [pc, #16]	; cc8 <register_fini+0x1c>
     cb4:	e3530000 	cmp	r3, #0
     cb8:	159f000c 	ldrne	r0, [pc, #12]	; ccc <register_fini+0x20>
     cbc:	1bffff18 	blne	924 <atexit>
     cc0:	e8bd4008 	pop	{r3, lr}
     cc4:	e12fff1e 	bx	lr
     cc8:	00001bbc 	.word	0x00001bbc
     ccc:	00000cd0 	.word	0x00000cd0

00000cd0 <__libc_fini_array>:
     cd0:	e92d4038 	push	{r3, r4, r5, lr}
     cd4:	e59f5030 	ldr	r5, [pc, #48]	; d0c <__libc_fini_array+0x3c>
     cd8:	e59f4030 	ldr	r4, [pc, #48]	; d10 <__libc_fini_array+0x40>
     cdc:	e0654004 	rsb	r4, r5, r4
     ce0:	e1b04144 	asrs	r4, r4, #2
     ce4:	10855104 	addne	r5, r5, r4, lsl #2
     ce8:	0a000004 	beq	d00 <__libc_fini_array+0x30>
     cec:	e5353004 	ldr	r3, [r5, #-4]!
     cf0:	e1a0e00f 	mov	lr, pc
     cf4:	e12fff13 	bx	r3
     cf8:	e2544001 	subs	r4, r4, #1
     cfc:	1afffffa 	bne	cec <__libc_fini_array+0x1c>
     d00:	eb0003ad 	bl	1bbc <__libc_fini>
     d04:	e8bd4038 	pop	{r3, r4, r5, lr}
     d08:	e12fff1e 	bx	lr
     d0c:	00001bd4 	.word	0x00001bd4
     d10:	00001bd8 	.word	0x00001bd8

00000d14 <_gettimeofday_r>:
     d14:	e92d4038 	push	{r3, r4, r5, lr}
     d18:	e59f4030 	ldr	r4, [pc, #48]	; d50 <_gettimeofday_r+0x3c>
     d1c:	e3a03000 	mov	r3, #0
     d20:	e1a05000 	mov	r5, r0
     d24:	e1a00001 	mov	r0, r1
     d28:	e1a01002 	mov	r1, r2
     d2c:	e5843000 	str	r3, [r4]
     d30:	eb00033a 	bl	1a20 <_gettimeofday>
     d34:	e3700001 	cmn	r0, #1
     d38:	1a000002 	bne	d48 <_gettimeofday_r+0x34>
     d3c:	e5943000 	ldr	r3, [r4]
     d40:	e3530000 	cmp	r3, #0
     d44:	15853000 	strne	r3, [r5]
     d48:	e8bd4038 	pop	{r3, r4, r5, lr}
     d4c:	e12fff1e 	bx	lr
     d50:	00002464 	.word	0x00002464

00000d54 <cleanup_glue>:
     d54:	e92d4038 	push	{r3, r4, r5, lr}
     d58:	e1a04001 	mov	r4, r1
     d5c:	e5911000 	ldr	r1, [r1]
     d60:	e3510000 	cmp	r1, #0
     d64:	e1a05000 	mov	r5, r0
     d68:	1bfffff9 	blne	d54 <cleanup_glue>
     d6c:	e1a00005 	mov	r0, r5
     d70:	e1a01004 	mov	r1, r4
     d74:	eb00009c 	bl	fec <_free_r>
     d78:	e8bd4038 	pop	{r3, r4, r5, lr}
     d7c:	e12fff1e 	bx	lr

00000d80 <_reclaim_reent>:
     d80:	e59f30f0 	ldr	r3, [pc, #240]	; e78 <_reclaim_reent+0xf8>
     d84:	e5933000 	ldr	r3, [r3]
     d88:	e1500003 	cmp	r0, r3
     d8c:	e92d4070 	push	{r4, r5, r6, lr}
     d90:	e1a05000 	mov	r5, r0
     d94:	0a00002b 	beq	e48 <_reclaim_reent+0xc8>
     d98:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
     d9c:	e3520000 	cmp	r2, #0
     da0:	0a000011 	beq	dec <_reclaim_reent+0x6c>
     da4:	e3a03000 	mov	r3, #0
     da8:	e1a06003 	mov	r6, r3
     dac:	e7921103 	ldr	r1, [r2, r3, lsl #2]
     db0:	e3510000 	cmp	r1, #0
     db4:	0a000005 	beq	dd0 <_reclaim_reent+0x50>
     db8:	e5914000 	ldr	r4, [r1]
     dbc:	e1a00005 	mov	r0, r5
     dc0:	eb000089 	bl	fec <_free_r>
     dc4:	e2541000 	subs	r1, r4, #0
     dc8:	1afffffa 	bne	db8 <_reclaim_reent+0x38>
     dcc:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
     dd0:	e2866001 	add	r6, r6, #1
     dd4:	e3560020 	cmp	r6, #32
     dd8:	e1a03006 	mov	r3, r6
     ddc:	1afffff2 	bne	dac <_reclaim_reent+0x2c>
     de0:	e1a00005 	mov	r0, r5
     de4:	e1a01002 	mov	r1, r2
     de8:	eb00007f 	bl	fec <_free_r>
     dec:	e5951040 	ldr	r1, [r5, #64]	; 0x40
     df0:	e3510000 	cmp	r1, #0
     df4:	11a00005 	movne	r0, r5
     df8:	1b00007b 	blne	fec <_free_r>
     dfc:	e5951148 	ldr	r1, [r5, #328]	; 0x148
     e00:	e3510000 	cmp	r1, #0
     e04:	0a000008 	beq	e2c <_reclaim_reent+0xac>
     e08:	e2856f53 	add	r6, r5, #332	; 0x14c
     e0c:	e1510006 	cmp	r1, r6
     e10:	0a000005 	beq	e2c <_reclaim_reent+0xac>
     e14:	e5914000 	ldr	r4, [r1]
     e18:	e1a00005 	mov	r0, r5
     e1c:	eb000072 	bl	fec <_free_r>
     e20:	e1560004 	cmp	r6, r4
     e24:	e1a01004 	mov	r1, r4
     e28:	1afffff9 	bne	e14 <_reclaim_reent+0x94>
     e2c:	e5951054 	ldr	r1, [r5, #84]	; 0x54
     e30:	e3510000 	cmp	r1, #0
     e34:	11a00005 	movne	r0, r5
     e38:	1b00006b 	blne	fec <_free_r>
     e3c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
     e40:	e3530000 	cmp	r3, #0
     e44:	1a000001 	bne	e50 <_reclaim_reent+0xd0>
     e48:	e8bd4070 	pop	{r4, r5, r6, lr}
     e4c:	e12fff1e 	bx	lr
     e50:	e1a00005 	mov	r0, r5
     e54:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
     e58:	e1a0e00f 	mov	lr, pc
     e5c:	e12fff1c 	bx	r12
     e60:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
     e64:	e3510000 	cmp	r1, #0
     e68:	0afffff6 	beq	e48 <_reclaim_reent+0xc8>
     e6c:	e1a00005 	mov	r0, r5
     e70:	e8bd4070 	pop	{r4, r5, r6, lr}
     e74:	eaffffb6 	b	d54 <cleanup_glue>
     e78:	00001bf8 	.word	0x00001bf8

00000e7c <_wrapup_reent>:
     e7c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     e80:	e2507000 	subs	r7, r0, #0
     e84:	059f3060 	ldreq	r3, [pc, #96]	; eec <_wrapup_reent+0x70>
     e88:	05937000 	ldreq	r7, [r3]
     e8c:	e5976148 	ldr	r6, [r7, #328]	; 0x148
     e90:	e3560000 	cmp	r6, #0
     e94:	0a00000d 	beq	ed0 <_wrapup_reent+0x54>
     e98:	e5965004 	ldr	r5, [r6, #4]
     e9c:	e2554001 	subs	r4, r5, #1
     ea0:	52855002 	addpl	r5, r5, #2
     ea4:	50865105 	addpl	r5, r6, r5, lsl #2
     ea8:	4a000005 	bmi	ec4 <_wrapup_reent+0x48>
     eac:	e5353004 	ldr	r3, [r5, #-4]!
     eb0:	e2444001 	sub	r4, r4, #1
     eb4:	e1a0e00f 	mov	lr, pc
     eb8:	e12fff13 	bx	r3
     ebc:	e3740001 	cmn	r4, #1
     ec0:	1afffff9 	bne	eac <_wrapup_reent+0x30>
     ec4:	e5966000 	ldr	r6, [r6]
     ec8:	e3560000 	cmp	r6, #0
     ecc:	1afffff1 	bne	e98 <_wrapup_reent+0x1c>
     ed0:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
     ed4:	e3530000 	cmp	r3, #0
     ed8:	11a00007 	movne	r0, r7
     edc:	11a0e00f 	movne	lr, pc
     ee0:	112fff13 	bxne	r3
     ee4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     ee8:	e12fff1e 	bx	lr
     eec:	00001bf8 	.word	0x00001bf8

00000ef0 <_malloc_trim_r>:
     ef0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     ef4:	e59f50e4 	ldr	r5, [pc, #228]	; fe0 <_malloc_trim_r+0xf0>
     ef8:	e1a07001 	mov	r7, r1
     efc:	e1a04000 	mov	r4, r0
     f00:	eb00029b 	bl	1974 <__malloc_lock>
     f04:	e5953008 	ldr	r3, [r5, #8]
     f08:	e5936004 	ldr	r6, [r3, #4]
     f0c:	e3c66003 	bic	r6, r6, #3
     f10:	e2863efe 	add	r3, r6, #4064	; 0xfe0
     f14:	e283300f 	add	r3, r3, #15
     f18:	e0677003 	rsb	r7, r7, r3
     f1c:	e1a07627 	lsr	r7, r7, #12
     f20:	e2477001 	sub	r7, r7, #1
     f24:	e1a07607 	lsl	r7, r7, #12
     f28:	e3570a01 	cmp	r7, #4096	; 0x1000
     f2c:	ba000006 	blt	f4c <_malloc_trim_r+0x5c>
     f30:	e1a00004 	mov	r0, r4
     f34:	e3a01000 	mov	r1, #0
     f38:	eb00028f 	bl	197c <_sbrk_r>
     f3c:	e5953008 	ldr	r3, [r5, #8]
     f40:	e0833006 	add	r3, r3, r6
     f44:	e1500003 	cmp	r0, r3
     f48:	0a000004 	beq	f60 <_malloc_trim_r+0x70>
     f4c:	e1a00004 	mov	r0, r4
     f50:	eb000288 	bl	1978 <__malloc_unlock>
     f54:	e3a00000 	mov	r0, #0
     f58:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     f5c:	e12fff1e 	bx	lr
     f60:	e1a00004 	mov	r0, r4
     f64:	e2671000 	rsb	r1, r7, #0
     f68:	eb000283 	bl	197c <_sbrk_r>
     f6c:	e3700001 	cmn	r0, #1
     f70:	0a00000b 	beq	fa4 <_malloc_trim_r+0xb4>
     f74:	e59f3068 	ldr	r3, [pc, #104]	; fe4 <_malloc_trim_r+0xf4>
     f78:	e5952008 	ldr	r2, [r5, #8]
     f7c:	e5931000 	ldr	r1, [r3]
     f80:	e0676006 	rsb	r6, r7, r6
     f84:	e3866001 	orr	r6, r6, #1
     f88:	e0677001 	rsb	r7, r7, r1
     f8c:	e1a00004 	mov	r0, r4
     f90:	e5826004 	str	r6, [r2, #4]
     f94:	e5837000 	str	r7, [r3]
     f98:	eb000276 	bl	1978 <__malloc_unlock>
     f9c:	e3a00001 	mov	r0, #1
     fa0:	eaffffec 	b	f58 <_malloc_trim_r+0x68>
     fa4:	e1a00004 	mov	r0, r4
     fa8:	e3a01000 	mov	r1, #0
     fac:	eb000272 	bl	197c <_sbrk_r>
     fb0:	e5953008 	ldr	r3, [r5, #8]
     fb4:	e0632000 	rsb	r2, r3, r0
     fb8:	e352000f 	cmp	r2, #15
     fbc:	daffffe2 	ble	f4c <_malloc_trim_r+0x5c>
     fc0:	e59f1020 	ldr	r1, [pc, #32]	; fe8 <_malloc_trim_r+0xf8>
     fc4:	e5911000 	ldr	r1, [r1]
     fc8:	e0610000 	rsb	r0, r1, r0
     fcc:	e59f1010 	ldr	r1, [pc, #16]	; fe4 <_malloc_trim_r+0xf4>
     fd0:	e3822001 	orr	r2, r2, #1
     fd4:	e5810000 	str	r0, [r1]
     fd8:	e5832004 	str	r2, [r3, #4]
     fdc:	eaffffda 	b	f4c <_malloc_trim_r+0x5c>
     fe0:	00002028 	.word	0x00002028
     fe4:	0000246c 	.word	0x0000246c
     fe8:	00002430 	.word	0x00002430

00000fec <_free_r>:
     fec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     ff0:	e2514000 	subs	r4, r1, #0
     ff4:	e1a06000 	mov	r6, r0
     ff8:	0a000046 	beq	1118 <_free_r+0x12c>
     ffc:	eb00025c 	bl	1974 <__malloc_lock>
    1000:	e514e004 	ldr	lr, [r4, #-4]
    1004:	e59f1238 	ldr	r1, [pc, #568]	; 1244 <_free_r+0x258>
    1008:	e244c008 	sub	r12, r4, #8
    100c:	e3ce3001 	bic	r3, lr, #1
    1010:	e08c2003 	add	r2, r12, r3
    1014:	e5910008 	ldr	r0, [r1, #8]
    1018:	e5925004 	ldr	r5, [r2, #4]
    101c:	e1500002 	cmp	r0, r2
    1020:	e3c55003 	bic	r5, r5, #3
    1024:	0a00004a 	beq	1154 <_free_r+0x168>
    1028:	e21ee001 	ands	lr, lr, #1
    102c:	e5825004 	str	r5, [r2, #4]
    1030:	13a0e000 	movne	lr, #0
    1034:	1a000009 	bne	1060 <_free_r+0x74>
    1038:	e5144008 	ldr	r4, [r4, #-8]
    103c:	e064c00c 	rsb	r12, r4, r12
    1040:	e59c0008 	ldr	r0, [r12, #8]
    1044:	e2817008 	add	r7, r1, #8
    1048:	e1500007 	cmp	r0, r7
    104c:	e0833004 	add	r3, r3, r4
    1050:	159c400c 	ldrne	r4, [r12, #12]
    1054:	1580400c 	strne	r4, [r0, #12]
    1058:	15840008 	strne	r0, [r4, #8]
    105c:	03a0e001 	moveq	lr, #1
    1060:	e0820005 	add	r0, r2, r5
    1064:	e5900004 	ldr	r0, [r0, #4]
    1068:	e3100001 	tst	r0, #1
    106c:	1a000009 	bne	1098 <_free_r+0xac>
    1070:	e35e0000 	cmp	lr, #0
    1074:	e5920008 	ldr	r0, [r2, #8]
    1078:	e0833005 	add	r3, r3, r5
    107c:	1a000002 	bne	108c <_free_r+0xa0>
    1080:	e59f41c0 	ldr	r4, [pc, #448]	; 1248 <_free_r+0x25c>
    1084:	e1500004 	cmp	r0, r4
    1088:	0a000047 	beq	11ac <_free_r+0x1c0>
    108c:	e592200c 	ldr	r2, [r2, #12]
    1090:	e580200c 	str	r2, [r0, #12]
    1094:	e5820008 	str	r0, [r2, #8]
    1098:	e3832001 	orr	r2, r3, #1
    109c:	e35e0000 	cmp	lr, #0
    10a0:	e58c2004 	str	r2, [r12, #4]
    10a4:	e78c3003 	str	r3, [r12, r3]
    10a8:	1a000018 	bne	1110 <_free_r+0x124>
    10ac:	e3530c02 	cmp	r3, #512	; 0x200
    10b0:	3a00001a 	bcc	1120 <_free_r+0x134>
    10b4:	e1a024a3 	lsr	r2, r3, #9
    10b8:	e3520004 	cmp	r2, #4
    10bc:	8a000042 	bhi	11cc <_free_r+0x1e0>
    10c0:	e1a0e323 	lsr	lr, r3, #6
    10c4:	e28ee038 	add	lr, lr, #56	; 0x38
    10c8:	e1a0008e 	lsl	r0, lr, #1
    10cc:	e0810100 	add	r0, r1, r0, lsl #2
    10d0:	e5902008 	ldr	r2, [r0, #8]
    10d4:	e1520000 	cmp	r2, r0
    10d8:	e59f1164 	ldr	r1, [pc, #356]	; 1244 <_free_r+0x258>
    10dc:	0a000044 	beq	11f4 <_free_r+0x208>
    10e0:	e5921004 	ldr	r1, [r2, #4]
    10e4:	e3c11003 	bic	r1, r1, #3
    10e8:	e1530001 	cmp	r3, r1
    10ec:	2a000002 	bcs	10fc <_free_r+0x110>
    10f0:	e5922008 	ldr	r2, [r2, #8]
    10f4:	e1500002 	cmp	r0, r2
    10f8:	1afffff8 	bne	10e0 <_free_r+0xf4>
    10fc:	e592300c 	ldr	r3, [r2, #12]
    1100:	e58c300c 	str	r3, [r12, #12]
    1104:	e58c2008 	str	r2, [r12, #8]
    1108:	e582c00c 	str	r12, [r2, #12]
    110c:	e583c008 	str	r12, [r3, #8]
    1110:	e1a00006 	mov	r0, r6
    1114:	eb000217 	bl	1978 <__malloc_unlock>
    1118:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    111c:	e12fff1e 	bx	lr
    1120:	e5912004 	ldr	r2, [r1, #4]
    1124:	e1a031a3 	lsr	r3, r3, #3
    1128:	e1a00143 	asr	r0, r3, #2
    112c:	e3a0e001 	mov	lr, #1
    1130:	e182001e 	orr	r0, r2, lr, lsl r0
    1134:	e0813183 	add	r3, r1, r3, lsl #3
    1138:	e5932008 	ldr	r2, [r3, #8]
    113c:	e58c300c 	str	r3, [r12, #12]
    1140:	e58c2008 	str	r2, [r12, #8]
    1144:	e5810004 	str	r0, [r1, #4]
    1148:	e583c008 	str	r12, [r3, #8]
    114c:	e582c00c 	str	r12, [r2, #12]
    1150:	eaffffee 	b	1110 <_free_r+0x124>
    1154:	e31e0001 	tst	lr, #1
    1158:	e0853003 	add	r3, r5, r3
    115c:	1a000006 	bne	117c <_free_r+0x190>
    1160:	e5142008 	ldr	r2, [r4, #-8]
    1164:	e062c00c 	rsb	r12, r2, r12
    1168:	e59c000c 	ldr	r0, [r12, #12]
    116c:	e59ce008 	ldr	lr, [r12, #8]
    1170:	e58e000c 	str	r0, [lr, #12]
    1174:	e580e008 	str	lr, [r0, #8]
    1178:	e0833002 	add	r3, r3, r2
    117c:	e59f20c8 	ldr	r2, [pc, #200]	; 124c <_free_r+0x260>
    1180:	e5920000 	ldr	r0, [r2]
    1184:	e3832001 	orr	r2, r3, #1
    1188:	e1530000 	cmp	r3, r0
    118c:	e58c2004 	str	r2, [r12, #4]
    1190:	e581c008 	str	r12, [r1, #8]
    1194:	3affffdd 	bcc	1110 <_free_r+0x124>
    1198:	e59f30b0 	ldr	r3, [pc, #176]	; 1250 <_free_r+0x264>
    119c:	e1a00006 	mov	r0, r6
    11a0:	e5931000 	ldr	r1, [r3]
    11a4:	ebffff51 	bl	ef0 <_malloc_trim_r>
    11a8:	eaffffd8 	b	1110 <_free_r+0x124>
    11ac:	e3832001 	orr	r2, r3, #1
    11b0:	e581c014 	str	r12, [r1, #20]
    11b4:	e581c010 	str	r12, [r1, #16]
    11b8:	e58c000c 	str	r0, [r12, #12]
    11bc:	e58c0008 	str	r0, [r12, #8]
    11c0:	e58c2004 	str	r2, [r12, #4]
    11c4:	e78c3003 	str	r3, [r12, r3]
    11c8:	eaffffd0 	b	1110 <_free_r+0x124>
    11cc:	e3520014 	cmp	r2, #20
    11d0:	9282e05b 	addls	lr, r2, #91	; 0x5b
    11d4:	91a0008e 	lslls	r0, lr, #1
    11d8:	9affffbb 	bls	10cc <_free_r+0xe0>
    11dc:	e3520054 	cmp	r2, #84	; 0x54
    11e0:	8a00000a 	bhi	1210 <_free_r+0x224>
    11e4:	e1a0e623 	lsr	lr, r3, #12
    11e8:	e28ee06e 	add	lr, lr, #110	; 0x6e
    11ec:	e1a0008e 	lsl	r0, lr, #1
    11f0:	eaffffb5 	b	10cc <_free_r+0xe0>
    11f4:	e5913004 	ldr	r3, [r1, #4]
    11f8:	e1a0e14e 	asr	lr, lr, #2
    11fc:	e3a00001 	mov	r0, #1
    1200:	e1830e10 	orr	r0, r3, r0, lsl lr
    1204:	e1a03002 	mov	r3, r2
    1208:	e5810004 	str	r0, [r1, #4]
    120c:	eaffffbb 	b	1100 <_free_r+0x114>
    1210:	e3520f55 	cmp	r2, #340	; 0x154
    1214:	91a0e7a3 	lsrls	lr, r3, #15
    1218:	928ee077 	addls	lr, lr, #119	; 0x77
    121c:	91a0008e 	lslls	r0, lr, #1
    1220:	9affffa9 	bls	10cc <_free_r+0xe0>
    1224:	e59f0028 	ldr	r0, [pc, #40]	; 1254 <_free_r+0x268>
    1228:	e1520000 	cmp	r2, r0
    122c:	91a0e923 	lsrls	lr, r3, #18
    1230:	928ee07c 	addls	lr, lr, #124	; 0x7c
    1234:	91a0008e 	lslls	r0, lr, #1
    1238:	83a000fc 	movhi	r0, #252	; 0xfc
    123c:	83a0e07e 	movhi	lr, #126	; 0x7e
    1240:	eaffffa1 	b	10cc <_free_r+0xe0>
    1244:	00002028 	.word	0x00002028
    1248:	00002030 	.word	0x00002030
    124c:	00002434 	.word	0x00002434
    1250:	00002468 	.word	0x00002468
    1254:	00000554 	.word	0x00000554

00001258 <_malloc_r>:
    1258:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    125c:	e281500b 	add	r5, r1, #11
    1260:	e3550016 	cmp	r5, #22
    1264:	83c55007 	bichi	r5, r5, #7
    1268:	81a03fa5 	lsrhi	r3, r5, #31
    126c:	93a03000 	movls	r3, #0
    1270:	93a05010 	movls	r5, #16
    1274:	e1550001 	cmp	r5, r1
    1278:	21a01003 	movcs	r1, r3
    127c:	33831001 	orrcc	r1, r3, #1
    1280:	e3510000 	cmp	r1, #0
    1284:	13a0300c 	movne	r3, #12
    1288:	e24dd00c 	sub	sp, sp, #12
    128c:	e1a06000 	mov	r6, r0
    1290:	15803000 	strne	r3, [r0]
    1294:	13a04000 	movne	r4, #0
    1298:	1a000015 	bne	12f4 <_malloc_r+0x9c>
    129c:	eb0001b4 	bl	1974 <__malloc_lock>
    12a0:	e3550f7e 	cmp	r5, #504	; 0x1f8
    12a4:	2a000016 	bcs	1304 <_malloc_r+0xac>
    12a8:	e59f76b8 	ldr	r7, [pc, #1720]	; 1968 <_malloc_r+0x710>
    12ac:	e1a0e1a5 	lsr	lr, r5, #3
    12b0:	e087318e 	add	r3, r7, lr, lsl #3
    12b4:	e593400c 	ldr	r4, [r3, #12]
    12b8:	e1540003 	cmp	r4, r3
    12bc:	0a00014b 	beq	17f0 <_malloc_r+0x598>
    12c0:	e5943004 	ldr	r3, [r4, #4]
    12c4:	e3c33003 	bic	r3, r3, #3
    12c8:	e0843003 	add	r3, r4, r3
    12cc:	e5930004 	ldr	r0, [r3, #4]
    12d0:	e2841008 	add	r1, r4, #8
    12d4:	e8910006 	ldm	r1, {r1, r2}
    12d8:	e3800001 	orr	r0, r0, #1
    12dc:	e5830004 	str	r0, [r3, #4]
    12e0:	e581200c 	str	r2, [r1, #12]
    12e4:	e5821008 	str	r1, [r2, #8]
    12e8:	e1a00006 	mov	r0, r6
    12ec:	eb0001a1 	bl	1978 <__malloc_unlock>
    12f0:	e2844008 	add	r4, r4, #8
    12f4:	e1a00004 	mov	r0, r4
    12f8:	e28dd00c 	add	sp, sp, #12
    12fc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1300:	e12fff1e 	bx	lr
    1304:	e1b0e4a5 	lsrs	lr, r5, #9
    1308:	01a0e1a5 	lsreq	lr, r5, #3
    130c:	01a0108e 	lsleq	r1, lr, #1
    1310:	1a000061 	bne	149c <_malloc_r+0x244>
    1314:	e59f764c 	ldr	r7, [pc, #1612]	; 1968 <_malloc_r+0x710>
    1318:	e0871101 	add	r1, r7, r1, lsl #2
    131c:	e591400c 	ldr	r4, [r1, #12]
    1320:	e1510004 	cmp	r1, r4
    1324:	1a000005 	bne	1340 <_malloc_r+0xe8>
    1328:	ea00000a 	b	1358 <_malloc_r+0x100>
    132c:	e3530000 	cmp	r3, #0
    1330:	aa0000d7 	bge	1694 <_malloc_r+0x43c>
    1334:	e594400c 	ldr	r4, [r4, #12]
    1338:	e1510004 	cmp	r1, r4
    133c:	0a000005 	beq	1358 <_malloc_r+0x100>
    1340:	e5942004 	ldr	r2, [r4, #4]
    1344:	e3c22003 	bic	r2, r2, #3
    1348:	e0653002 	rsb	r3, r5, r2
    134c:	e353000f 	cmp	r3, #15
    1350:	dafffff5 	ble	132c <_malloc_r+0xd4>
    1354:	e24ee001 	sub	lr, lr, #1
    1358:	e28ee001 	add	lr, lr, #1
    135c:	e59f3604 	ldr	r3, [pc, #1540]	; 1968 <_malloc_r+0x710>
    1360:	e5974010 	ldr	r4, [r7, #16]
    1364:	e2838008 	add	r8, r3, #8
    1368:	e1540008 	cmp	r4, r8
    136c:	05931004 	ldreq	r1, [r3, #4]
    1370:	0a000016 	beq	13d0 <_malloc_r+0x178>
    1374:	e5942004 	ldr	r2, [r4, #4]
    1378:	e3c22003 	bic	r2, r2, #3
    137c:	e0651002 	rsb	r1, r5, r2
    1380:	e351000f 	cmp	r1, #15
    1384:	ca0000f7 	bgt	1768 <_malloc_r+0x510>
    1388:	e3510000 	cmp	r1, #0
    138c:	e5838014 	str	r8, [r3, #20]
    1390:	e5838010 	str	r8, [r3, #16]
    1394:	aa000046 	bge	14b4 <_malloc_r+0x25c>
    1398:	e3520c02 	cmp	r2, #512	; 0x200
    139c:	2a0000d2 	bcs	16ec <_malloc_r+0x494>
    13a0:	e5930004 	ldr	r0, [r3, #4]
    13a4:	e1a021a2 	lsr	r2, r2, #3
    13a8:	e1a01142 	asr	r1, r2, #2
    13ac:	e3a0c001 	mov	r12, #1
    13b0:	e180111c 	orr	r1, r0, r12, lsl r1
    13b4:	e0832182 	add	r2, r3, r2, lsl #3
    13b8:	e5920008 	ldr	r0, [r2, #8]
    13bc:	e584200c 	str	r2, [r4, #12]
    13c0:	e5840008 	str	r0, [r4, #8]
    13c4:	e5831004 	str	r1, [r3, #4]
    13c8:	e5824008 	str	r4, [r2, #8]
    13cc:	e580400c 	str	r4, [r0, #12]
    13d0:	e1a0014e 	asr	r0, lr, #2
    13d4:	e3a03001 	mov	r3, #1
    13d8:	e1a00013 	lsl	r0, r3, r0
    13dc:	e1500001 	cmp	r0, r1
    13e0:	8a00003b 	bhi	14d4 <_malloc_r+0x27c>
    13e4:	e1110000 	tst	r1, r0
    13e8:	1a000008 	bne	1410 <_malloc_r+0x1b8>
    13ec:	e1a00310 	lsl	r0, r0, r3
    13f0:	e3cee003 	bic	lr, lr, #3
    13f4:	e1110000 	tst	r1, r0
    13f8:	e28ee004 	add	lr, lr, #4
    13fc:	1a000003 	bne	1410 <_malloc_r+0x1b8>
    1400:	e1a00080 	lsl	r0, r0, #1
    1404:	e1110000 	tst	r1, r0
    1408:	e28ee004 	add	lr, lr, #4
    140c:	0afffffb 	beq	1400 <_malloc_r+0x1a8>
    1410:	e087a18e 	add	r10, r7, lr, lsl #3
    1414:	e1a0c00a 	mov	r12, r10
    1418:	e1a0400e 	mov	r4, lr
    141c:	e59c300c 	ldr	r3, [r12, #12]
    1420:	e15c0003 	cmp	r12, r3
    1424:	1a000005 	bne	1440 <_malloc_r+0x1e8>
    1428:	ea0000db 	b	179c <_malloc_r+0x544>
    142c:	e3520000 	cmp	r2, #0
    1430:	aa0000f4 	bge	1808 <_malloc_r+0x5b0>
    1434:	e593300c 	ldr	r3, [r3, #12]
    1438:	e15c0003 	cmp	r12, r3
    143c:	0a0000d6 	beq	179c <_malloc_r+0x544>
    1440:	e5931004 	ldr	r1, [r3, #4]
    1444:	e3c11003 	bic	r1, r1, #3
    1448:	e0652001 	rsb	r2, r5, r1
    144c:	e352000f 	cmp	r2, #15
    1450:	dafffff5 	ble	142c <_malloc_r+0x1d4>
    1454:	e1a04003 	mov	r4, r3
    1458:	e593000c 	ldr	r0, [r3, #12]
    145c:	e5b4c008 	ldr	r12, [r4, #8]!
    1460:	e0831005 	add	r1, r3, r5
    1464:	e382e001 	orr	lr, r2, #1
    1468:	e3855001 	orr	r5, r5, #1
    146c:	e58c000c 	str	r0, [r12, #12]
    1470:	e580c008 	str	r12, [r0, #8]
    1474:	e5835004 	str	r5, [r3, #4]
    1478:	e5871014 	str	r1, [r7, #20]
    147c:	e5871010 	str	r1, [r7, #16]
    1480:	e581800c 	str	r8, [r1, #12]
    1484:	e5818008 	str	r8, [r1, #8]
    1488:	e581e004 	str	lr, [r1, #4]
    148c:	e7812002 	str	r2, [r1, r2]
    1490:	e1a00006 	mov	r0, r6
    1494:	eb000137 	bl	1978 <__malloc_unlock>
    1498:	eaffff95 	b	12f4 <_malloc_r+0x9c>
    149c:	e35e0004 	cmp	lr, #4
    14a0:	8a000087 	bhi	16c4 <_malloc_r+0x46c>
    14a4:	e1a0e325 	lsr	lr, r5, #6
    14a8:	e28ee038 	add	lr, lr, #56	; 0x38
    14ac:	e1a0108e 	lsl	r1, lr, #1
    14b0:	eaffff97 	b	1314 <_malloc_r+0xbc>
    14b4:	e0842002 	add	r2, r4, r2
    14b8:	e5923004 	ldr	r3, [r2, #4]
    14bc:	e3833001 	orr	r3, r3, #1
    14c0:	e5823004 	str	r3, [r2, #4]
    14c4:	e1a00006 	mov	r0, r6
    14c8:	eb00012a 	bl	1978 <__malloc_unlock>
    14cc:	e2844008 	add	r4, r4, #8
    14d0:	eaffff87 	b	12f4 <_malloc_r+0x9c>
    14d4:	e5974008 	ldr	r4, [r7, #8]
    14d8:	e594a004 	ldr	r10, [r4, #4]
    14dc:	e3caa003 	bic	r10, r10, #3
    14e0:	e155000a 	cmp	r5, r10
    14e4:	8a000002 	bhi	14f4 <_malloc_r+0x29c>
    14e8:	e065300a 	rsb	r3, r5, r10
    14ec:	e353000f 	cmp	r3, #15
    14f0:	ca00005d 	bgt	166c <_malloc_r+0x414>
    14f4:	e59f9470 	ldr	r9, [pc, #1136]	; 196c <_malloc_r+0x714>
    14f8:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    14fc:	e599b000 	ldr	r11, [r9]
    1500:	e3730001 	cmn	r3, #1
    1504:	e085b00b 	add	r11, r5, r11
    1508:	128bba01 	addne	r11, r11, #4096	; 0x1000
    150c:	128bb00f 	addne	r11, r11, #15
    1510:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    1514:	028bb010 	addeq	r11, r11, #16
    1518:	13cbb00f 	bicne	r11, r11, #15
    151c:	e084200a 	add	r2, r4, r10
    1520:	e1a00006 	mov	r0, r6
    1524:	e1a0100b 	mov	r1, r11
    1528:	e58d2004 	str	r2, [sp, #4]
    152c:	eb000112 	bl	197c <_sbrk_r>
    1530:	e3700001 	cmn	r0, #1
    1534:	e1a08000 	mov	r8, r0
    1538:	e59d2004 	ldr	r2, [sp, #4]
    153c:	0a0000e2 	beq	18cc <_malloc_r+0x674>
    1540:	e1520000 	cmp	r2, r0
    1544:	8a0000bf 	bhi	1848 <_malloc_r+0x5f0>
    1548:	e5993004 	ldr	r3, [r9, #4]
    154c:	e1520008 	cmp	r2, r8
    1550:	e08b3003 	add	r3, r11, r3
    1554:	e5893004 	str	r3, [r9, #4]
    1558:	0a0000df 	beq	18dc <_malloc_r+0x684>
    155c:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    1560:	e3710001 	cmn	r1, #1
    1564:	10622008 	rsbne	r2, r2, r8
    1568:	059f33f8 	ldreq	r3, [pc, #1016]	; 1968 <_malloc_r+0x710>
    156c:	10833002 	addne	r3, r3, r2
    1570:	05838408 	streq	r8, [r3, #1032]	; 0x408
    1574:	15893004 	strne	r3, [r9, #4]
    1578:	e2183007 	ands	r3, r8, #7
    157c:	12632008 	rsbne	r2, r3, #8
    1580:	10888002 	addne	r8, r8, r2
    1584:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    1588:	12832008 	addne	r2, r3, #8
    158c:	e088300b 	add	r3, r8, r11
    1590:	03a02a01 	moveq	r2, #4096	; 0x1000
    1594:	e1a03a03 	lsl	r3, r3, #20
    1598:	e042ba23 	sub	r11, r2, r3, lsr #20
    159c:	e1a0100b 	mov	r1, r11
    15a0:	e1a00006 	mov	r0, r6
    15a4:	eb0000f4 	bl	197c <_sbrk_r>
    15a8:	e3700001 	cmn	r0, #1
    15ac:	10682000 	rsbne	r2, r8, r0
    15b0:	e5993004 	ldr	r3, [r9, #4]
    15b4:	108b2002 	addne	r2, r11, r2
    15b8:	03a0b000 	moveq	r11, #0
    15bc:	13822001 	orrne	r2, r2, #1
    15c0:	03a02001 	moveq	r2, #1
    15c4:	e08b3003 	add	r3, r11, r3
    15c8:	e1540007 	cmp	r4, r7
    15cc:	e5893004 	str	r3, [r9, #4]
    15d0:	e5878008 	str	r8, [r7, #8]
    15d4:	e5882004 	str	r2, [r8, #4]
    15d8:	0a00000d 	beq	1614 <_malloc_r+0x3bc>
    15dc:	e35a000f 	cmp	r10, #15
    15e0:	9a0000ac 	bls	1898 <_malloc_r+0x640>
    15e4:	e594c004 	ldr	r12, [r4, #4]
    15e8:	e24a200c 	sub	r2, r10, #12
    15ec:	e3c22007 	bic	r2, r2, #7
    15f0:	e20cc001 	and	r12, r12, #1
    15f4:	e0841002 	add	r1, r4, r2
    15f8:	e3a00005 	mov	r0, #5
    15fc:	e182c00c 	orr	r12, r2, r12
    1600:	e352000f 	cmp	r2, #15
    1604:	e584c004 	str	r12, [r4, #4]
    1608:	e5810004 	str	r0, [r1, #4]
    160c:	e5810008 	str	r0, [r1, #8]
    1610:	8a0000b8 	bhi	18f8 <_malloc_r+0x6a0>
    1614:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    1618:	e1530002 	cmp	r3, r2
    161c:	859f2348 	ldrhi	r2, [pc, #840]	; 196c <_malloc_r+0x714>
    1620:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    1624:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    1628:	e5974008 	ldr	r4, [r7, #8]
    162c:	e1530002 	cmp	r3, r2
    1630:	95943004 	ldrls	r3, [r4, #4]
    1634:	85942004 	ldrhi	r2, [r4, #4]
    1638:	859f132c 	ldrhi	r1, [pc, #812]	; 196c <_malloc_r+0x714>
    163c:	93c33003 	bicls	r3, r3, #3
    1640:	85813030 	strhi	r3, [r1, #48]	; 0x30
    1644:	83c23003 	bichi	r3, r2, #3
    1648:	e1550003 	cmp	r5, r3
    164c:	e0653003 	rsb	r3, r5, r3
    1650:	8a000001 	bhi	165c <_malloc_r+0x404>
    1654:	e353000f 	cmp	r3, #15
    1658:	ca000003 	bgt	166c <_malloc_r+0x414>
    165c:	e1a00006 	mov	r0, r6
    1660:	eb0000c4 	bl	1978 <__malloc_unlock>
    1664:	e3a04000 	mov	r4, #0
    1668:	eaffff21 	b	12f4 <_malloc_r+0x9c>
    166c:	e0842005 	add	r2, r4, r5
    1670:	e3833001 	orr	r3, r3, #1
    1674:	e3855001 	orr	r5, r5, #1
    1678:	e5845004 	str	r5, [r4, #4]
    167c:	e1a00006 	mov	r0, r6
    1680:	e5823004 	str	r3, [r2, #4]
    1684:	e5872008 	str	r2, [r7, #8]
    1688:	e2844008 	add	r4, r4, #8
    168c:	eb0000b9 	bl	1978 <__malloc_unlock>
    1690:	eaffff17 	b	12f4 <_malloc_r+0x9c>
    1694:	e0842002 	add	r2, r4, r2
    1698:	e5920004 	ldr	r0, [r2, #4]
    169c:	e2841008 	add	r1, r4, #8
    16a0:	e891000a 	ldm	r1, {r1, r3}
    16a4:	e3800001 	orr	r0, r0, #1
    16a8:	e5820004 	str	r0, [r2, #4]
    16ac:	e581300c 	str	r3, [r1, #12]
    16b0:	e5831008 	str	r1, [r3, #8]
    16b4:	e1a00006 	mov	r0, r6
    16b8:	eb0000ae 	bl	1978 <__malloc_unlock>
    16bc:	e2844008 	add	r4, r4, #8
    16c0:	eaffff0b 	b	12f4 <_malloc_r+0x9c>
    16c4:	e35e0014 	cmp	lr, #20
    16c8:	928ee05b 	addls	lr, lr, #91	; 0x5b
    16cc:	91a0108e 	lslls	r1, lr, #1
    16d0:	9affff0f 	bls	1314 <_malloc_r+0xbc>
    16d4:	e35e0054 	cmp	lr, #84	; 0x54
    16d8:	8a000061 	bhi	1864 <_malloc_r+0x60c>
    16dc:	e1a0e625 	lsr	lr, r5, #12
    16e0:	e28ee06e 	add	lr, lr, #110	; 0x6e
    16e4:	e1a0108e 	lsl	r1, lr, #1
    16e8:	eaffff09 	b	1314 <_malloc_r+0xbc>
    16ec:	e1a034a2 	lsr	r3, r2, #9
    16f0:	e3530004 	cmp	r3, #4
    16f4:	9a00004f 	bls	1838 <_malloc_r+0x5e0>
    16f8:	e3530014 	cmp	r3, #20
    16fc:	9283a05b 	addls	r10, r3, #91	; 0x5b
    1700:	91a0008a 	lslls	r0, r10, #1
    1704:	9a000004 	bls	171c <_malloc_r+0x4c4>
    1708:	e3530054 	cmp	r3, #84	; 0x54
    170c:	8a00007f 	bhi	1910 <_malloc_r+0x6b8>
    1710:	e1a0a622 	lsr	r10, r2, #12
    1714:	e28aa06e 	add	r10, r10, #110	; 0x6e
    1718:	e1a0008a 	lsl	r0, r10, #1
    171c:	e0870100 	add	r0, r7, r0, lsl #2
    1720:	e5903008 	ldr	r3, [r0, #8]
    1724:	e1530000 	cmp	r3, r0
    1728:	e59fc238 	ldr	r12, [pc, #568]	; 1968 <_malloc_r+0x710>
    172c:	0a000052 	beq	187c <_malloc_r+0x624>
    1730:	e5931004 	ldr	r1, [r3, #4]
    1734:	e3c11003 	bic	r1, r1, #3
    1738:	e1520001 	cmp	r2, r1
    173c:	2a000002 	bcs	174c <_malloc_r+0x4f4>
    1740:	e5933008 	ldr	r3, [r3, #8]
    1744:	e1500003 	cmp	r0, r3
    1748:	1afffff8 	bne	1730 <_malloc_r+0x4d8>
    174c:	e593200c 	ldr	r2, [r3, #12]
    1750:	e5971004 	ldr	r1, [r7, #4]
    1754:	e584200c 	str	r2, [r4, #12]
    1758:	e5843008 	str	r3, [r4, #8]
    175c:	e583400c 	str	r4, [r3, #12]
    1760:	e5824008 	str	r4, [r2, #8]
    1764:	eaffff19 	b	13d0 <_malloc_r+0x178>
    1768:	e0842005 	add	r2, r4, r5
    176c:	e3810001 	orr	r0, r1, #1
    1770:	e3855001 	orr	r5, r5, #1
    1774:	e5845004 	str	r5, [r4, #4]
    1778:	e5832014 	str	r2, [r3, #20]
    177c:	e5832010 	str	r2, [r3, #16]
    1780:	e582800c 	str	r8, [r2, #12]
    1784:	e9820101 	stmib	r2, {r0, r8}
    1788:	e7821001 	str	r1, [r2, r1]
    178c:	e1a00006 	mov	r0, r6
    1790:	eb000078 	bl	1978 <__malloc_unlock>
    1794:	e2844008 	add	r4, r4, #8
    1798:	eafffed5 	b	12f4 <_malloc_r+0x9c>
    179c:	e2844001 	add	r4, r4, #1
    17a0:	e3140003 	tst	r4, #3
    17a4:	e28cc008 	add	r12, r12, #8
    17a8:	1affff1b 	bne	141c <_malloc_r+0x1c4>
    17ac:	e31e0003 	tst	lr, #3
    17b0:	e24a3008 	sub	r3, r10, #8
    17b4:	0a000062 	beq	1944 <_malloc_r+0x6ec>
    17b8:	e59aa000 	ldr	r10, [r10]
    17bc:	e15a0003 	cmp	r10, r3
    17c0:	e24ee001 	sub	lr, lr, #1
    17c4:	0afffff8 	beq	17ac <_malloc_r+0x554>
    17c8:	e5973004 	ldr	r3, [r7, #4]
    17cc:	e1a00080 	lsl	r0, r0, #1
    17d0:	e1500003 	cmp	r0, r3
    17d4:	8affff3e 	bhi	14d4 <_malloc_r+0x27c>
    17d8:	e3500000 	cmp	r0, #0
    17dc:	0affff3c 	beq	14d4 <_malloc_r+0x27c>
    17e0:	e1130000 	tst	r3, r0
    17e4:	0a00005a 	beq	1954 <_malloc_r+0x6fc>
    17e8:	e1a0e004 	mov	lr, r4
    17ec:	eaffff07 	b	1410 <_malloc_r+0x1b8>
    17f0:	e2843008 	add	r3, r4, #8
    17f4:	e5944014 	ldr	r4, [r4, #20]
    17f8:	e1530004 	cmp	r3, r4
    17fc:	028ee002 	addeq	lr, lr, #2
    1800:	0afffed5 	beq	135c <_malloc_r+0x104>
    1804:	eafffead 	b	12c0 <_malloc_r+0x68>
    1808:	e0831001 	add	r1, r3, r1
    180c:	e5910004 	ldr	r0, [r1, #4]
    1810:	e1a04003 	mov	r4, r3
    1814:	e5b42008 	ldr	r2, [r4, #8]!
    1818:	e593300c 	ldr	r3, [r3, #12]
    181c:	e3800001 	orr	r0, r0, #1
    1820:	e5810004 	str	r0, [r1, #4]
    1824:	e582300c 	str	r3, [r2, #12]
    1828:	e5832008 	str	r2, [r3, #8]
    182c:	e1a00006 	mov	r0, r6
    1830:	eb000050 	bl	1978 <__malloc_unlock>
    1834:	eafffeae 	b	12f4 <_malloc_r+0x9c>
    1838:	e1a0a322 	lsr	r10, r2, #6
    183c:	e28aa038 	add	r10, r10, #56	; 0x38
    1840:	e1a0008a 	lsl	r0, r10, #1
    1844:	eaffffb4 	b	171c <_malloc_r+0x4c4>
    1848:	e1540007 	cmp	r4, r7
    184c:	0affff3d 	beq	1548 <_malloc_r+0x2f0>
    1850:	e59f3110 	ldr	r3, [pc, #272]	; 1968 <_malloc_r+0x710>
    1854:	e5934008 	ldr	r4, [r3, #8]
    1858:	e5943004 	ldr	r3, [r4, #4]
    185c:	e3c33003 	bic	r3, r3, #3
    1860:	eaffff78 	b	1648 <_malloc_r+0x3f0>
    1864:	e35e0f55 	cmp	lr, #340	; 0x154
    1868:	8a00000f 	bhi	18ac <_malloc_r+0x654>
    186c:	e1a0e7a5 	lsr	lr, r5, #15
    1870:	e28ee077 	add	lr, lr, #119	; 0x77
    1874:	e1a0108e 	lsl	r1, lr, #1
    1878:	eafffea5 	b	1314 <_malloc_r+0xbc>
    187c:	e59c2004 	ldr	r2, [r12, #4]
    1880:	e1a0a14a 	asr	r10, r10, #2
    1884:	e3a01001 	mov	r1, #1
    1888:	e1821a11 	orr	r1, r2, r1, lsl r10
    188c:	e1a02003 	mov	r2, r3
    1890:	e58c1004 	str	r1, [r12, #4]
    1894:	eaffffae 	b	1754 <_malloc_r+0x4fc>
    1898:	e3a03001 	mov	r3, #1
    189c:	e5883004 	str	r3, [r8, #4]
    18a0:	e1a04008 	mov	r4, r8
    18a4:	e3a03000 	mov	r3, #0
    18a8:	eaffff66 	b	1648 <_malloc_r+0x3f0>
    18ac:	e59f30bc 	ldr	r3, [pc, #188]	; 1970 <_malloc_r+0x718>
    18b0:	e15e0003 	cmp	lr, r3
    18b4:	91a0e925 	lsrls	lr, r5, #18
    18b8:	928ee07c 	addls	lr, lr, #124	; 0x7c
    18bc:	91a0108e 	lslls	r1, lr, #1
    18c0:	83a010fc 	movhi	r1, #252	; 0xfc
    18c4:	83a0e07e 	movhi	lr, #126	; 0x7e
    18c8:	eafffe91 	b	1314 <_malloc_r+0xbc>
    18cc:	e5974008 	ldr	r4, [r7, #8]
    18d0:	e5943004 	ldr	r3, [r4, #4]
    18d4:	e3c33003 	bic	r3, r3, #3
    18d8:	eaffff5a 	b	1648 <_malloc_r+0x3f0>
    18dc:	e1b01a02 	lsls	r1, r2, #20
    18e0:	1affff1d 	bne	155c <_malloc_r+0x304>
    18e4:	e5972008 	ldr	r2, [r7, #8]
    18e8:	e08b100a 	add	r1, r11, r10
    18ec:	e3811001 	orr	r1, r1, #1
    18f0:	e5821004 	str	r1, [r2, #4]
    18f4:	eaffff46 	b	1614 <_malloc_r+0x3bc>
    18f8:	e1a00006 	mov	r0, r6
    18fc:	e2841008 	add	r1, r4, #8
    1900:	ebfffdb9 	bl	fec <_free_r>
    1904:	e59f3060 	ldr	r3, [pc, #96]	; 196c <_malloc_r+0x714>
    1908:	e5933004 	ldr	r3, [r3, #4]
    190c:	eaffff40 	b	1614 <_malloc_r+0x3bc>
    1910:	e3530f55 	cmp	r3, #340	; 0x154
    1914:	91a0a7a2 	lsrls	r10, r2, #15
    1918:	928aa077 	addls	r10, r10, #119	; 0x77
    191c:	91a0008a 	lslls	r0, r10, #1
    1920:	9affff7d 	bls	171c <_malloc_r+0x4c4>
    1924:	e59f1044 	ldr	r1, [pc, #68]	; 1970 <_malloc_r+0x718>
    1928:	e1530001 	cmp	r3, r1
    192c:	91a0a922 	lsrls	r10, r2, #18
    1930:	928aa07c 	addls	r10, r10, #124	; 0x7c
    1934:	91a0008a 	lslls	r0, r10, #1
    1938:	83a000fc 	movhi	r0, #252	; 0xfc
    193c:	83a0a07e 	movhi	r10, #126	; 0x7e
    1940:	eaffff75 	b	171c <_malloc_r+0x4c4>
    1944:	e5973004 	ldr	r3, [r7, #4]
    1948:	e1c33000 	bic	r3, r3, r0
    194c:	e5873004 	str	r3, [r7, #4]
    1950:	eaffff9d 	b	17cc <_malloc_r+0x574>
    1954:	e1a00080 	lsl	r0, r0, #1
    1958:	e1130000 	tst	r3, r0
    195c:	e2844004 	add	r4, r4, #4
    1960:	1affffa0 	bne	17e8 <_malloc_r+0x590>
    1964:	eafffffa 	b	1954 <_malloc_r+0x6fc>
    1968:	00002028 	.word	0x00002028
    196c:	00002468 	.word	0x00002468
    1970:	00000554 	.word	0x00000554

00001974 <__malloc_lock>:
    1974:	e12fff1e 	bx	lr

00001978 <__malloc_unlock>:
    1978:	e12fff1e 	bx	lr

0000197c <_sbrk_r>:
    197c:	e92d4038 	push	{r3, r4, r5, lr}
    1980:	e59f4030 	ldr	r4, [pc, #48]	; 19b8 <_sbrk_r+0x3c>
    1984:	e3a03000 	mov	r3, #0
    1988:	e1a05000 	mov	r5, r0
    198c:	e1a00001 	mov	r0, r1
    1990:	e5843000 	str	r3, [r4]
    1994:	eb000034 	bl	1a6c <_sbrk>
    1998:	e3700001 	cmn	r0, #1
    199c:	0a000001 	beq	19a8 <_sbrk_r+0x2c>
    19a0:	e8bd4038 	pop	{r3, r4, r5, lr}
    19a4:	e12fff1e 	bx	lr
    19a8:	e5943000 	ldr	r3, [r4]
    19ac:	e3530000 	cmp	r3, #0
    19b0:	15853000 	strne	r3, [r5]
    19b4:	eafffff9 	b	19a0 <_sbrk_r+0x24>
    19b8:	00002464 	.word	0x00002464

000019bc <__cs3_premain>:
    19bc:	e92d4008 	push	{r3, lr}
    19c0:	eb000050 	bl	1b08 <__libc_init_array>
    19c4:	e59f3030 	ldr	r3, [pc, #48]	; 19fc <__cs3_premain+0x40>
    19c8:	e3530000 	cmp	r3, #0
    19cc:	15930000 	ldrne	r0, [r3]
    19d0:	01a00003 	moveq	r0, r3
    19d4:	e59f3024 	ldr	r3, [pc, #36]	; 1a00 <__cs3_premain+0x44>
    19d8:	e3530000 	cmp	r3, #0
    19dc:	15931000 	ldrne	r1, [r3]
    19e0:	01a01003 	moveq	r1, r3
    19e4:	e3a02000 	mov	r2, #0
    19e8:	ebfffa1b 	bl	25c <main>
    19ec:	e59f3010 	ldr	r3, [pc, #16]	; 1a04 <__cs3_premain+0x48>
    19f0:	e3530000 	cmp	r3, #0
    19f4:	1bfffbd2 	blne	944 <exit>
    19f8:	eafffffe 	b	19f8 <__cs3_premain+0x3c>
	...
    1a04:	00000944 	.word	0x00000944

00001a08 <_exit>:
    1a08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1a0c:	e3a00018 	mov	r0, #24
    1a10:	e59f1004 	ldr	r1, [pc, #4]	; 1a1c <_exit+0x14>
    1a14:	ef123456 	svc	0x00123456
    1a18:	eafffffe 	b	1a18 <_exit+0x10>
    1a1c:	00020026 	.word	0x00020026

00001a20 <_gettimeofday>:
    1a20:	e92d4038 	push	{r3, r4, r5, lr}
    1a24:	e2505000 	subs	r5, r0, #0
    1a28:	e1a04001 	mov	r4, r1
    1a2c:	0a000007 	beq	1a50 <_gettimeofday+0x30>
    1a30:	e3510000 	cmp	r1, #0
    1a34:	1a000007 	bne	1a58 <_gettimeofday+0x38>
    1a38:	e3a00011 	mov	r0, #17
    1a3c:	ef123456 	svc	0x00123456
    1a40:	e8850011 	stm	r5, {r0, r4}
    1a44:	e1a00004 	mov	r0, r4
    1a48:	e8bd4038 	pop	{r3, r4, r5, lr}
    1a4c:	e12fff1e 	bx	lr
    1a50:	e1a00005 	mov	r0, r5
    1a54:	eafffffb 	b	1a48 <_gettimeofday+0x28>
    1a58:	eb000026 	bl	1af8 <__errno>
    1a5c:	e3a03016 	mov	r3, #22
    1a60:	e5803000 	str	r3, [r0]
    1a64:	e3e00000 	mvn	r0, #0
    1a68:	eafffff6 	b	1a48 <_gettimeofday+0x28>

00001a6c <_sbrk>:
    1a6c:	e92d4008 	push	{r3, lr}
    1a70:	e59f305c 	ldr	r3, [pc, #92]	; 1ad4 <_sbrk+0x68>
    1a74:	e59f105c 	ldr	r1, [pc, #92]	; 1ad8 <_sbrk+0x6c>
    1a78:	e5932000 	ldr	r2, [r3]
    1a7c:	e5913000 	ldr	r3, [r1]
    1a80:	e3520000 	cmp	r2, #0
    1a84:	e0830000 	add	r0, r3, r0
    1a88:	0a000002 	beq	1a98 <_sbrk+0x2c>
    1a8c:	e0602002 	rsb	r2, r0, r2
    1a90:	e3520000 	cmp	r2, #0
    1a94:	ba000009 	blt	1ac0 <_sbrk+0x54>
    1a98:	e04d2003 	sub	r2, sp, r3
    1a9c:	e3520000 	cmp	r2, #0
    1aa0:	ba000002 	blt	1ab0 <_sbrk+0x44>
    1aa4:	e04d2000 	sub	r2, sp, r0
    1aa8:	e35200ff 	cmp	r2, #255	; 0xff
    1aac:	da000003 	ble	1ac0 <_sbrk+0x54>
    1ab0:	e5810000 	str	r0, [r1]
    1ab4:	e1a00003 	mov	r0, r3
    1ab8:	e8bd4008 	pop	{r3, lr}
    1abc:	e12fff1e 	bx	lr
    1ac0:	eb00000c 	bl	1af8 <__errno>
    1ac4:	e3a0300c 	mov	r3, #12
    1ac8:	e5803000 	str	r3, [r0]
    1acc:	e3e03000 	mvn	r3, #0
    1ad0:	eafffff7 	b	1ab4 <_sbrk+0x48>
    1ad4:	00002438 	.word	0x00002438
    1ad8:	0000243c 	.word	0x0000243c

00001adc <__cs3_isr_interrupt>:
    1adc:	eafffffe 	b	1adc <__cs3_isr_interrupt>

00001ae0 <__cs3_isr_undef>:
    1ae0:	eafffffe 	b	1ae0 <__cs3_isr_undef>

00001ae4 <__cs3_isr_swi>:
    1ae4:	eafffffe 	b	1ae4 <__cs3_isr_swi>

00001ae8 <__cs3_isr_pabort>:
    1ae8:	eafffffe 	b	1ae8 <__cs3_isr_pabort>

00001aec <__cs3_isr_dabort>:
    1aec:	eafffffe 	b	1aec <__cs3_isr_dabort>

00001af0 <__cs3_isr_irq>:
    1af0:	eafffffe 	b	1af0 <__cs3_isr_irq>

00001af4 <__cs3_isr_fiq>:
    1af4:	eafffffe 	b	1af4 <__cs3_isr_fiq>

00001af8 <__errno>:
    1af8:	e59f3004 	ldr	r3, [pc, #4]	; 1b04 <__errno+0xc>
    1afc:	e5930000 	ldr	r0, [r3]
    1b00:	e12fff1e 	bx	lr
    1b04:	00001bf8 	.word	0x00001bf8

00001b08 <__libc_init_array>:
    1b08:	e92d4070 	push	{r4, r5, r6, lr}
    1b0c:	e59f506c 	ldr	r5, [pc, #108]	; 1b80 <__libc_init_array+0x78>
    1b10:	e59f606c 	ldr	r6, [pc, #108]	; 1b84 <__libc_init_array+0x7c>
    1b14:	e0656006 	rsb	r6, r5, r6
    1b18:	e1b06146 	asrs	r6, r6, #2
    1b1c:	12455004 	subne	r5, r5, #4
    1b20:	13a04000 	movne	r4, #0
    1b24:	0a000005 	beq	1b40 <__libc_init_array+0x38>
    1b28:	e5b53004 	ldr	r3, [r5, #4]!
    1b2c:	e2844001 	add	r4, r4, #1
    1b30:	e1a0e00f 	mov	lr, pc
    1b34:	e12fff13 	bx	r3
    1b38:	e1560004 	cmp	r6, r4
    1b3c:	1afffff9 	bne	1b28 <__libc_init_array+0x20>
    1b40:	e59f5040 	ldr	r5, [pc, #64]	; 1b88 <__libc_init_array+0x80>
    1b44:	e59f6040 	ldr	r6, [pc, #64]	; 1b8c <__libc_init_array+0x84>
    1b48:	e0656006 	rsb	r6, r5, r6
    1b4c:	eb000012 	bl	1b9c <_init>
    1b50:	e1b06146 	asrs	r6, r6, #2
    1b54:	12455004 	subne	r5, r5, #4
    1b58:	13a04000 	movne	r4, #0
    1b5c:	0a000005 	beq	1b78 <__libc_init_array+0x70>
    1b60:	e5b53004 	ldr	r3, [r5, #4]!
    1b64:	e2844001 	add	r4, r4, #1
    1b68:	e1a0e00f 	mov	lr, pc
    1b6c:	e12fff13 	bx	r3
    1b70:	e1560004 	cmp	r6, r4
    1b74:	1afffff9 	bne	1b60 <__libc_init_array+0x58>
    1b78:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b7c:	e12fff1e 	bx	lr
    1b80:	00001bb4 	.word	0x00001bb4
    1b84:	00001bb4 	.word	0x00001bb4
    1b88:	00001bb4 	.word	0x00001bb4
    1b8c:	00001bbc 	.word	0x00001bbc

Disassembly of section .rodata:

00001b94 <_global_impure_ptr>:
    1b94:	00001c00 00000043                       ....C...

00001b9c <_init>:
    1b9c:	e1a0c00d 	mov	r12, sp
    1ba0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1ba4:	e24cb004 	sub	r11, r12, #4
    1ba8:	e24bd028 	sub	sp, r11, #40	; 0x28
    1bac:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1bb0:	e12fff1e 	bx	lr

00001bb4 <__init_array_start>:
    1bb4:	00000cac 	.word	0x00000cac

00001bb8 <__frame_dummy_init_array_entry>:
    1bb8:	00000208                                ....

00001bbc <__libc_fini>:
    1bbc:	e1a0c00d 	mov	r12, sp
    1bc0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1bc4:	e24cb004 	sub	r11, r12, #4
    1bc8:	e24bd028 	sub	sp, r11, #40	; 0x28
    1bcc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1bd0:	e12fff1e 	bx	lr

00001bd4 <__fini_array_start>:
    1bd4:	000001c4 	.word	0x000001c4

00001bd8 <__cs3_regions>:
	...
    1be4:	00002440 	.word	0x00002440
    1be8:	00000060 	.word	0x00000060

00001bec <__cs3_regions_end>:
    1bec:	00000000 	.word	0x00000000
