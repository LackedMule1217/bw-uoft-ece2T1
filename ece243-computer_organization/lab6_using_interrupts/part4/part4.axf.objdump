
D:/Lab 6/part4/part4.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000085 	b	220 <SERVICE_UND>
   8:	ea000085 	b	224 <SERVICE_SVC>
   c:	ea000086 	b	22c <SERVICE_ABT_INST>
  10:	ea000084 	b	228 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea00006d 	b	1d4 <SERVICE_IRQ>
  1c:	ea000083 	b	230 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

			
			
_start:
// 1) Set up stack pointers for IRQ and SVC processor modes
			MOV		R1, #0b11010010			// IRQ mode: interrupts disabled
  40:	e3a010d2 	mov	r1, #210	; 0xd2
			MSR		CPSR, R1				// write to CPSR
  44:	e129f001 	msr	CPSR_fc, r1
			LDR		SP, =0xFFFFFFFC			// set IRQ stack pointer
  48:	e3e0d003 	mvn	sp, #3
			MOV		R1, #0b11010011			// SVC mode: interrupts disabled
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
			MSR		CPSR, R1				// write to CPSR
  50:	e129f001 	msr	CPSR_fc, r1
			LDR		SP, =0x3FFFFFFC			// set SVC stack pointer
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003
			
// 2) Configure hardware by calling subroutines
			BL		CONFIG_GIC				// configure the ARM generic interrupt controller
  58:	eb000035 	bl	134 <CONFIG_GIC>
			BL		CONFIG_PTIMER			// configure the Private Timer
  5c:	eb00004a 	bl	18c <CONFIG_PTIMER>
			BL		CONFIG_ITIMER			// configure the Interval Timer
  60:	eb00004f 	bl	1a4 <CONFIG_ITIMER>
			BL		CONFIG_KEYS				// configure the pushbutton KEYs port
  64:	eb000056 	bl	1c4 <CONFIG_KEYS>

// 3) Enable IRQ interrupts in the ARM processor
			MOV		R0, #0b01010011			// enable IRQ, MODE = SVC
  68:	e3a00053 	mov	r0, #83	; 0x53
			MSR		CPSR, R0
  6c:	e129f000 	msr	CPSR_fc, r0

00000070 <LOOP>:

// 4) Continously show value of COUNT in LEDs
LOOP:		// write to the LEDR
			LDR		R3, =LEDR_ADDR
  70:	e59f32fc 	ldr	r3, [pc, #764]	; 374 <HEX_code+0x4>
			LDR		R5, COUNT
  74:	e59f52e4 	ldr	r5, [pc, #740]	; 360 <COUNT>
			STR		R5, [R3]
  78:	e5835000 	str	r5, [r3]
			
			// write to the HEX
			LDR		R3, =HEX_ADDR
  7c:	e59f32f4 	ldr	r3, [pc, #756]	; 378 <HEX_code+0x8>
			LDR		R5, TIME
  80:	e59f52e0 	ldr	r5, [pc, #736]	; 368 <TIME>
			LDR		R9, =6000				// if cnt==6000, reset counter to 0 and return to main
  84:	e59f92f0 	ldr	r9, [pc, #752]	; 37c <HEX_code+0xc>
			CMP		R5, R9				
  88:	e1550009 	cmp	r5, r9
			MOVEQ	R5, #0
  8c:	03a05000 	moveq	r5, #0
			STR		R5, TIME
  90:	e58f52d0 	str	r5, [pc, #720]	; 368 <TIME>
			MOV		R2, R5					// subroutine prep: moves count value to R2
  94:	e1a02005 	mov	r2, r5
			BL		HEX_DIVIDE				// calls hex divide subroutine
  98:	eb00000b 	bl	cc <HEX_DIVIDE>
			MOV		R9, R0					// stores remainder [0]
  9c:	e1a09000 	mov	r9, r0
			MOV		R2, R1					// stores quotient to be fed to HEX_DIVIDE again
  a0:	e1a02001 	mov	r2, r1
			BL		HEX_DIVIDE				// calls hex divide subroutine
  a4:	eb000008 	bl	cc <HEX_DIVIDE>
			MOV		R10, R0					// stores remainder [1]
  a8:	e1a0a000 	mov	r10, r0
			MOV		R2, R1					// stores quotient to be fed to HEX_DIVIDE again
  ac:	e1a02001 	mov	r2, r1
			BL		HEX_DIVIDE				// calls hex divide subroutine
  b0:	eb000005 	bl	cc <HEX_DIVIDE>
			MOV		R11, R0					// stores remainder [2]
  b4:	e1a0b000 	mov	r11, r0
			MOV		R12, R1					// stores quotient [3]
  b8:	e1a0c001 	mov	r12, r1
			BL		NUM_TO_HEX				// calls num to hex subroutine
  bc:	eb00000d 	bl	f8 <NUM_TO_HEX>
			LDR		R5, HEX_code
  c0:	e59f52a8 	ldr	r5, [pc, #680]	; 370 <HEX_code>
			STR		R5, [R3]
  c4:	e5835000 	str	r5, [r3]
			B		LOOP
  c8:	eaffffe8 	b	70 <LOOP>

000000cc <HEX_DIVIDE>:
 * Input: 		R2 - input data
 * Usage:		R4 - temporary quotient
 * Output: 		R0 - remainder
 *				R1 - quotient
 */
HEX_DIVIDE: PUSH	{R4-R12}
  cc:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			MOV 	R4, #0
  d0:	e3a04000 	mov	r4, #0

000000d4 <CONT>:
CONT: 		CMP 	R2, #10
  d4:	e352000a 	cmp	r2, #10
			BLT 	DIV_END
  d8:	ba000002 	blt	e8 <DIV_END>
			SUB 	R2, #10
  dc:	e242200a 	sub	r2, r2, #10
			ADD 	R4, #1
  e0:	e2844001 	add	r4, r4, #1
			B 		CONT
  e4:	eafffffa 	b	d4 <CONT>

000000e8 <DIV_END>:
DIV_END: 	MOV 	R1, R4 				// quotient in R1
  e8:	e1a01004 	mov	r1, r4
			MOV		R0, R2				// remainder in R0
  ec:	e1a00002 	mov	r0, r2
			POP		{R4-R12}
  f0:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
  f4:	e12fff1e 	bx	lr

000000f8 <NUM_TO_HEX>:
 * Usage:		R4 - HEX code
				R5 - HEX memory value
				R6 - temporary remainder hex code
 * Output:
 */
NUM_TO_HEX: PUSH	{R4-R12}
  f8:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR		R5, =HEX
  fc:	e59f527c 	ldr	r5, [pc, #636]	; 380 <__cs3_region_init_size_ram>
			LDRB	R4, [R5, R12]		// store SS:ff[3]
 100:	e7d5400c 	ldrb	r4, [r5, r12]
			LSL		R4, R4, #8
 104:	e1a04404 	lsl	r4, r4, #8
			LDRB	R6, [R5, R11]		// store SS:ff[2]
 108:	e7d5600b 	ldrb	r6, [r5, r11]
			ADD		R4, R6
 10c:	e0844006 	add	r4, r4, r6
			LSL		R4, R4, #8
 110:	e1a04404 	lsl	r4, r4, #8
			LDRB	R6, [R5, R10]		// store SS:ff[1]
 114:	e7d5600a 	ldrb	r6, [r5, r10]
			ADD		R4, R6
 118:	e0844006 	add	r4, r4, r6
			LSL		R4, R4, #8
 11c:	e1a04404 	lsl	r4, r4, #8
			LDRB	R6, [R5, R9]		// store SS:ff[0]
 120:	e7d56009 	ldrb	r6, [r5, r9]
			ADD		R4, R6
 124:	e0844006 	add	r4, r4, r6
			STR		R4, HEX_code		// store HEX code
 128:	e58f4240 	str	r4, [pc, #576]	; 370 <HEX_code>
			POP		{R4-R12}
 12c:	e8bd1ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
 130:	e12fff1e 	bx	lr

00000134 <CONFIG_GIC>:
 
 

/* A. Configure Hardware */
//		A.1 Configure GIC
CONFIG_GIC:	LDR		R0, =ICDISER_ADDR		// ICDISERn: set enable register
 134:	e59f0248 	ldr	r0, [pc, #584]	; 384 <__cs3_region_init_size_ram+0x4>
			LDR		R1, =0b1				// set interrupt enable for: private timer (ID=29), interval timer (ID=72), KEYs (ID=73)
 138:	e3a01001 	mov	r1, #1
			LSL		R1, R1, #29
 13c:	e1a01e81 	lsl	r1, r1, #29
			STR		R1, [R0]
 140:	e5801000 	str	r1, [r0]
			LDR		R1, =0b11
 144:	e3a01003 	mov	r1, #3
			LSL		R1, R1, #8
 148:	e1a01401 	lsl	r1, r1, #8
			STR		R1, [R0, #0x8]
 14c:	e5801008 	str	r1, [r0, #8]
			LDR		R0, =ICDIPTR_ADDR		// ICDIPTRn: processor targets register
 150:	e59f0230 	ldr	r0, [pc, #560]	; 388 <__cs3_region_init_size_ram+0x8>
			LDR		R1, =0b1				// set cpu0 for: private timer (ID=29), interval timer (ID=72), KEYs (ID=73)
 154:	e3a01001 	mov	r1, #1
			LSL		R1, R1, #8
 158:	e1a01401 	lsl	r1, r1, #8
			STR		R1, [R0, #0x1C]
 15c:	e580101c 	str	r1, [r0, #28]
			LDR		R1, =0b100000001
 160:	e59f1224 	ldr	r1, [pc, #548]	; 38c <__cs3_region_init_size_ram+0xc>
			STR		R1, [R0, #0x48]
 164:	e5801048 	str	r1, [r0, #72]	; 0x48
			LDR		R0, =ICDDCR_ADDR		// Enable ICDDCR to allow interrupts to be forwarded to CPU interface
 168:	e59f0220 	ldr	r0, [pc, #544]	; 390 <__cs3_region_init_size_ram+0x10>
			MOV		R1, #0x1
 16c:	e3a01001 	mov	r1, #1
			STR		R1, [R0]
 170:	e5801000 	str	r1, [r0]
			LDR		R0, =CPUIF_ADDR			// enable interrupts of all priorities in CPU interface
 174:	e59f0218 	ldr	r0, [pc, #536]	; 394 <__cs3_region_init_size_ram+0x14>
			LDR		R1, =0xFF
 178:	e3a010ff 	mov	r1, #255	; 0xff
			STR		R1, [R0, #4]
 17c:	e5801004 	str	r1, [r0, #4]
			MOV		R1, #0x1				// enable ICCICR to allow interrupts to be forwarded to CPU
 180:	e3a01001 	mov	r1, #1
			STR		R1, [R0]
 184:	e5801000 	str	r1, [r0]
			BX		LR
 188:	e12fff1e 	bx	lr

0000018c <CONFIG_PTIMER>:

//		A.2 Configure the Private Timer
CONFIG_PTIMER:
			LDR		R0, =PTIMER_ADDR		// private timer key base address
 18c:	e59f0204 	ldr	r0, [pc, #516]	; 398 <__cs3_region_init_size_ram+0x18>
			LDR		R1, =0x1E8480			// store 2M of count for 0.01 seconds (200 MHz)
 190:	e59f1204 	ldr	r1, [pc, #516]	; 39c <__cs3_region_init_size_ram+0x1c>
			STR		R1, [R0]
 194:	e5801000 	str	r1, [r0]
			MOV		R1, #0b111				// enable private timer with auto and interrupt
 198:	e3a01007 	mov	r1, #7
			STR		R1, [R0, #0x8]			// interrupt mask register (base + 8)
 19c:	e5801008 	str	r1, [r0, #8]
			BX		LR
 1a0:	e12fff1e 	bx	lr

000001a4 <CONFIG_ITIMER>:
			
//		A.3 Configure the Interval Timer
CONFIG_ITIMER:
			LDR		R0, =ITIMER_ADDR		// interval timer key base address
 1a4:	e59f01f4 	ldr	r0, [pc, #500]	; 3a0 <__cs3_region_init_size_ram+0x20>
			LDR		R1, =0x017D7840			// store 50M of count for 0.25 seconds (100 MHz)
 1a8:	e59f11f4 	ldr	r1, [pc, #500]	; 3a4 <__cs3_region_init_size_ram+0x24>
			STR		R1, [R0, #0x8]			// store LSB of counter start value
 1ac:	e5801008 	str	r1, [r0, #8]
			LSR		R1, R1, #16
 1b0:	e1a01821 	lsr	r1, r1, #16
			STR		R1, [R0, #0xC]			// store MSB of counter start value		
 1b4:	e580100c 	str	r1, [r0, #12]
			LDR		R1, =0b0111				// enable interval timer with interrupt
 1b8:	e3a01007 	mov	r1, #7
			STR		R1, [R0, #0x4]			// interrupt mask register (base + 8)
 1bc:	e5801004 	str	r1, [r0, #4]
			BX		LR
 1c0:	e12fff1e 	bx	lr

000001c4 <CONFIG_KEYS>:
			
//		A.4 Configure KEY pushbuttons
CONFIG_KEYS:
			LDR		R0, =KEY_ADDR			// pushbutton key base address
 1c4:	e59f01dc 	ldr	r0, [pc, #476]	; 3a8 <__cs3_region_init_size_ram+0x28>
			MOV		R1, #0xF				// enable interrupts for all 4 KEYs
 1c8:	e3a0100f 	mov	r1, #15
			STR		R1, [R0, #0x8]			// interrupt mask register (base + 8)
 1cc:	e5801008 	str	r1, [r0, #8]
			BX		LR
 1d0:	e12fff1e 	bx	lr

000001d4 <SERVICE_IRQ>:
			

/* B. Define the exception service routines */
//		B.1 IRQ
SERVICE_IRQ:
			PUSH	{R0-R12, LR}
 1d4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
			LDR		R4, =CPUIF_ADDR			// GIC CPU interface base address
 1d8:	e59f41b4 	ldr	r4, [pc, #436]	; 394 <__cs3_region_init_size_ram+0x14>
			LDR		R5, [R4, #0xC]			// read the ICCIAR in the CPU interface
 1dc:	e594500c 	ldr	r5, [r4, #12]

000001e0 <irq_1>:
			
irq_1:		CMP		R5, #29					// check if interrupted by private timer
 1e0:	e355001d 	cmp	r5, #29
			BNE		irq_2
 1e4:	1a000001 	bne	1f0 <irq_2>
			BL		PTIMER_ISR
 1e8:	eb000011 	bl	234 <PTIMER_ISR>
			B		exit_irq
 1ec:	ea000008 	b	214 <exit_irq>

000001f0 <irq_2>:
			
irq_2:		CMP		R5, #72					// check if interrupted by interval timer
 1f0:	e3550048 	cmp	r5, #72	; 0x48
			BNE		irq_3
 1f4:	1a000001 	bne	200 <irq_3>
			BL		ITIMER_ISR
 1f8:	eb000019 	bl	264 <ITIMER_ISR>
			B		exit_irq
 1fc:	ea000004 	b	214 <exit_irq>

00000200 <irq_3>:
			
irq_3:		CMP		R5, #73					// check if interrupted by KEYs
 200:	e3550049 	cmp	r5, #73	; 0x49
			BNE		unexpected
 204:	1a000001 	bne	210 <unexpected>
			BL		KEY_ISR
 208:	eb000021 	bl	294 <KEY_ISR>
			B		exit_irq
 20c:	ea000000 	b	214 <exit_irq>

00000210 <unexpected>:
			
unexpected:	BNE		unexpected				// if not recognized, stop here
 210:	1afffffe 	bne	210 <unexpected>

00000214 <exit_irq>:
			
exit_irq:	STR		R5, [R4, #0x10]			// write to the End of Interrupt Register (ICCEOIR) to clear interrupt
 214:	e5845010 	str	r5, [r4, #16]
			POP		{R0-R12, LR}
 218:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
			SUBS	PC, LR, #4				// return from exception
 21c:	e25ef004 	subs	pc, lr, #4

00000220 <SERVICE_UND>:

//		B.2 UNDEFINED
SERVICE_UND:
			B		SERVICE_UND
 220:	eafffffe 	b	220 <SERVICE_UND>

00000224 <SERVICE_SVC>:
		
//		B.3 SUPERVISOR		
SERVICE_SVC:
			B		SERVICE_SVC
 224:	eafffffe 	b	224 <SERVICE_SVC>

00000228 <SERVICE_ABT_DATA>:
		
//		B.4 ABT DATA		
SERVICE_ABT_DATA:
			B		SERVICE_ABT_DATA
 228:	eafffffe 	b	228 <SERVICE_ABT_DATA>

0000022c <SERVICE_ABT_INST>:
	
//		B.5 ABT INST	
SERVICE_ABT_INST:
			B		SERVICE_ABT_INST
 22c:	eafffffe 	b	22c <SERVICE_ABT_INST>

00000230 <SERVICE_FIQ>:
	
//		B.6 FIQ	
SERVICE_FIQ:
			B		SERVICE_FIQ
 230:	eafffffe 	b	230 <SERVICE_FIQ>

00000234 <PTIMER_ISR>:
			- R3: private timer base address
			- R4: RUN_P value
			- R5: TIME value
			- R6: miscellaneous
*/
PTIMER_ISR:	PUSH	{R0-R12}
 234:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR		R3, =PTIMER_ADDR		// private timer base address
 238:	e59f3158 	ldr	r3, [pc, #344]	; 398 <__cs3_region_init_size_ram+0x18>
			LDR		R4, RUN_P
 23c:	e59f4128 	ldr	r4, [pc, #296]	; 36c <RUN_P>
			LDR		R5, TIME
 240:	e59f5120 	ldr	r5, [pc, #288]	; 368 <TIME>
			MOV		R6, #1					// reset private timer and clear interrupt
 244:	e3a06001 	mov	r6, #1
			STR		R6, [R3, #0xC]
 248:	e583600c 	str	r6, [r3, #12]
			CMP		R4, #1					// if RUN_P is 1, increment TIME; if not, return
 24c:	e3540001 	cmp	r4, #1
			BNE		itimer_end
 250:	1a00000d 	bne	28c <itimer_end>
			ADD		R5, #1
 254:	e2855001 	add	r5, r5, #1
			STR		R5, TIME
 258:	e58f5108 	str	r5, [pc, #264]	; 368 <TIME>

0000025c <ptimer_end>:
ptimer_end: POP		{R0-R12}
 25c:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
 260:	e12fff1e 	bx	lr

00000264 <ITIMER_ISR>:
			- R3: interval timer base address
			- R4: RUN_I value
			- R5: COUNT value
			- R6: miscellaneous
*/
ITIMER_ISR:	PUSH	{R0-R12}
 264:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR		R3, =ITIMER_ADDR		// interval timer base address
 268:	e59f3130 	ldr	r3, [pc, #304]	; 3a0 <__cs3_region_init_size_ram+0x20>
			LDR		R4, RUN_I
 26c:	e59f40f0 	ldr	r4, [pc, #240]	; 364 <RUN_I>
			LDR		R5, COUNT
 270:	e59f50e8 	ldr	r5, [pc, #232]	; 360 <COUNT>
			MOV		R6, #0					// reset interval timer and clear interrupt
 274:	e3a06000 	mov	r6, #0
			STR		R6, [R3]
 278:	e5836000 	str	r6, [r3]
			CMP		R4, #1					// if RUN_I is 1, increment COUNT; if not, return
 27c:	e3540001 	cmp	r4, #1
			BNE		itimer_end
 280:	1a000001 	bne	28c <itimer_end>
			ADD		R5, #1
 284:	e2855001 	add	r5, r5, #1
			STR		R5, COUNT
 288:	e58f50d0 	str	r5, [pc, #208]	; 360 <COUNT>

0000028c <itimer_end>:
itimer_end: POP		{R0-R12}
 28c:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
 290:	e12fff1e 	bx	lr

00000294 <KEY_ISR>:
			- R5: interval timer count value
			- R6: KEY value
			- R7: RUN_I value
			- R8: miscellaneous
*/
KEY_ISR:	PUSH	{R0-R12}
 294:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			LDR		R3, =ITIMER_ADDR
 298:	e59f3100 	ldr	r3, [pc, #256]	; 3a0 <__cs3_region_init_size_ram+0x20>
			LDR		R4, =KEY_ADDR
 29c:	e59f4104 	ldr	r4, [pc, #260]	; 3a8 <__cs3_region_init_size_ram+0x28>
			LDR		R5, [R3, #0xC]			// load interval timer count value
 2a0:	e593500c 	ldr	r5, [r3, #12]
			LSL		R5, R5, #16
 2a4:	e1a05805 	lsl	r5, r5, #16
			LDR		R8, [R3, #0x8]
 2a8:	e5938008 	ldr	r8, [r3, #8]
			ADD		R5, R5, R8
 2ac:	e0855008 	add	r5, r5, r8
			LDR		R6, [R4, #0xC]			// read edge capture register
 2b0:	e594600c 	ldr	r6, [r4, #12]
			STR		R6, [R4, #0xC]			// clear the interrupt
 2b4:	e584600c 	str	r6, [r4, #12]

000002b8 <key0>:
			
key0:		CMP		R6, #0b0001				// check for KEY0: toggle RUN_I
 2b8:	e3560001 	cmp	r6, #1
			BNE		key1
 2bc:	1a000007 	bne	2e0 <key1>
			LDR		R7, RUN_I				// toggle RUN_I value
 2c0:	e59f709c 	ldr	r7, [pc, #156]	; 364 <RUN_I>
			CMP		R7, #0
 2c4:	e3570000 	cmp	r7, #0
			MOVEQ	R8, #1
 2c8:	03a08001 	moveq	r8, #1
			STREQ	R8, RUN_I
 2cc:	058f8090 	streq	r8, [pc, #144]	; 364 <RUN_I>
			BEQ		key_isr_end
 2d0:	0a00001d 	beq	34c <key_isr_end>
			MOV		R8, #0
 2d4:	e3a08000 	mov	r8, #0
			STR		R8, RUN_I
 2d8:	e58f8084 	str	r8, [pc, #132]	; 364 <RUN_I>
			B		key_isr_end
 2dc:	ea00001a 	b	34c <key_isr_end>

000002e0 <key1>:
			
key1:		CMP		R6, #0b0010				// check for KEY1: double interval counter start value
 2e0:	e3560002 	cmp	r6, #2
			BNE		key2
 2e4:	1a000001 	bne	2f0 <key2>
			LSL		R5, R5, #1				// double interval counter start value
 2e8:	e1a05085 	lsl	r5, r5, #1
			B		key_itimer_reset
 2ec:	ea00000d 	b	328 <key_itimer_reset>

000002f0 <key2>:
			
key2: 		CMP		R6, #0b0100				// check for KEY1: double interval counter start value
 2f0:	e3560004 	cmp	r6, #4
			BNE		key3
 2f4:	1a000001 	bne	300 <key3>
			LSR		R5, R5, #1				// half interval counter start value
 2f8:	e1a050a5 	lsr	r5, r5, #1
			B		key_itimer_reset
 2fc:	ea000009 	b	328 <key_itimer_reset>

00000300 <key3>:
			
key3: 		CMP		R6, #0b1000				// check for KEY1: double interval counter start value
 300:	e3560008 	cmp	r6, #8
			BNE		key_isr_end
 304:	1a000010 	bne	34c <key_isr_end>
			LDR		R7, RUN_P				// toggle RUN_P value
 308:	e59f705c 	ldr	r7, [pc, #92]	; 36c <RUN_P>
			CMP		R7, #0
 30c:	e3570000 	cmp	r7, #0
			MOVEQ	R8, #1
 310:	03a08001 	moveq	r8, #1
			STREQ	R8, RUN_P
 314:	058f8050 	streq	r8, [pc, #80]	; 36c <RUN_P>
			BEQ		key_isr_end
 318:	0a00000b 	beq	34c <key_isr_end>
			MOV		R8, #0
 31c:	e3a08000 	mov	r8, #0
			STR		R8, RUN_P
 320:	e58f8044 	str	r8, [pc, #68]	; 36c <RUN_P>
			B		key_isr_end
 324:	ea000008 	b	34c <key_isr_end>

00000328 <key_itimer_reset>:
			
key_itimer_reset:
			MOV		R8, #0b1011				// stop interval timer
 328:	e3a0800b 	mov	r8, #11
			STR		R8, [R3, #0x4]
 32c:	e5838004 	str	r8, [r3, #4]
			STR		R5, [R3, #0x8]			// store modified counter start value
 330:	e5835008 	str	r5, [r3, #8]
			LSR		R8, R5, #16
 334:	e1a08825 	lsr	r8, r5, #16
			STR		R8, [R3, #0xC]
 338:	e583800c 	str	r8, [r3, #12]
			MOV		R8, #0b0				// reset interval timer
 33c:	e3a08000 	mov	r8, #0
			STR		R8, [R3]
 340:	e5838000 	str	r8, [r3]
			MOV		R8, #0b0111				// start interval timer
 344:	e3a08007 	mov	r8, #7
			STR		R8, [R3, #0x4]
 348:	e5838004 	str	r8, [r3, #4]

0000034c <key_isr_end>:

key_isr_end:
			POP		{R0-R12}
 34c:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
			BX		LR
 350:	e12fff1e 	bx	lr

00000354 <HEX>:
 354:	4f5b063f 	.word	0x4f5b063f
 358:	077d6d66 	.word	0x077d6d66
 35c:	0000677f 	.word	0x0000677f

00000360 <COUNT>:
 360:	00000000 	.word	0x00000000

00000364 <RUN_I>:
 364:	00000001 	.word	0x00000001

00000368 <TIME>:
 368:	00000000 	.word	0x00000000

0000036c <RUN_P>:
 36c:	00000001 	.word	0x00000001

00000370 <HEX_code>:
 370:	00000000 	.word	0x00000000
 374:	ff200000 	.word	0xff200000
 378:	ff200020 	.word	0xff200020
 37c:	00001770 	.word	0x00001770
 380:	00000354 	.word	0x00000354
 384:	fffed100 	.word	0xfffed100
 388:	fffed800 	.word	0xfffed800
 38c:	00000101 	.word	0x00000101
 390:	fffed000 	.word	0xfffed000
 394:	fffec100 	.word	0xfffec100
 398:	fffec600 	.word	0xfffec600
 39c:	001e8480 	.word	0x001e8480
 3a0:	ff202000 	.word	0xff202000
 3a4:	017d7840 	.word	0x017d7840
 3a8:	ff200050 	.word	0xff200050
